MDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMDcwMDAwMDAwMDI2MS5zdGFydABmcGxheWJhY2sgLWkgb24gLXIgb24gLWYgMSAtZSBvbiAtaCBvbiAtdCBvbiAtYSBvbiAtayBvbiAtcyAxCnRjdXIgMi43NQpmcHMgMjQKdHNldCAwIDguMzMzMzMzMzMzMzMzMzMyMQpmcmFuZ2UgMSAyMDAKdW5pdGxlbmd0aCAxCnVuaXRtYXNzIDEKcHJvbXB0ICdgc3RyY2F0KG9wcHdmKCksICIgLT4gIilgJwowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxMzAwMDAwMDAxMDAzLnZhcmlhYmxlcwBzZXQgLWcgQUNUSVZFVEFLRSA9ICdNYWluJwpzZXQgLWcgRSA9ICcyLjcxODI4MTgyODQ1OTA0NTIzNTQnCnNldCAtZyBFWUUgPSAnc3RlcmVvJwpzZXQgLWcgSElQID0gJ0M6L1VzZXJzL2pvcmdlJwpzZXQgLWcgSElQRklMRSA9ICdDOi9Vc2Vycy9qb3JnZS9UcmFjaW5nLmhpcCcKc2V0IC1nIEhJUE5BTUUgPSAnVHJhY2luZycKc2V0IC1nIEpPQiA9ICdDOi9Vc2Vycy9qb3JnZScKc2V0IC1nIFBJID0gJzMuMTQxNTkyNjUzNTg5NzkzMjM4NCcKc2V0IC1nIFBPU0UgPSAnQzovVXNlcnMvam9yZ2UvT25lRHJpdmUvRG9jdW1lbnRzL2hvdWRpbmkyMC41L3Bvc2VsaWInCnNldCAtZyBfSElQX1NBVkVQTEFURk9STSA9ICd3aW5kb3dzLXg4Nl82NC1jbDE5LjM1JwpzZXQgLWcgX0hJUF9TQVZFVElNRSA9ICdUaHUgSnVsICAzIDIzOjE5OjU5IDIwMjUnCnNldCAtZyBfSElQX1NBVkVWRVJTSU9OID0gJzIwLjUuNTUwJwpzZXQgLWcgX0hJUF9TSEVMRlRPT0xDT1VOVCA9ICc3JwpzZXQgLWcgc3RhdHVzID0gJzAnCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDExMDAwMDAwMDAzMTAuYWxpYXNlcwBhbGlhcyBieWUgJ3F1aXQnCmFsaWFzIGNkICdvcGNmJwphbGlhcyBjcCAnb3BjcCcKYWxpYXMgaCAnaGlzdG9yeScKYWxpYXMgaHl0aG9uICdweXRob24nCmFsaWFzIGxzICdvcGxzJwphbGlhcyBtYXRyYW1wICdvcHJhbXAnCmFsaWFzIG9wY2QgJ29wY2YnCmFsaWFzIG9wcHdkICdvcHB3ZicKYWxpYXMgcHdkICdvcHB3ZicKYWxpYXMgcm0gJ29wcm0nCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDE0MDAwMDAwMDAwMjEudGFrZWNvbmZpZwB0YWtlbmFtZSAtZyB0YWtlCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDE1MDAwMDAwMDAwMDAuaG91LnNlc3Npb24AMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTUwMDAwMDAwMDAwMC5PUGxpYnJhcmllcwAwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxNzAwMDAwMDAwMDAwLk9QcHJlZmVyZW5jZXMAMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTUwMDAwMDAwMTczMi5PUGZhbGxiYWNrcwBTb3AvYXR0cmlicmFuZG9taXplIEM6L1BST0dSQX4xL1NJREVFRn4xL0hPVURJTn4xLjU1MC9ob3VkaW5pL290bHMvT1BsaWJTb3AuaGRhClNvcC9hdHRyaWJyYW5kb21pemUgb3Rscy9PUGxpYlNvcC5oZGEKU29wL2F0dHJpYndyYW5nbGUgQzovUFJPR1JBfjEvU0lERUVGfjEvSE9VRElOfjEuNTUwL2hvdWRpbmkvb3Rscy9PUGxpYlNvcC5oZGEKU29wL2F0dHJpYndyYW5nbGUgb3Rscy9PUGxpYlNvcC5oZGEKU29wL2NvbnZlcnRsaW5lIEM6L1BST0dSQX4xL1NJREVFRn4xL0hPVURJTn4xLjU1MC9ob3VkaW5pL290bHMvT1BsaWJTb3AuaGRhClNvcC9jb252ZXJ0bGluZSBvdGxzL09QbGliU29wLmhkYQpUb3AvbG9jYWxzY2hlZHVsZXIgQzovUFJPR1JBfjEvU0lERUVGfjEvSE9VRElOfjEuNTUwL2hvdWRpbmkvb3Rscy9PUGxpYlRvcC5oZGEKVG9wL2xvY2Fsc2NoZWR1bGVyIG90bHMvT1BsaWJUb3AuaGRhClZvcC9wcmluY2lwbGVkc2hhZGVyOjoyLjAgQzovUFJPR1JBfjEvU0lERUVGfjEvSE9VRElOfjEuNTUwL2hvdWRpbmkvb3Rscy9PUGxpYlZvcC5oZGEKVm9wL3ByaW5jaXBsZWRzaGFkZXI6OjIuMCBvdGxzL09QbGliVm9wLmhkYQpMb3Avc29wY3JlYXRlIEM6L1BST0dSQX4xL1NJREVFRn4xL0hPVURJTn4xLjU1MC9ob3VkaW5pL290bHMvT1BsaWJMb3AuaGRhCkxvcC9zb3BjcmVhdGUgb3Rscy9PUGxpYkxvcC5oZGEKU29wL3Rlc3RnZW9tZXRyeV9waWdoZWFkIEM6L1BST0dSQX4xL1NJREVFRn4xL0hPVURJTn4xLjU1MC9ob3VkaW5pL290bHMvT1BsaWJQbGFjZWhvbGRlci5oZGEKU29wL3Rlc3RnZW9tZXRyeV9waWdoZWFkIG90bHMvT1BsaWJQbGFjZWhvbGRlci5oZGEKU29wL3Rlc3RnZW9tZXRyeV9ydWJiZXJ0b3kgQzovUFJPR1JBfjEvU0lERUVGfjEvSE9VRElOfjEuNTUwL2hvdWRpbmkvb3Rscy9PUGxpYlBsYWNlaG9sZGVyLmhkYQpTb3AvdGVzdGdlb21ldHJ5X3J1YmJlcnRveSBvdGxzL09QbGliUGxhY2Vob2xkZXIuaGRhCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDE1MDAwMDA3NzAyMjAuT1BkdW1teWRlZnMASU5EWAAAAAAAAAAAAAAACgAAAA1JTkRFWF9TRUNUSU9OAAAAAAAABf5oZ0hfAAAAEmhvdWRpbmkuaGRhbGlicmFyeQAABf4AAAAAaGdIXwAAABNTb3AvYXR0cmlicmFuZG9taXplAAAF/gAAWaNoZ0fIAAAAEVNvcC9hdHRyaWJ3cmFuZ2xlAABfoQAAH8BoZ0fIAAAAD1NvcC9jb252ZXJ0bGluZQAAf2EAAAxsaGdHyAAAABJUb3AvbG9jYWxzY2hlZHVsZXIAAIvNAABO6mhnR8gAAAAZVm9wL3ByaW5jaXBsZWRzaGFkZXI6OjIuMAAA2rcAAnYpaGdHyAAAAA1Mb3Avc29wY3JlYXRlAANQ4AAAj6ZoZ0fIAAAAGFNvcC90ZXN0Z2VvbWV0cnlfcGlnaGVhZAAD4IYAAAd5aGdHyAAAABpTb3AvdGVzdGdlb21ldHJ5X3J1YmJlcnRveQAD5/8AAAclaGdHyAAAAAgAAAAEAAAAD2F0dHJpYnJhbmRvbWl6ZQAAABNBdHRyaWJ1dGUgUmFuZG9taXplAAAALm9wbGliOi9Tb3AvYXR0cmlicmFuZG9taXplP1NvcC9hdHRyaWJyYW5kb21pemUAAAATU09QX2F0dHJpYnJhbmRvbWl6ZQAAAAAAAAAAAAAAA1NvcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWhnSF8BAQAAAAAEAAAADWF0dHJpYndyYW5nbGUAAAARQXR0cmlidXRlIFdyYW5nbGUAAAAqb3BsaWI6L1NvcC9hdHRyaWJ3cmFuZ2xlP1NvcC9hdHRyaWJ3cmFuZ2xlAAAAEVNPUF9hdHRyaWJ3cmFuZ2xlAAAAAAAAAAAAAAADU29wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEaGdIXwEBAAAAAAQAAAALY29udmVydGxpbmUAAAAMQ29udmVydCBMaW5lAAAAJm9wbGliOi9Tb3AvY29udmVydGxpbmU/U29wL2NvbnZlcnRsaW5lAAAAD1NPUF9jb252ZXJ0bGluZQAAAAAAAAAAAAAAA1NvcAAAAAAAAAAAAAAAAAAAAGVpbnB1dGNvbG9ycz0nMSAiUkdCIDAuNzAwMTk1IDAuNzAwMTk1IDAuNzAwMTk1IiAnIG91dHB1dGNvbG9ycz0nMSAiUkdCIDAuNzAwMTk1IDAuNzAwMTk1IDAuNzAwMTk1IiAnIAAAAAEAAAABaGdIXwEBAAAAAAUAAAAObG9jYWxzY2hlZHVsZXIAAAAPTG9jYWwgU2NoZWR1bGVyAAAALG9wbGliOi9Ub3AvbG9jYWxzY2hlZHVsZXI/VG9wL2xvY2Fsc2NoZWR1bGVyAAAAElRPUF9sb2NhbHNjaGVkdWxlcgAAAAAAAAAAAAAAA1RvcAAAAAAAAAAAAAAAAAAAADxwZGd0eXBlPSdzY2hlZHVsZXInIHN1YnR5cGU9bG9jYWxzY2hlZHVsZXIgdmlzaWJsZW91dHB1dHM9MCAAAAAAAAAAAGhnSF8AAQAAAAAAAAAABQAAABVwcmluY2lwbGVkc2hhZGVyOjoyLjAAAAARUHJpbmNpcGxlZCBTaGFkZXIAAAA6b3BsaWI6L1ZvcC9wcmluY2lwbGVkc2hhZGVyOjoyLjA/Vm9wL3ByaW5jaXBsZWRzaGFkZXI6OjIuMAAAABRWT1BfcHJpbmNpcGxlZHNoYWRlcgAAAAAAAAAAAAAAA1ZvcAAAAAAAAAAAAAAAAAAAAChzaGFkZXJ0eXBlPXZvcG1hdGVyaWFsIHN1YnR5cGU9bWF0ZXJpYWwgAAAAAAAAAPBoZ0hfAQEAAAAIAAAAAAQAAAAJc29wY3JlYXRlAAAAClNPUCBDcmVhdGUAAAAib3BsaWI6L0xvcC9zb3BjcmVhdGU/TG9wL3NvcGNyZWF0ZQAAAA1MT1Bfc29wY3JlYXRlAAAAAAAAAAAAAAADTG9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABaGdIXwEBAAAAAAQAAAAUdGVzdGdlb21ldHJ5X3BpZ2hlYWQAAAAXVGVzdCBHZW9tZXRyeTogUGlnIEhlYWQAAAA4b3BsaWI6L1NvcC90ZXN0Z2VvbWV0cnlfcGlnaGVhZD9Tb3AvdGVzdGdlb21ldHJ5X3BpZ2hlYWQAAAAYU09QX3Rlc3RnZW9tZXRyeV9waWdoZWFkAAAAAAAAAAAAAAADU29wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaGdIXwEBAAAAAAQAAAAWdGVzdGdlb21ldHJ5X3J1YmJlcnRveQAAABlUZXN0IEdlb21ldHJ5OiBSdWJiZXIgVG95AAAAPG9wbGliOi9Tb3AvdGVzdGdlb21ldHJ5X3J1YmJlcnRveT9Tb3AvdGVzdGdlb21ldHJ5X3J1YmJlcnRveQAAABpTT1BfdGVzdGdlb21ldHJ5X3J1YmJlcnRveQAAAAAAAAAAAAAAA1NvcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhnSF8BAQBJTkRYAAAAAAAAAAAAAAACAAAACENvbnRlbnRzAAAAAAAAAFdoZ0fIAAAADERpYWxvZ1NjcmlwdAAAAFcAAFkIZzOJUTA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQzNzEwMDAwMDEzMDAwMDAwMDAwMDBUUkFJTEVSISEhACMgRGlhbG9nIHNjcmlwdCBmb3IgYXR0cmlicmFuZG9taXplIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkCgp7CiAgICBuYW1lCWF0dHJpYnJhbmRvbWl6ZQogICAgc2NyaXB0CWF0dHJpYnJhbmRvbWl6ZQogICAgbGFiZWwJIkF0dHJpYnV0ZSBSYW5kb21pemUiCgogICAgaGVscCB7CgkiIgogICAgfQoKICAgIGlucHV0bGFiZWwJMQkiR2VvbWV0cnkgdG8gUmFuZG9taXplIgogICAgaW5wdXRsYWJlbAkyCSJTdWItTmV0d29yayBJbnB1dCAjMiIKICAgIGlucHV0bGFiZWwJMwkiU3ViLU5ldHdvcmsgSW5wdXQgIzMiCiAgICBpbnB1dGxhYmVsCTQJIlN1Yi1OZXR3b3JrIElucHV0ICM0IgoKICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImdyb3VwIgogICAgICAgIGxhYmVsICAgIkdyb3VwIgogICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICBkaXNhYmxld2hlbiAieyB2aXN1YWxpemUgPT0gb24gfSIKICAgICAgICBtZW51dG9nZ2xlIHsKICAgICAgICAgICAgWyAib3BtZW51IC1sIC1hIGF0dHJpYndyYW5nbGUyIGdyb3VwIiBdCiAgICAgICAgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2FjdGlvbiIgImltcG9ydCBzb3B1dGlsc1xua3dhcmdzWydnZW9tZXRyeXR5cGUnXSA9IGt3YXJnc1snbm9kZSddLnBhcm1UdXBsZSgnZ3JvdXB0eXBlJylcbmt3YXJnc1snaW5wdXRpbmRleCddID0gMFxuc29wdXRpbHMuc2VsZWN0R3JvdXBQYXJtKGt3YXJncykiIH0KICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9hY3Rpb25faGVscCIgIlNlbGVjdCBnZW9tZXRyeSBmcm9tIGFuIGF2YWlsYWJsZSB2aWV3cG9ydC4iIH0KICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9hY3Rpb25faWNvbiIgIkJVVFRPTlNfcmVzZWxlY3QiIH0KICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgIiIgfQogICAgICAgIGJpbmRzZWxlY3RvciB1dnNlbGVjdCAiUmFuZG9taXplIEF0dHJpYnV0ZSBWYWx1ZXMiCiAgICAgICAgICAgICJTZWxlY3QgdGhlIGdlb21ldHJ5IHdob3NlIGF0dHJpYnV0ZSB2YWx1ZXMgc2hvdWxkIGJlIHJhbmRvbWl6ZWQsIGFuZCBwcmVzcyBFbnRlciB0byBjb21wbGV0ZS4iCiAgICAgICAgICAgIDAgMSBhbGwgMCBncm91cHR5cGUgMAogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiZ3JvdXB0eXBlIgogICAgICAgIGxhYmVsICAgIkdyb3VwIFR5cGUiCiAgICAgICAgdHlwZSAgICBvcmRpbmFsCiAgICAgICAgZGVmYXVsdCB7ICJndWVzcyIgfQogICAgICAgIGRpc2FibGV3aGVuICJ7IHZpc3VhbGl6ZSA9PSBvbiB9IgogICAgICAgIG1lbnUgewogICAgICAgICAgICAiZ3Vlc3MiICAgICAiR3Vlc3MgZnJvbSBHcm91cCIKICAgICAgICAgICAgInZlcnRpY2VzIiAgIlZlcnRpY2VzIgogICAgICAgICAgICAiZWRnZXMiICAgICAiRWRnZXMiCiAgICAgICAgICAgICJwb2ludHMiICAgICJQb2ludHMiCiAgICAgICAgICAgICJwcmltcyIgICAgICJQcmltaXRpdmVzIgogICAgICAgIH0KICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgIiIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiY2xhc3MiCiAgICAgICAgbGFiZWwgICAiQXR0cmlidXRlIENsYXNzIgogICAgICAgIHR5cGUgICAgb3JkaW5hbAogICAgICAgIGRlZmF1bHQgeyAicG9pbnQiIH0KICAgICAgICBkaXNhYmxld2hlbiAieyB2aXN1YWxpemUgPT0gb24gfSIKICAgICAgICBtZW51IHsKICAgICAgICAgICAgImRldGFpbCIgICAgIkRldGFpbCIKICAgICAgICAgICAgInByaW1pdGl2ZSIgIlByaW1pdGl2ZXMiCiAgICAgICAgICAgICJwb2ludCIgICAgICJQb2ludHMiCiAgICAgICAgICAgICJ2ZXJ0ZXgiICAgICJWZXJ0aWNlcyIKICAgICAgICB9CiAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2siICIiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgIm5hbWUiCiAgICAgICAgbGFiZWwgICAiQXR0cmlidXRlIE5hbWUiCiAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICBkZWZhdWx0IHsgIkNkIiB9CiAgICAgICAgZGlzYWJsZXdoZW4gInsgdmlzdWFsaXplID09IG9uIH0iCiAgICAgICAgbWVudXJlcGxhY2UgewogICAgICAgICAgICBbICJub2RlID0ga3dhcmdzWydub2RlJ10iIF0KICAgICAgICAgICAgWyAiYXR0cmliX3R5cGVzID0gKGhvdS5hdHRyaWJUeXBlLkdsb2JhbCwgaG91LmF0dHJpYlR5cGUuUHJpbSwiIF0KICAgICAgICAgICAgWyAiICAgICAgICAgICAgICAgIGhvdS5hdHRyaWJUeXBlLlBvaW50LCBob3UuYXR0cmliVHlwZS5WZXJ0ZXgpIiBdCiAgICAgICAgICAgIFsgImF0dHJpYl90eXBlID0gYXR0cmliX3R5cGVzW25vZGUucGFybSgnY2xhc3MnKS5ldmFsQXNJbnQoKV0iIF0KICAgICAgICAgICAgWyAicmV0dXJuIGt3YXJnc1snbm9kZSddLmdlbmVyYXRlSW5wdXRBdHRyaWJNZW51KDAsIGF0dHJpYl90eXBlKSIgXQogICAgICAgICAgICBsYW5ndWFnZSBweXRob24KICAgICAgICB9CiAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2siICIiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgIm9wZXJhdGlvbiIKICAgICAgICBsYWJlbCAgICJPcGVyYXRpb24iCiAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICBkZWZhdWx0IHsgInNldCIgfQogICAgICAgIGRpc2FibGV3aGVuICJ7IHZpc3VhbGl6ZSA9PSBvbiB9IgogICAgICAgIG1lbnUgewogICAgICAgICAgICAic2V0IiAgICJTZXQgVmFsdWUiCiAgICAgICAgICAgICJhZGQiICAgIkFkZCBWYWx1ZSIKICAgICAgICAgICAgIm1pbiIgICAiTWluaW11bSIKICAgICAgICAgICAgIm1heCIgICAiTWF4aW11bSIKICAgICAgICAgICAgIm11bHQiICAiTXVsdGlwbHkiCiAgICAgICAgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJzY2FsZSIKICAgICAgICBsYWJlbCAgICJHbG9iYWwgU2NhbGUiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgIiIgfQogICAgfQogICAgZ3JvdXAgewogICAgICAgIG5hbWUgICAgImZvbGRlcjAiCiAgICAgICAgbGFiZWwgICAiRGlzdHJpYnV0aW9uIgoKICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAiZGlzdHJpYnV0aW9uIgogICAgICAgICAgICBsYWJlbCAgICJEaXN0cmlidXRpb24iCiAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgIGRlZmF1bHQgeyAidW5pZm9ybSIgfQogICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICJjb25zdGFudCIgICAgICAgICAgIkNvbnN0YW50IFZhbHVlIChub3QgcmFuZG9tKSIKICAgICAgICAgICAgICAgICJiZXJub3VsbGkiICAgICAgICAgIlR3byBWYWx1ZXMiCiAgICAgICAgICAgICAgICAidW5pZm9ybSIgICAgICAgICAgICJVbmlmb3JtIChDb250aW51b3VzKSIKICAgICAgICAgICAgICAgICJ1bmlmb3JtZGlzY3JldGUiICAgIlVuaWZvcm0gKERpc2NyZXRlKSIKICAgICAgICAgICAgICAgICJ1bmlmb3Jtb3JpZW50IiAgICAgIkRpcmVjdGlvbiBvciBPcmllbnRhdGlvbiIKICAgICAgICAgICAgICAgICJ1bmlmb3JtYmFsbCIgICAgICAgIkluc2lkZSBTcGhlcmUiCiAgICAgICAgICAgICAgICAibm9ybWFsIiAgICAgICAgICAgICJOb3JtYWwgKEdhdXNzaWFuKSIKICAgICAgICAgICAgICAgICJleHBvbmVudGlhbCIgICAgICAgIkV4cG9uZW50aWFsIgogICAgICAgICAgICAgICAgImxvZ25vcm1hbCIgICAgICAgICAiTG9nLU5vcm1hbCIKICAgICAgICAgICAgICAgICJjYXVjaHkiICAgICAgICAgICAgIkNhdWNoeS1Mb3JlbnR6IgogICAgICAgICAgICAgICAgInJhbXAiICAgICAgICAgICAgICAiQ3VzdG9tIFJhbXAiCiAgICAgICAgICAgICAgICAiZGlzY3JldGUiICAgICAgICAgICJDdXN0b20gRGlzY3JldGUiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgIiIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAiZGltZW5zaW9ucyIKICAgICAgICAgICAgbGFiZWwgICAiRGltZW5zaW9ucyIKICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgIGRlZmF1bHQgeyAiMyIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaXN0cmlidXRpb24gPT0gZGlzY3JldGUgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uID09IGRpc2NyZXRlIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAxISA0ISB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgIiIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAiYWxsc2FtZSIKICAgICAgICAgICAgbGFiZWwgICAiVXNlIEZpcnN0IERpbWVuc2lvbidzIFBhcmFtZXRlcnMgZm9yIEFsbCIKICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uID09IHVuaWZvcm1vcmllbnQgfSB7IGRpc3RyaWJ1dGlvbiA9PSB1bmlmb3JtYmFsbCB9IHsgZGlzdHJpYnV0aW9uID09IHJhbXAgfSB7IGRpc3RyaWJ1dGlvbiA9PSBkaXNjcmV0ZSB9IHsgZGltZW5zaW9ucyA9PSAxIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiA9PSB1bmlmb3Jtb3JpZW50IH0geyBkaXN0cmlidXRpb24gPT0gdW5pZm9ybWJhbGwgfSB7IGRpc3RyaWJ1dGlvbiA9PSByYW1wIH0geyBkaXN0cmlidXRpb24gPT0gZGlzY3JldGUgfSB7IGRpbWVuc2lvbnMgPT0gMSB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJjb25zdHZhbHVlIgogICAgICAgICAgICBsYWJlbCAgICJWYWx1ZSIKICAgICAgICAgICAgdHlwZSAgICB2ZWN0b3I0CiAgICAgICAgICAgIHNpemUgICAgNAogICAgICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgIjAiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IGNvbnN0YW50IH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSBjb25zdGFudCB9IgogICAgICAgICAgICByYW5nZSAgIHsgLTEgMSB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgIiIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAidmFsdWVhIgogICAgICAgICAgICBsYWJlbCAgICJWYWx1ZSBBIgogICAgICAgICAgICB0eXBlICAgIHZlY3RvcjQKICAgICAgICAgICAgc2l6ZSAgICA0CiAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiAiMCIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaXN0cmlidXRpb24gIT0gYmVybm91bGxpIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSBiZXJub3VsbGkgfSIKICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2siICIiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInZhbHVlYiIKICAgICAgICAgICAgbGFiZWwgICAiVmFsdWUgQiIKICAgICAgICAgICAgdHlwZSAgICB2ZWN0b3I0CiAgICAgICAgICAgIHNpemUgICAgNAogICAgICAgICAgICBkZWZhdWx0IHsgIjEiICIxIiAiMSIgIjEiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IGJlcm5vdWxsaSB9IgogICAgICAgICAgICBoaWRld2hlbiAieyBkaXN0cmlidXRpb24gIT0gYmVybm91bGxpIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAtMSAxIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJwcm9idmFsdWViIgogICAgICAgICAgICBsYWJlbCAgICJQcm9iYWJpbGl0eSBvZiBWYWx1ZSBCIgogICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgIGRlZmF1bHQgeyAiMC41IiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSBiZXJub3VsbGkgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IGJlcm5vdWxsaSB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCEgMSEgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAibWluIgogICAgICAgICAgICBsYWJlbCAgICJNaW4gVmFsdWUiCiAgICAgICAgICAgIHR5cGUgICAgdmVjdG9yNAogICAgICAgICAgICBzaXplICAgIDQKICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiICIwIiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3JtIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3JtIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAtMSAxIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJtYXgiCiAgICAgICAgICAgIGxhYmVsICAgIk1heCBWYWx1ZSIKICAgICAgICAgICAgdHlwZSAgICB2ZWN0b3I0CiAgICAgICAgICAgIHNpemUgICAgNAogICAgICAgICAgICBkZWZhdWx0IHsgIjEiICIxIiAiMSIgIjEiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm0gfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm0gfSIKICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2siICIiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgIm1pbmRpc2NyZXRlIgogICAgICAgICAgICBsYWJlbCAgICJNaW4gVmFsdWUiCiAgICAgICAgICAgIHR5cGUgICAgdmVjdG9yNAogICAgICAgICAgICBzaXplICAgIDQKICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiICIwIiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3JtZGlzY3JldGUgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1kaXNjcmV0ZSB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCAxMDAgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2siICIiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgIm1heGRpc2NyZXRlIgogICAgICAgICAgICBsYWJlbCAgICJNYXggVmFsdWUiCiAgICAgICAgICAgIHR5cGUgICAgdmVjdG9yNAogICAgICAgICAgICBzaXplICAgIDQKICAgICAgICAgICAgZGVmYXVsdCB7ICI5IiAiOSIgIjkiICI5IiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3JtZGlzY3JldGUgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1kaXNjcmV0ZSB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCAxMDAgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2siICIiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInN0ZXBzaXplIgogICAgICAgICAgICBsYWJlbCAgICJTdGVwIFNpemUiCiAgICAgICAgICAgIHR5cGUgICAgdmVjdG9yNAogICAgICAgICAgICBzaXplICAgIDQKICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiAiMSIgIjEiICIxIiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3JtZGlzY3JldGUgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1kaXNjcmV0ZSB9IgogICAgICAgICAgICByYW5nZSAgIHsgLTEgMSB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJtZWRpYW4iCiAgICAgICAgICAgIGxhYmVsICAgIk1pZGRsZSBWYWx1ZSIKICAgICAgICAgICAgdHlwZSAgICB2ZWN0b3I0CiAgICAgICAgICAgIHNpemUgICAgNAogICAgICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgIjAiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IG5vcm1hbCBkaXN0cmlidXRpb24gIT0gY2F1Y2h5IH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSBub3JtYWwgZGlzdHJpYnV0aW9uICE9IGNhdWNoeSB9IgogICAgICAgICAgICByYW5nZSAgIHsgLTEwIDEwIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJvbmVzaWRlZG1lZGlhbiIKICAgICAgICAgICAgbGFiZWwgICAiTWlkZGxlIFZhbHVlIgogICAgICAgICAgICB0eXBlICAgIHZlY3RvcjQKICAgICAgICAgICAgc2l6ZSAgICA0CiAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgIjEiICIxIiAiMSIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaXN0cmlidXRpb24gIT0gbG9nbm9ybWFsIGRpc3RyaWJ1dGlvbiAhPSBleHBvbmVudGlhbCB9IgogICAgICAgICAgICBoaWRld2hlbiAieyBkaXN0cmlidXRpb24gIT0gbG9nbm9ybWFsIGRpc3RyaWJ1dGlvbiAhPSBleHBvbmVudGlhbCB9IgogICAgICAgICAgICByYW5nZSAgIHsgLTEgMSB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJtZWRpYW5hdHRyaWIiCiAgICAgICAgICAgIGxhYmVsICAgIk1pZGRsZSBWYWx1ZSBBdHRyaWJ1dGUiCiAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHZpc3VhbGl6ZSA9PSBvbiB9IHsgZGlzdHJpYnV0aW9uICE9IG5vcm1hbCBkaXN0cmlidXRpb24gIT0gY2F1Y2h5IGRpc3RyaWJ1dGlvbiAhPSBsb2dub3JtYWwgZGlzdHJpYnV0aW9uICE9IGV4cG9uZW50aWFsIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSBub3JtYWwgZGlzdHJpYnV0aW9uICE9IGNhdWNoeSBkaXN0cmlidXRpb24gIT0gbG9nbm9ybWFsIGRpc3RyaWJ1dGlvbiAhPSBleHBvbmVudGlhbCB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJzdGRkZXYiCiAgICAgICAgICAgIGxhYmVsICAgIlNjYWxlIEFyb3VuZCBNaWRkbGUiCiAgICAgICAgICAgIHR5cGUgICAgdmVjdG9yNAogICAgICAgICAgICBzaXplICAgIDQKICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiAiMSIgIjEiICIxIiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSBub3JtYWwgZGlzdHJpYnV0aW9uICE9IGNhdWNoeSB9IgogICAgICAgICAgICBoaWRld2hlbiAieyBkaXN0cmlidXRpb24gIT0gbm9ybWFsIGRpc3RyaWJ1dGlvbiAhPSBjYXVjaHkgfSIKICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2siICIiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgIm9uZXNpZGVkc3RkZGV2IgogICAgICAgICAgICBsYWJlbCAgICJTcHJlYWQgQXJvdW5kIE1pZGRsZSIKICAgICAgICAgICAgdHlwZSAgICB2ZWN0b3I0CiAgICAgICAgICAgIHNpemUgICAgNAogICAgICAgICAgICBkZWZhdWx0IHsgIjAuMiIgIjAuMiIgIjAuMiIgIjAuMiIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaXN0cmlidXRpb24gIT0gbG9nbm9ybWFsIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSBsb2dub3JtYWwgfSIKICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDEgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAidXNlZml0MHRvIgogICAgICAgICAgICBsYWJlbCAgICJVc2UgRml0IFZhbHVlIDAgVG8iCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHJhbXAgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHJhbXAgfSIKICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJmaXQwdG8iCiAgICAgICAgICAgIGxhYmVsICAgIkZpdCBWYWx1ZSAwIFRvIgogICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaXN0cmlidXRpb24gIT0gcmFtcCB9IHsgdXNlZml0MHRvICE9IG9uIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSByYW1wIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAtMiAyIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInVzZWZpdDF0byIKICAgICAgICAgICAgbGFiZWwgICAiVXNlIEZpdCBWYWx1ZSAxIFRvIgogICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSByYW1wIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSByYW1wIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAiZml0MXRvIgogICAgICAgICAgICBsYWJlbCAgICJGaXQgVmFsdWUgMSBUbyIKICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHJhbXAgfSB7IHVzZWZpdDF0byAhPSBvbiB9IgogICAgICAgICAgICBoaWRld2hlbiAieyBkaXN0cmlidXRpb24gIT0gcmFtcCB9IgogICAgICAgICAgICByYW5nZSAgIHsgLTIgMiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJyYW1wIgogICAgICAgICAgICBsYWJlbCAgICJDdXN0b20gUmFtcCIKICAgICAgICAgICAgdHlwZSAgICByYW1wX2ZsdAogICAgICAgICAgICBkZWZhdWx0IHsgIjMiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHJhbXAgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHJhbXAgfSIKICAgICAgICAgICAgcmFuZ2UgICB7IDEhIDEwIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAicmFtcGJhc2lzZGVmYXVsdCIgIm1vbm90b25lY3ViaWMiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJyYW1wZmxvYXRkZWZhdWx0IiAiMXBvcyAoIDAgKSAxdmFsdWUgKCAwICkgMWludGVycCAoIG1vbm90b25lY3ViaWMgKSAycG9zICggMC41ICkgMnZhbHVlICggMC41ICkgMmludGVycCAoIG1vbm90b25lY3ViaWMgKSAzcG9zICggMSApIDN2YWx1ZSAoIDEgKSAzaW50ZXJwICggbW9ub3RvbmVjdWJpYyApIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJ1c2VtaW5saW1pdCIKICAgICAgICAgICAgbGFiZWwgICAiVXNlIE1pbiBMaW1pdCIKICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgbm9sYWJlbAogICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaXN0cmlidXRpb24gIT0gbm9ybWFsIGRpc3RyaWJ1dGlvbiAhPSBjYXVjaHkgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IG5vcm1hbCBkaXN0cmlidXRpb24gIT0gY2F1Y2h5IH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAibWlubGltaXQiCiAgICAgICAgICAgIGxhYmVsICAgIk1pbiBMaW1pdCIKICAgICAgICAgICAgdHlwZSAgICB2ZWN0b3I0CiAgICAgICAgICAgIHNpemUgICAgNAogICAgICAgICAgICBkZWZhdWx0IHsgIi0xMDAiICItMTAwIiAiLTEwMCIgIi0xMDAiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IG5vcm1hbCBkaXN0cmlidXRpb24gIT0gY2F1Y2h5IH0geyB1c2VtaW5saW1pdCA9PSBvZmYgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IG5vcm1hbCBkaXN0cmlidXRpb24gIT0gY2F1Y2h5IH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAtMSAxIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInVzZW9uZXNpZGVkbWluIgogICAgICAgICAgICBsYWJlbCAgICJVc2UgTWluIExpbWl0IgogICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSBleHBvbmVudGlhbCBkaXN0cmlidXRpb24gIT0gbG9nbm9ybWFsIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSBleHBvbmVudGlhbCBkaXN0cmlidXRpb24gIT0gbG9nbm9ybWFsIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAib25lc2lkZWRtaW4iCiAgICAgICAgICAgIGxhYmVsICAgIk1pbiBMaW1pdCIKICAgICAgICAgICAgdHlwZSAgICB2ZWN0b3I0CiAgICAgICAgICAgIHNpemUgICAgNAogICAgICAgICAgICBkZWZhdWx0IHsgIjAuMSIgIjAuMSIgIjAuMSIgIjAuMSIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaXN0cmlidXRpb24gIT0gZXhwb25lbnRpYWwgZGlzdHJpYnV0aW9uICE9IGxvZ25vcm1hbCB9IHsgdXNlb25lc2lkZWRtaW4gIT0gb24gfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IGV4cG9uZW50aWFsIGRpc3RyaWJ1dGlvbiAhPSBsb2dub3JtYWwgfSIKICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDEgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAidXNlbWF4bGltaXQiCiAgICAgICAgICAgIGxhYmVsICAgIlVzZSBNYXggTGltaXQiCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IG5vcm1hbCBkaXN0cmlidXRpb24gIT0gY2F1Y2h5IGRpc3RyaWJ1dGlvbiAhPSBleHBvbmVudGlhbCBkaXN0cmlidXRpb24gIT0gbG9nbm9ybWFsIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSBub3JtYWwgZGlzdHJpYnV0aW9uICE9IGNhdWNoeSBkaXN0cmlidXRpb24gIT0gZXhwb25lbnRpYWwgZGlzdHJpYnV0aW9uICE9IGxvZ25vcm1hbCB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgIm1heGxpbWl0IgogICAgICAgICAgICBsYWJlbCAgICJNYXggTGltaXQiCiAgICAgICAgICAgIHR5cGUgICAgdmVjdG9yNAogICAgICAgICAgICBzaXplICAgIDQKICAgICAgICAgICAgZGVmYXVsdCB7ICIxMDAiICIxMDAiICIxMDAiICIxMDAiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IG5vcm1hbCBkaXN0cmlidXRpb24gIT0gY2F1Y2h5IGRpc3RyaWJ1dGlvbiAhPSBleHBvbmVudGlhbCBkaXN0cmlidXRpb24gIT0gbG9nbm9ybWFsIH0geyB1c2VtYXhsaW1pdCA9PSBvZmYgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IG5vcm1hbCBkaXN0cmlidXRpb24gIT0gY2F1Y2h5IGRpc3RyaWJ1dGlvbiAhPSBleHBvbmVudGlhbCBkaXN0cmlidXRpb24gIT0gbG9nbm9ybWFsIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAtMSAxIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInVzZWNvbmVhbmdsZSIKICAgICAgICAgICAgbGFiZWwgICAiVXNlIENvbmUgQW5nbGUiCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1vcmllbnQgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1iYWxsIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3Jtb3JpZW50IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3JtYmFsbCB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgImNvbmVhbmdsZSIKICAgICAgICAgICAgbGFiZWwgICAiQ29uZSBBbmdsZSIKICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICBkZWZhdWx0IHsgIjMwIiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3Jtb3JpZW50IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3JtYmFsbCB9IHsgdXNlY29uZWFuZ2xlID09IG9mZiB9IgogICAgICAgICAgICBoaWRld2hlbiAieyBkaXN0cmlidXRpb24gIT0gdW5pZm9ybW9yaWVudCBkaXN0cmlidXRpb24gIT0gdW5pZm9ybWJhbGwgfSIKICAgICAgICAgICAgcmFuZ2UgICB7IDAhIDE4MCB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJ1c2Vwb3dlcmJpYXMiCiAgICAgICAgICAgIGxhYmVsICAgIlVzZSBCaWFzIFRvd2FyZCBEaXJlY3Rpb24iCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1vcmllbnQgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1iYWxsIH0iCiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3Jtb3JpZW50IGRpc3RyaWJ1dGlvbiAhPSB1bmlmb3JtYmFsbCB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInBvd2VyYmlhcyIKICAgICAgICAgICAgbGFiZWwgICAiQmlhcyBUb3dhcmQgRGlyZWN0aW9uIgogICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaXN0cmlidXRpb24gIT0gdW5pZm9ybW9yaWVudCBkaXN0cmlidXRpb24gIT0gdW5pZm9ybWJhbGwgfSB7IHVzZXBvd2VyYmlhcyA9PSBvZmYgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1vcmllbnQgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1iYWxsIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAtMSEgMjAgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9hY3Rpb24iICIiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgImRpcmVjdGlvbiIKICAgICAgICAgICAgbGFiZWwgICAiRGlyZWN0aW9uIgogICAgICAgICAgICB0eXBlICAgIHZlY3RvcjQKICAgICAgICAgICAgc2l6ZSAgICA0CiAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgIjAiICIwIiAiMCIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaXN0cmlidXRpb24gIT0gdW5pZm9ybW9yaWVudCBkaXN0cmlidXRpb24gIT0gdW5pZm9ybWJhbGwgfSB7IHVzZWNvbmVhbmdsZSA9PSBvZmYgdXNlcG93ZXJiaWFzID09IG9mZiB9IgogICAgICAgICAgICBoaWRld2hlbiAieyBkaXN0cmlidXRpb24gIT0gdW5pZm9ybW9yaWVudCBkaXN0cmlidXRpb24gIT0gdW5pZm9ybWJhbGwgfSIKICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9hY3Rpb24iICIiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgImRpcmVjdGlvbmF0dHJpYiIKICAgICAgICAgICAgbGFiZWwgICAiRGlyZWN0aW9uIEF0dHJpYnV0ZSIKICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1vcmllbnQgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1iYWxsIH0geyB1c2Vjb25lYW5nbGUgPT0gb2ZmIHVzZXBvd2VyYmlhcyA9PSBvZmYgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1vcmllbnQgZGlzdHJpYnV0aW9uICE9IHVuaWZvcm1iYWxsIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIH0KICAgICAgICBncm91cCB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlciIKICAgICAgICAgICAgbGFiZWwgICAiU3BlY2lmaWMgVmFsdWVzIgogICAgICAgICAgICBoaWRld2hlbnRhYiAieyBkaXN0cmlidXRpb24gIT0gZGlzY3JldGUgfSIKICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzdHJpYnV0aW9uICE9IGRpc2NyZXRlIH0iCgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInZhbHVldHlwZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlR5cGUiCiAgICAgICAgICAgICAgICB0eXBlICAgIG9yZGluYWwKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgImZsb2F0IiAgICAgIkZsb2F0IgogICAgICAgICAgICAgICAgICAgICJzdHJpbmciICAgICJTdHJpbmciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbXVsdGlwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInZhbHVlcyIKICAgICAgICAgICAgICAgIGxhYmVsICAgICJOdW1iZXIgb2YgVmFsdWVzIgogICAgICAgICAgICAgICAgZGVmYXVsdCA0CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm11bHRpc3RhcnRvZmZzZXQiICIwIiB9CgogICAgICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAic3RydmFsdWUjIgogICAgICAgICAgICAgICAgICAgIGxhYmVsICAgIlZhbHVlICMiCiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgdmFsdWV0eXBlID09IGZsb2F0IH0iCiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAidmFsdWUjIgogICAgICAgICAgICAgICAgICAgIGxhYmVsICAgIlZhbHVlICMiCiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgdmFsdWV0eXBlID09IHN0cmluZyB9IgogICAgICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgICAgIG5hbWUgICAgIndlaWdodCMiCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiV2VpZ2h0IgogICAgICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCEgMiB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgfQoKICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAibm9ybWFsaXplIgogICAgICAgICAgICBsYWJlbCAgICJOb3JtYWxpemUiCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpc3RyaWJ1dGlvbiA9PSB1bmlmb3Jtb3JpZW50IH0geyBkaXN0cmlidXRpb24gPT0gdW5pZm9ybWJhbGwgfSB7IGRpc3RyaWJ1dGlvbiA9PSB1bmlmb3JtZGlzY3JldGUgfSB7IGRpc3RyaWJ1dGlvbiA9PSBkaXNjcmV0ZSB9IgogICAgICAgICAgICBoaWRld2hlbiAieyBkaXN0cmlidXRpb24gPT0gdW5pZm9ybW9yaWVudCB9IHsgZGlzdHJpYnV0aW9uID09IHVuaWZvcm1iYWxsIH0geyBkaXN0cmlidXRpb24gPT0gdW5pZm9ybWRpc2NyZXRlIH0geyBkaXN0cmlidXRpb24gPT0gZGlzY3JldGUgfSIKICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgIiIgfQogICAgICAgIH0KICAgIH0KCiAgICBncm91cCB7CiAgICAgICAgbmFtZSAgICAiZm9sZGVyMF8xIgogICAgICAgIGxhYmVsICAgIk9wdGlvbnMiCgogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJ2aXN1YWxpemUiCiAgICAgICAgICAgIGxhYmVsICAgIlZpc3VhbGl6ZSBhcyBQb2ludHMiCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgIiIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAibnZpc3VhbGl6ZXB0cyIKICAgICAgICAgICAgbGFiZWwgICAiVmlzdWFsaXplIGFzIFBvaW50cyIKICAgICAgICAgICAgdHlwZSAgICBpbnRsb2cKICAgICAgICAgICAgZGVmYXVsdCB7ICIxMDAwMCIgfQogICAgICAgICAgICByYW5nZSAgIHsgMCEgMTAwMDAwIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJ1c2VmcmFjdGlvbmF0dHJpYiIKICAgICAgICAgICAgbGFiZWwgICAiVXNlIEZyYWN0aW9uIEF0dHJpYnV0ZSIKICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgbm9sYWJlbAogICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyB2aXN1YWxpemUgPT0gb24gfSB7IGRpc3RyaWJ1dGlvbiA9PSBjb25zdGFudCB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgImZyYWN0aW9uYXR0cmliIgogICAgICAgICAgICBsYWJlbCAgICJGcmFjdGlvbiBBdHRyaWJ1dGUiCiAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgIGRlZmF1bHQgeyAiZnJhY3Rpb24iIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgdmlzdWFsaXplID09IG9uIH0geyBkaXN0cmlidXRpb24gPT0gY29uc3RhbnQgfSB7IHVzZWZyYWN0aW9uYXR0cmliID09IG9mZiB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInNlZWQiCiAgICAgICAgICAgIGxhYmVsICAgIkdsb2JhbCBTZWVkIgogICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaXN0cmlidXRpb24gPT0gY29uc3RhbnQgfSB7IHVzZWZyYWN0aW9uYXR0cmliID09IG9uIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJ1c2VzZWVkYXR0cmliIgogICAgICAgICAgICBsYWJlbCAgICJVc2UgU2VlZCBBdHRyaWJ1dGUiCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgdmlzdWFsaXplID09IG9uIH0geyBkaXN0cmlidXRpb24gPT0gY29uc3RhbnQgfSIKICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgIiIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAic2VlZGF0dHJpYiIKICAgICAgICAgICAgbGFiZWwgICAiU2VlZCBBdHRyaWJ1dGUiCiAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgIGRlZmF1bHQgeyAiaWQiIH0KICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgdmlzdWFsaXplID09IG9uIH0geyBkaXN0cmlidXRpb24gPT0gY29uc3RhbnQgfSB7IHVzZWZyYWN0aW9uYXR0cmliID09IG9uIH0geyB1c2VzZWVkYXR0cmliID09IG9mZiB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICAgICAgfQogICAgfQoKfQpJTkRYAAAAAAAAAAAAAAACAAAACENvbnRlbnRzAAAAAAAAAFdoZ0fIAAAADERpYWxvZ1NjcmlwdAAAAFcAAB8lZzOJUTA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQzNzEwMDAwMDEzMDAwMDAwMDAwMDBUUkFJTEVSISEhACMgRGlhbG9nIHNjcmlwdCBmb3IgYXR0cmlid3JhbmdsZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZAoKewogICAgbmFtZQlhdHRyaWJ3cmFuZ2xlCiAgICBzY3JpcHQJYXR0cmlid3JhbmdsZQogICAgbGFiZWwJIkF0dHJpYnV0ZSBXcmFuZ2xlIgoKICAgIGhlbHAgewoJIiIKICAgIH0KCiAgICBpbnB1dGxhYmVsCTEJIkdlb21ldHJ5IHRvIFByb2Nlc3Mgd2l0aCBXcmFuZ2xlIgogICAgaW5wdXRsYWJlbAkyCSJBbmNpbGxhcnkgSW5wdXQsIHBvaW50KDEsIC4uLikgdG8gQWNjZXNzIgogICAgaW5wdXRsYWJlbAkzCSJBbmNpbGxhcnkgSW5wdXQsIHBvaW50KDIsIC4uLikgdG8gQWNjZXNzIgogICAgaW5wdXRsYWJlbAk0CSJBbmNpbGxhcnkgSW5wdXQsIHBvaW50KDMsIC4uLikgdG8gQWNjZXNzIgoKICAgIGdyb3VwIHsKICAgICAgICBuYW1lICAgICJmb2xkZXIwIgogICAgICAgIGxhYmVsICAgIkNvZGUiCgogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJncm91cCIKICAgICAgICAgICAgbGFiZWwgICAiR3JvdXAiCiAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgIG1lbnV0b2dnbGUgewogICAgICAgICAgICAgICAgWyAib3BtZW51IC1sIC1hIGF0dHJpYnZvcDEgYmluZGdyb3VwIiBdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9hY3Rpb24iICJpbXBvcnQgc29wdXRpbHNcbmt3YXJnc1snZ2VvbWV0cnl0eXBlJ10gPSBrd2FyZ3NbJ25vZGUnXS5wYXJtVHVwbGUoJ2dyb3VwdHlwZScpXG5rd2FyZ3NbJ2lucHV0aW5kZXgnXSA9IDBcbnNvcHV0aWxzLnNlbGVjdEdyb3VwUGFybShrd2FyZ3MpIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2FjdGlvbl9oZWxwIiAiU2VsZWN0IGdlb21ldHJ5IGZyb20gYW4gYXZhaWxhYmxlIHZpZXdwb3J0LiIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9hY3Rpb25faWNvbiIgIkJVVFRPTlNfcmVzZWxlY3QiIH0KICAgICAgICAgICAgYmluZHNlbGVjdG9yIHV2c2VsZWN0ICJNb2RpZnkgQXR0cmlicyIKICAgICAgICAgICAgICAgICJTZWxlY3QgdGhlIGdlb21ldHJ5IHRvIGFmZmVjdCBhbmQgcHJlc3MgRW50ZXIgdG8gY29tcGxldGUuIgogICAgICAgICAgICAgICAgMCAxIDB4ZmZmZmZmZmYgMCBncm91cHR5cGUgMAogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAiZ3JvdXB0eXBlIgogICAgICAgICAgICBsYWJlbCAgICJHcm91cCBUeXBlIgogICAgICAgICAgICB0eXBlICAgIG9yZGluYWwKICAgICAgICAgICAgZGVmYXVsdCB7ICJndWVzcyIgfQogICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICJndWVzcyIgICAgICJHdWVzcyBmcm9tIEdyb3VwIgogICAgICAgICAgICAgICAgInZlcnRpY2VzIiAgIlZlcnRpY2VzIgogICAgICAgICAgICAgICAgImVkZ2VzIiAgICAgIkVkZ2VzIgogICAgICAgICAgICAgICAgInBvaW50cyIgICAgIlBvaW50cyIKICAgICAgICAgICAgICAgICJwcmltcyIgICAgICJQcmltaXRpdmVzIgogICAgICAgICAgICB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgImNsYXNzIgogICAgICAgICAgICBsYWJlbCAgICJSdW4gT3ZlciIKICAgICAgICAgICAgdHlwZSAgICBvcmRpbmFsCiAgICAgICAgICAgIGRlZmF1bHQgeyAicG9pbnQiIH0KICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAiZGV0YWlsIiAgICAiRGV0YWlsIChvbmx5IG9uY2UpIgogICAgICAgICAgICAgICAgInByaW1pdGl2ZSIgIlByaW1pdGl2ZXMiCiAgICAgICAgICAgICAgICAicG9pbnQiICAgICAiUG9pbnRzIgogICAgICAgICAgICAgICAgInZlcnRleCIgICAgIlZlcnRpY2VzIgogICAgICAgICAgICAgICAgIm51bWJlciIgICAgIk51bWJlcnMiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAidmV4X251bWNvdW50IgogICAgICAgICAgICBsYWJlbCAgICJOdW1iZXIgQ291bnQiCiAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICBkZWZhdWx0IHsgIjEwIiB9CiAgICAgICAgICAgIGhpZGV3aGVuICJ7IGNsYXNzICE9IG51bWJlciB9IgogICAgICAgICAgICByYW5nZSAgIHsgMCEgMTAwMDAgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInZleF90aHJlYWRqb2JzaXplIgogICAgICAgICAgICBsYWJlbCAgICJUaHJlYWQgSm9iIFNpemUiCiAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICBkZWZhdWx0IHsgIjEwMjQiIH0KICAgICAgICAgICAgaGlkZXdoZW4gInsgY2xhc3MgIT0gbnVtYmVyIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAxISAxMDAwMCB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAic25pcHBldCIKICAgICAgICAgICAgbGFiZWwgICAiVkVYcHJlc3Npb24iCiAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgIG1lbnVyZXBsYWNlIHsKICAgICAgICAgICAgICAgIFsgImltcG9ydCB2ZXhwcmVzc2lvbm1lbnUiIF0KICAgICAgICAgICAgICAgIFsgIiIgXQogICAgICAgICAgICAgICAgWyAicmV0dXJuIHZleHByZXNzaW9ubWVudS5idWlsZFNuaXBwZXRNZW51KCdhdHRyaWJ3cmFuZ2xlL3NuaXBwZXQnKSIgXQogICAgICAgICAgICAgICAgbGFuZ3VhZ2UgcHl0aG9uCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgIGV4cG9ydCAgYWxsCiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICBwYXJtdGFnIHsgImVkaXRvciIgIjEiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJlZGl0b3JsYW5nIiAiVkVYIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiZWRpdG9ybGluZXMiICI4LTMwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2FjdGlvbiIgImltcG9ydCB2ZXhwcmVzc2lvbm1lbnVcblxubm9kZSA9IGt3YXJnc1snbm9kZSddXG5wYXJtbmFtZSA9ICdzbmlwcGV0J1xuXG52ZXhwcmVzc2lvbm1lbnUuY3JlYXRlU3BhcmVQYXJtc0Zyb21DaENhbGxzKG5vZGUsIHBhcm1uYW1lKSIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9hY3Rpb25faGVscCIgIkNyZWF0ZXMgc3BhcmUgcGFyYW1ldGVycyBmb3IgZWFjaCB1bmlxdWUgY2FsbCBvZiBjaCgpICIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9hY3Rpb25faWNvbiIgIkJVVFRPTlNfY3JlYXRlX3Bhcm1fZnJvbV9jaCIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAiZXhwb3J0bGlzdCIKICAgICAgICAgICAgbGFiZWwgICAiQXR0cmlidXRlcyB0byBDcmVhdGUiCiAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgIGRlZmF1bHQgeyAiKiIgfQogICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJ2ZXhfc3RyaWN0IgogICAgICAgICAgICBsYWJlbCAgICJFbmZvcmNlIFByb3RvdHlwZXMiCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2siICIiIH0KICAgICAgICB9CiAgICB9CgogICAgZ3JvdXAgewogICAgICAgIG5hbWUgICAgImZvbGRlcjBfMSIKICAgICAgICBsYWJlbCAgICJCaW5kaW5ncyIKCiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgImF1dG9iaW5kIgogICAgICAgICAgICBsYWJlbCAgICJBdXRvYmluZCBieSBOYW1lIgogICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICBkZWZhdWx0IHsgIm9uIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICB9CiAgICAgICAgbXVsdGlwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAiYmluZGluZ3MiCiAgICAgICAgICAgIGxhYmVsICAgICJOdW1iZXIgb2YgQmluZGluZ3MiCiAgICAgICAgICAgIGRlZmF1bHQgMAogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJtdWx0aXN0YXJ0b2Zmc2V0IiAiMSIgfQoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiaW5kbmFtZSMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJBdHRyaWJ1dGUgTmFtZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiaW5kcGFybSMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJWRVggUGFyYW1ldGVyIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgImdyb3VwYXV0b2JpbmQiCiAgICAgICAgICAgIGxhYmVsICAgIkF1dG9iaW5kIEdyb3VwcyBieSBOYW1lIgogICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICBkZWZhdWx0IHsgIm9uIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICB9CiAgICAgICAgbXVsdGlwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAiZ3JvdXBiaW5kaW5ncyIKICAgICAgICAgICAgbGFiZWwgICAgIkdyb3VwIEJpbmRpbmdzIgogICAgICAgICAgICBkZWZhdWx0IDAKICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAibXVsdGlzdGFydG9mZnNldCIgIjEiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmluZGdyb3VwbmFtZSMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJHcm91cCBOYW1lIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJpbmRncm91cHBhcm0jIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVkVYIFBhcmFtZXRlciIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJ2ZXhfY3dkcGF0aCIKICAgICAgICAgICAgbGFiZWwgICAiRXZhbHVhdGlvbiBOb2RlIFBhdGgiCiAgICAgICAgICAgIHR5cGUgICAgb3BwYXRoCiAgICAgICAgICAgIGRlZmF1bHQgeyAiLiIgfQogICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAib3ByZWxhdGl2ZSIgIi4iIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInZleF9vdXRwdXRtYXNrIgogICAgICAgICAgICBsYWJlbCAgICJFeHBvcnQgUGFyYW1ldGVycyIKICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgZGVmYXVsdCB7ICIqIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInZleF91cGRhdGVubWxzIgogICAgICAgICAgICBsYWJlbCAgICJVcGRhdGUgTm9ybWFscyBJZiBEaXNwbGFjZWQiCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2siICIiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInZleF9tYXRjaGF0dHJpYiIKICAgICAgICAgICAgbGFiZWwgICAiQXR0cmlidXRlIHRvIE1hdGNoIgogICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICBkZWZhdWx0IHsgImlkIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInZleF9pbnBsYWNlIgogICAgICAgICAgICBsYWJlbCAgICJDb21wdXRlIFJlc3VsdHMgSW4gUGxhY2UiCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInZleF9zZWxlY3Rpb25ncm91cCIKICAgICAgICAgICAgbGFiZWwgICAiT3V0cHV0IFNlbGVjdGlvbiBHcm91cCIKICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJ2ZXhfcHJlY2lzaW9uIgogICAgICAgICAgICBsYWJlbCAgICJWRVggUHJlY2lzaW9uIgogICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICBkZWZhdWx0IHsgImF1dG8iIH0KICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAiYXV0byIgICJBdXRvIgogICAgICAgICAgICAgICAgIjMyIiAgICAiMzItYml0IgogICAgICAgICAgICAgICAgIjY0IiAgICAiNjQtYml0IgogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIH0KICAgIH0KCn0KSU5EWAAAAAAAAAAAAAAAAgAAAAhDb250ZW50cwAAAAAAAABXaGdHyAAAAAxEaWFsb2dTY3JpcHQAAABXAAAL0WcziVMwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0MzcxMDAwMDAxMzAwMDAwMDAwMDAwVFJBSUxFUiEhIQAjIERpYWxvZyBzY3JpcHQgZm9yIGNvbnZlcnRsaW5lIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkCgp7CiAgICBuYW1lCWNvbnZlcnRsaW5lCiAgICBzY3JpcHQJY29udmVydGxpbmUKICAgIGxhYmVsCSJDb252ZXJ0IExpbmUiCgogICAgaGVscCB7CgkiIgogICAgfQoKICAgIGlucHV0bGFiZWwJMQkiR2VvbWV0cnkgdG8gQ29udmVydCIKICAgIGlucHV0bGFiZWwJMgkiU3ViLU5ldHdvcmsgSW5wdXQgIzIiCiAgICBpbnB1dGxhYmVsCTMJIlN1Yi1OZXR3b3JrIElucHV0ICMzIgogICAgaW5wdXRsYWJlbAk0CSJTdWItTmV0d29yayBJbnB1dCAjNCIKCiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJncm91cCIKICAgICAgICBsYWJlbCAgICJHcm91cCIKICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgbWVudXRvZ2dsZSB7CiAgICAgICAgICAgIFsgIm9wbWVudSAtbCAtYSBncm91cDEgYmFzZWdyb3VwIiBdCiAgICAgICAgfQogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2FjdGlvbiIgImltcG9ydCBzb3B1dGlsc1xua3dhcmdzWydnZW9tZXRyeXR5cGUnXSA9IChob3UuZ2VvbWV0cnlUeXBlLlByaW1pdGl2ZXMsIGhvdS5nZW9tZXRyeVR5cGUuRWRnZXMpXG5rd2FyZ3NbJ2lucHV0aW5kZXgnXSA9IDBcbnNvcHV0aWxzLnNlbGVjdEdyb3VwUGFybShrd2FyZ3MpIiB9CiAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfYWN0aW9uX2hlbHAiICJTZWxlY3QgZWRnZXMgZnJvbSBhbiBhdmFpbGFibGUgdmlld3BvcnQgYW5kIHByZXNzIEVudGVyIHRvIGNvbXBsZXRlLiIgfQogICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2FjdGlvbl9pY29uIiAiQlVUVE9OU19yZXNlbGVjdCIgfQogICAgICAgIGJpbmRzZWxlY3RvciBwcmltc19lZGdlcyAiQ29udmVydCBFZGdlcyIKICAgICAgICAgICAgIlNlbGVjdCBlZGdlcyBmcm9tIGFuIGF2YWlsYWJsZSB2aWV3cG9ydCBhbmQgcHJlc3MgRW50ZXIgdG8gY29tcGxldGUuIgogICAgICAgICAgICAwIDEgMHhmZmZmZmZmZiAwICIiIDAKICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInNlcHBhcm0yIgogICAgICAgIGxhYmVsICAgIlNwYWNlciIKICAgICAgICB0eXBlICAgIHNlcGFyYXRvcgogICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaWRlZng6OmxheW91dF9oZWlnaHQiICJzbWFsbCIgfQogICAgICAgIHBhcm10YWcgeyAic2lkZWZ4Ojpsb29rIiAiYmxhbmsiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImtlZXBvcmRlciIKICAgICAgICBsYWJlbCAgICJLZWVwIEdyb3VwIE9yZGVyIgogICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgZGVmYXVsdCB7ICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImNvbm5lY3RwYXRoIgogICAgICAgIGxhYmVsICAgIkNvbm5lY3QgUGF0aCIKICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwISAxISB9CiAgICAgICAgZXhwb3J0ICBhbGwKICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiY2xvc2Vsb29wcyIKICAgICAgICBsYWJlbCAgICJNYWtlIElzb2xhdGVkIExvb3BzIENsb3NlZCIKICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgZGlzYWJsZXdoZW4gInsgY29ubmVjdHBhdGggIT0gMSB9IgogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIGV4cG9ydCAgYWxsCiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInJlbW92ZSIKICAgICAgICBsYWJlbCAgICJSZW1vdmUgVW51c2VkIFBvaW50cyIKICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInNlcHBhcm0iCiAgICAgICAgbGFiZWwgICAiU3BhY2VyIgogICAgICAgIHR5cGUgICAgc2VwYXJhdG9yCiAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICBwYXJtdGFnIHsgInNpZGVmeDo6bGF5b3V0X2hlaWdodCIgInNtYWxsIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaWRlZng6Omxvb2siICJibGFuayIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiY29tcHV0ZWxlbmd0aCIKICAgICAgICBsYWJlbCAgICJDb21wdXRlIExlbmd0aCIKICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgIG5vbGFiZWwKICAgICAgICBqb2lubmV4dAogICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAibGVuZ3RobmFtZSIKICAgICAgICBsYWJlbCAgICJDb21wdXRlIExlbmd0aCIKICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgIGRlZmF1bHQgeyAicmVzdGxlbmd0aCIgfQogICAgICAgIGRpc2FibGV3aGVuICJ7IGNvbXB1dGVsZW5ndGggPT0gMCB9IgogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrIiAiIiB9CiAgICB9Cn0KSU5EWAAAAAAAAAAAAAAAAQAAAAxEaWFsb2dTY3JpcHQAAAAAAABOvmfJL/8jIERpYWxvZyBzY3JpcHQgZm9yIGxvY2Fsc2NoZWR1bGVyIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkCgp7CiAgICBuYW1lCWxvY2Fsc2NoZWR1bGVyCiAgICBzY3JpcHQJbG9jYWxzY2hlZHVsZXIKICAgIGxhYmVsCSJMb2NhbCBTY2hlZHVsZXIiCgogICAgaGVscCB7CgkiIgogICAgfQoKICAgIGdyb3VwIHsKICAgICAgICBuYW1lICAgICJmb2xkZXIwIgogICAgICAgIGxhYmVsICAgIlNjaGVkdWxlciIKCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXI1IgogICAgICAgICAgICBsYWJlbCAgICJTY2hlZHVsaW5nIgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJtYXhwcm9jc21lbnUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUb3RhbCBTbG90cyIKICAgICAgICAgICAgICAgIHR5cGUgICAgb3JkaW5hbAogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgbWVudSB1c2V0b2tlbnZhbHVlIHsKICAgICAgICAgICAgICAgICAgICAiMCIgICAgICJFcXVhbCB0byAxLzQgb2YgVG90YWwgQ1BVIENvdW50IgogICAgICAgICAgICAgICAgICAgICItMSIgICAgIkVxdWFsIHRvIENQVSBDb3VudCBMZXNzIE9uZSIKICAgICAgICAgICAgICAgICAgICAiMSIgICAgICJDdXN0b20gU2xvdCBDb3VudCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgIm1heHByb2NzIgogICAgICAgICAgICAgICAgbGFiZWwgICAibWF4cHJvY3MiCiAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgbWF4cHJvY3NtZW51ICE9IDEgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAtNCAxMjggfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJwZGdfdXNlbWF4dGFza3MiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgTGltaXQgSm9icyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicGRnX21heHRhc2tzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiTGltaXQgSm9icyIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBwZGdfdXNlbWF4dGFza3MgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInZlcmJvc2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJWZXJib3NlIExvZ2dpbmciCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicGRnX3dhaXRmb3JmYWlsdXJlcyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkJsb2NrIG9uIEZhaWxlZCBXb3JrIEl0ZW1zIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXI0IgogICAgICAgICAgICBsYWJlbCAgICJQYXRocyIKCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicGRnX3dvcmtpbmdkaXIiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXb3JraW5nIERpcmVjdG9yeSIKICAgICAgICAgICAgICAgIHR5cGUgICAgZGlyZWN0b3J5CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiRISVAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInVzZWxvZ2ZpbGVuYW1lIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIExvZyBGaWxlIE5hbWUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgbm9sYWJlbAogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImxvZ2ZpbGVuYW1lIgogICAgICAgICAgICAgICAgbGFiZWwgICAiTG9nIEZpbGUgTmFtZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImBAcGRnX25hbWVgLmxvZyIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgdXNlbG9nZmlsZW5hbWUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImh5dGhvbmJpbiIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkh5dGhvbiIKICAgICAgICAgICAgICAgIHR5cGUgICAgb3JkaW5hbAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIkRlZmF1bHQiCiAgICAgICAgICAgICAgICAgICAgIjEiICJDdXN0b20iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiaHl0aG9uYmluY3VzdG9tdW5pdmVyc2FsIgogICAgICAgICAgICAgICAgbGFiZWwgICAiSHl0aG9uIEV4ZWN1dGFibGUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZpbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBoeXRob25iaW4gIT0gMSB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInBkZ193b3JraXRlbWRhdGFzb3VyY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJMb2FkIEl0ZW0gRGF0YSBGcm9tIgogICAgICAgICAgICAgICAgdHlwZSAgICBvcmRpbmFsCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICIwIiAiVGVtcG9yYXJ5IEpTT04gRmlsZSIKICAgICAgICAgICAgICAgICAgICAiMSIgIlJQQyBNZXNzYWdlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInBkZ19jb21wcmVzc3dvcmtpdGVtZGF0YSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkNvbXByZXNzIFdvcmsgSXRlbSBEYXRhIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcGRnX3dvcmtpdGVtZGF0YXNvdXJjZSA9PSAxIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicGRnX3ZhbGlkYXRlb3V0cHV0cyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlZhbGlkYXRlIE91dHB1dHMgV2hlbiBSZWNvb2tpbmciCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicGRnX2NoZWNrZXhwZWN0ZWRvdXRwdXRzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiQ2hlY2sgRXhwZWN0ZWQgT3V0cHV0cyBvbiBEaXNrIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNlcHBhcm0yIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU2VwYXJhdG9yIgogICAgICAgICAgICAgICAgdHlwZSAgICBzZXBhcmF0b3IKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJwZGdfbWFwbW9kZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlBhdGggTWFwcGluZyIKICAgICAgICAgICAgICAgIHR5cGUgICAgb3JkaW5hbAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIkdsb2JhbCIKICAgICAgICAgICAgICAgICAgICAiMSIgIk5vbmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicGRnX3VzZW1hcHpvbmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJVc2UgUGF0aCBNYXAgWm9uZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBwZGdfbWFwbW9kZSA9PSAxIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicGRnX21hcHpvbmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJQYXRoIE1hcCBab25lIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiJFBER19QQVRITUFQX1pPTkUiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHBkZ191c2VtYXB6b25lID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnVyZXBsYWNlIHsKICAgICAgICAgICAgICAgICAgICAiUE9TSVgiICJQT1NJWCIKICAgICAgICAgICAgICAgICAgICAiV0lOIiAgICJXSU4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjEiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZW1wIERpcmVjdG9yeSIKCiAgICAgICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgICAgICBuYW1lICAgICJ0ZW1wZGlybWVudSIKICAgICAgICAgICAgICAgICAgICBsYWJlbCAgICJMb2NhdGlvbiIKICAgICAgICAgICAgICAgICAgICB0eXBlICAgIG9yZGluYWwKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAgICAgIjAiICJXb3JraW5nIERpcmVjdG9yeSIKICAgICAgICAgICAgICAgICAgICAgICAgIjEiICJIb3VkaW5pIFRlbXAiCiAgICAgICAgICAgICAgICAgICAgICAgICIyIiAiQ3VzdG9tIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgICAgIG5hbWUgICAgInRlbXBkaXJhcHBlbmRwaWQiCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiQXBwZW5kIFBJRCIKICAgICAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAidGVtcGRpcmN1c3RvbSIKICAgICAgICAgICAgICAgICAgICBsYWJlbCAgICJDdXN0b20iCiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICBkaXJlY3RvcnkKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiRIT1VESU5JX1RFTVBfRElSLyRISVBOQU1FL3BkZ3RlbXAiIH0KICAgICAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyB0ZW1wZGlybWVudSAhPSAyIH0iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgICAgICBuYW1lICAgICJwZGdfZGVsZXRldGVtcGRpciIKICAgICAgICAgICAgICAgICAgICBsYWJlbCAgICJEZWxldGUgVGVtcCBEaXIiCiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICBvcmRpbmFsCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgICAgICIwIiAiTmV2ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICIxIiAiV2hlbiBTY2hlZHVsZXIgaXMgRGVsZXRlZCIKICAgICAgICAgICAgICAgICAgICAgICAgIjIiICJXaGVuIENvb2sgQ29tcGxldGVzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgIH0KCiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInNvY2tldGNhbGxiYWNrcyIKICAgICAgICAgICAgbGFiZWwgICAiVXNlIFNvY2tldCBjYWxsYmFja3MgaW5zdGVhZCBvZiBzdGRvdXQgdG9rZW5zIgogICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgaW52aXNpYmxlCiAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgfQogICAgfQoKICAgIGdyb3VwIHsKICAgICAgICBuYW1lICAgICJmb2xkZXIwXzEiCiAgICAgICAgbGFiZWwgICAiUlBDIFNlcnZlciIKCiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInBkZ19ycGNpZ25vcmVlcnJvcnMiCiAgICAgICAgICAgIGxhYmVsICAgIklnbm9yZSBSUEMgRXJyb3JzIgogICAgICAgICAgICB0eXBlICAgIG9yZGluYWwKICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgIjAiICJOZXZlciIKICAgICAgICAgICAgICAgICIxIiAiV2hlbiBDb29raW5nIEJhdGNoZXMiCiAgICAgICAgICAgICAgICAiMiIgIkFsd2F5cyIKICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAicGRnX3JwY21heGVycm9ycyIKICAgICAgICAgICAgbGFiZWwgICAiTWF4IFJQQyBFcnJvcnMiCiAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICBkZWZhdWx0IHsgIjUiIH0KICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAicGRnX3JwY3RpbWVvdXQiCiAgICAgICAgICAgIGxhYmVsICAgIkNvbm5lY3Rpb24gVGltZW91dCIKICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgIGRlZmF1bHQgeyAiNCIgfQogICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJwZGdfcnBjcmV0cmllcyIKICAgICAgICAgICAgbGFiZWwgICAiQ29ubmVjdGlvbiBSZXRyaWVzIgogICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgZGVmYXVsdCB7ICIyIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInBkZ19ycGNiYWNrb2ZmIgogICAgICAgICAgICBsYWJlbCAgICJSZXRyeSBCYWNrb2ZmIgogICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgZGVmYXVsdCB7ICIyIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInBkZ19ycGNiYXRjaCIKICAgICAgICAgICAgbGFiZWwgICAiQmF0Y2ggUG9sbCBSYXRlIgogICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJwZGdfcnBjcmVsZWFzZSIKICAgICAgICAgICAgbGFiZWwgICAiUmVsZWFzZSBKb2IgU2xvdCBXaGVuIFBvbGxpbmciCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgIH0KICAgIH0KCiAgICBncm91cCB7CiAgICAgICAgbmFtZSAgICAiZm9sZGVyMF8yIgogICAgICAgIGxhYmVsICAgIkpvYiBQYXJtcyIKCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIwXzMiCiAgICAgICAgICAgIGxhYmVsICAgIlNjaGVkdWxpbmciCiAgICAgICAgICAgIGdyb3VwdGFnIHsgInNpZGVmeDo6c3dpdGNoZXIiICJmb2xkZXIwXzIiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfc2luZ2xlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU2luZ2xlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwZGc6OnNjaGVkdWxlciIgIiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfaXNfQ1BVX251bWJlcl9zZXQiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJsb2NhbF9pc19DUFVfbnVtYmVyX3NldCIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGRnOjpzY2hlZHVsZXIiICIiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX0NQVXNfdG9fdXNlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU2xvdHMgUGVyIFdvcmsgSXRlbSIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBsb2NhbF9pc19DUFVfbnVtYmVyX3NldCA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMSEgNjQgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwZGc6OnNjaGVkdWxlciIgIiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjYiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJNaW5pbXVtIEF2YWlsYWJsZSBNZW1vcnkiCgogICAgICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfdXNlbWluZnJlZW1lbSIKICAgICAgICAgICAgICAgICAgICBsYWJlbCAgICJSdWxlIgogICAgICAgICAgICAgICAgICAgIHR5cGUgICAgb3JkaW5hbAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICAgICAiMCIgIk5vIE1pbmltdW0iCiAgICAgICAgICAgICAgICAgICAgICAgICIxIiAiTUIgQXZhaWxhYmxlIgogICAgICAgICAgICAgICAgICAgICAgICAiMiIgIlBlcmNlbnQgQXZhaWxhYmxlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBkZzo6c2NoZWR1bGVyIiAiIiB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX21pbmZyZWVtZW0iCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiTWluaW11bSBNQiIKICAgICAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgbG9jYWxfdXNlbWluZnJlZW1lbSAhPSAxIH0iCiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTI4MDAwIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBkZzo6c2NoZWR1bGVyIiAiIiB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX21pbmZyZWVtZW1wY3QiCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiTWluaW11bSBQZXJjZW50IgogICAgICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBsb2NhbF91c2VtaW5mcmVlbWVtICE9IDIgfSIKICAgICAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBkZzo6c2NoZWR1bGVyIiAiIiB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICB9CgogICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyMiIKICAgICAgICAgICAgbGFiZWwgICAiVGFza3MiCgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX2VuYWJsZXRpbWVvdXQiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgTWF4aW11bSBSdW4gVGltZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfbWF4dGltZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIk1heGltdW0gUnVuIFRpbWUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGxvY2FsX2VuYWJsZXRpbWVvdXQgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX2hhbmRsZXRpbWVvdXQiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJPbiBUYXNrIFRpbWVvdXQiCiAgICAgICAgICAgICAgICB0eXBlICAgIG9yZGluYWwKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgbG9jYWxfZW5hYmxldGltZW91dCA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIk1hcmsgYXMgRmFpbGVkIgogICAgICAgICAgICAgICAgICAgICIxIiAiTWFyayBhcyBTdWNjZWVkZWQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic2VwcGFybTQiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTZXBhcmF0b3IiCiAgICAgICAgICAgICAgICB0eXBlICAgIHNlcGFyYXRvcgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX2VuYWJsZW1heG1lbW9yeSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBNYXhpbXVtIE1lbW9yeSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfbWF4bWVtb3J5IgogICAgICAgICAgICAgICAgbGFiZWwgICAiTWF4aW11bSBNZW1vcnkiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGxvY2FsX2VuYWJsZW1heG1lbW9yeSA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfaGFuZGxlbWVtb3J5IgogICAgICAgICAgICAgICAgbGFiZWwgICAiT24gTWVtb3J5IEV4Y2VlZGVkIgogICAgICAgICAgICAgICAgdHlwZSAgICBvcmRpbmFsCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGxvY2FsX2VuYWJsZW1heG1lbW9yeSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIk1hcmsgYXMgRmFpbGVkIgogICAgICAgICAgICAgICAgICAgICIxIiAiTWFyayBhcyBTdWNjZWVkZWQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic2VwcGFybTUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTZXBhcmF0b3IiCiAgICAgICAgICAgICAgICB0eXBlICAgIHNlcGFyYXRvcgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX2VjaGFuZGxlYnkiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJPbiBUYXNrIEZhaWx1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIG9yZGluYWwKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIjAiICJSZXBvcnQgRXJyb3IiCiAgICAgICAgICAgICAgICAgICAgIjEiICJSZXBvcnQgV2FybmluZyIKICAgICAgICAgICAgICAgICAgICAiMiIgIlJldHJ5IFRhc2siCiAgICAgICAgICAgICAgICAgICAgIjMiICJJZ25vcmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBkZzo6c2NoZWR1bGVyIiAiIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfZWNoYW5kbGVhbGwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJIYW5kbGUgQWxsIE5vbiBaZXJvIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwZGc6OnNjaGVkdWxlciIgIiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX2VjY3VzdG9tY29kZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkV4aXQgQ29kZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBsb2NhbF9lY2hhbmRsZWFsbCAhPSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMSAyNTUgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwZGc6OnNjaGVkdWxlciIgIiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNlcHBhcm0iCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTZXBhcmF0b3IiCiAgICAgICAgICAgICAgICB0eXBlICAgIHNlcGFyYXRvcgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX21heGltdW1yZXRyaWVzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiTWF4IFJldHJpZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMyIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgbG9jYWxfZWNoYW5kbGVieSAhPSAyIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBkZzo6c2NoZWR1bGVyIiAiIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfYWRkZmFpbGNvdW50YXR0ciIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlJldHJ5IENvdW50IEF0dHJpYnV0ZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBsb2NhbF9lY2hhbmRsZWJ5ICE9IDIgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGRnOjpzY2hlZHVsZXIiICIiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJsb2NhbF9mYWlsY291bnRhdHRyIgogICAgICAgICAgICAgICAgbGFiZWwgICAiUmV0cnkgQ291bnQgQXR0cmliIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiZmFpbHVyZWNvdW50IiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBsb2NhbF9hZGRmYWlsY291bnRhdHRyID09IDAgfSB7IGxvY2FsX2VjaGFuZGxlYnkgIT0gMiB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwZGc6OnNjaGVkdWxlciIgIiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIzIgogICAgICAgICAgICBsYWJlbCAgICJUYXNrIEVudmlyb25tZW50IgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJsb2NhbF91c2Vob3VkaW5pbWF4dGhyZWFkcyIKICAgICAgICAgICAgICAgIGxhYmVsICAgImxvY2FsX3VzZWhvdWRpbmltYXh0aHJlYWRzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGRnOjpzY2hlZHVsZXIiICIiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX2hvdWRpbmltYXh0aHJlYWRzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiSG91ZGluaSBNYXggVGhyZWFkcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBsb2NhbF91c2Vob3VkaW5pbWF4dGhyZWFkcyA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBkZzo6c2NoZWR1bGVyIiAiIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJsb2NhbF9yZXF1aXJlc3dpbmRvdyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlJlcXVpcmVzIEdVSSBXaW5kb3ciCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBkZzo6c2NoZWR1bGVyIiAiIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfc2tpcHBhY2thZ2VzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU2tpcCBMb2FkaW5nIFBhY2thZ2VzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX2VudnVuc2V0IgogICAgICAgICAgICAgICAgbGFiZWwgICAiVW5zZXQgVmFyaWFibGVzIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBkZzo6c2NoZWR1bGVyIiAiIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfZW52X2ZpbGUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbnZpcm9ubWVudCBGaWxlIgogICAgICAgICAgICAgICAgdHlwZSAgICBmaWxlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBtdWx0aXBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfZW52bXVsdGkiCiAgICAgICAgICAgICAgICBsYWJlbCAgICAiRW52aXJvbm1lbnQgVmFyaWFibGVzIgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwZGc6Om5vY29weSIgIiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2siICIiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAiaHNjcmlwdCIgfQoKICAgICAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgICAgIG5hbWUgICAgImxvY2FsX2Vudm5hbWUjIgogICAgICAgICAgICAgICAgICAgIGxhYmVsICAgIk5hbWUiCiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwZGc6OnNjaGVkdWxlciIgIiIgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAibG9jYWxfZW52dmFsdWUjIgogICAgICAgICAgICAgICAgICAgIGxhYmVsICAgIlZhbHVlIgogICAgICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBkZzo6c2NoZWR1bGVyIiAiIiB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgfQoKICAgIH0KCn0KSU5EWAAAAAAAAAAAAAAAAgAAAAhDb250ZW50cwAAAAAAAABXaGdHyAAAAAxEaWFsb2dTY3JpcHQAAABXAAJ1jmcziY4wNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0MzcxMDAwMDAxMzAwMDAwMDAwMDAwVFJBSUxFUiEhIQAjIERpYWxvZyBzY3JpcHQgZm9yIHByaW5jaXBsZWRzaGFkZXI6OjIuMCBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZAoKewogICAgbmFtZQlwcmluY2lwbGVkc2hhZGVyOjoyLjAKICAgIHNjcmlwdAlwcmluY2lwbGVkc2hhZGVyOjoyLjAKICAgIGxhYmVsCSJQcmluY2lwbGVkIFNoYWRlciIKCiAgICByZW5kZXJtYXNrCSJWTWFudHJhIE9HTCIKICAgIHNoYWRlcnR5cGUJdm9wbWF0ZXJpYWwKICAgIGlucHV0CXZlY3Rvcgl1dgkiVVYgQ29vcmRpbmF0ZXMiCiAgICBpbnB1dAl2ZWN0b3IJYmFzZWNvbG9yCSJCYXNlIENvbG9yIgogICAgaW5wdXQJZmxvYXQJYWxiZWRvbXVsdAkiQWxiZWRvIE11bHRpcGxpZXIiCiAgICBpbnB1dAlpbnQJYmFzZWNvbG9yX3VzZVBvaW50Q29sb3IJIlVzZSBQb2ludCBDb2xvciIKICAgIGlucHV0CWludAliYXNlY29sb3JfdXNlUGFja2VkQ29sb3IJIlVzZSBQYWNrZWQgQ29sb3IiCiAgICBpbnB1dAlpbnQJZnJvbnRmYWNlCSJTaGFkZSBCb3RoIFNpZGVzIEFzIEZyb250IgogICAgaW5wdXQJZmxvYXQJaW9yCUlPUgogICAgaW5wdXQJZmxvYXQJcm91Z2gJUm91Z2huZXNzCiAgICBpbnB1dAlmbG9hdAlhbmlzbwlBbmlzb3Ryb3B5CiAgICBpbnB1dAlmbG9hdAlhbmlzb2RpcgkiQW5pc290cm9weSBEaXJlY3Rpb24iCiAgICBpbnB1dAlmbG9hdAltZXRhbGxpYwlNZXRhbGxpYwogICAgaW5wdXQJZmxvYXQJcmVmbGVjdAlSZWZsZWN0aXZpdHkKICAgIGlucHV0CWZsb2F0CXJlZmxlY3R0aW50CSJSZWZsZWN0IFRpbnQiCiAgICBpbnB1dAlmbG9hdAljb2F0CUNvYXQKICAgIGlucHV0CWZsb2F0CWNvYXRyb3VnaAkiQ29hdCBSb3VnaG5lc3MiCiAgICBpbnB1dAlmbG9hdAl0cmFuc3BhcmVuY3kJVHJhbnNwYXJlbmN5CiAgICBpbnB1dAl2ZWN0b3IJdHJhbnNjb2xvcgkiVHJhbnNtaXNzaW9uIENvbG9yIgogICAgaW5wdXQJZmxvYXQJdHJhbnNkaXN0CSJBdCBEaXN0YW5jZSIKICAgIGlucHV0CWZsb2F0CWRpc3BlcnNpb24JRGlzcGVyc2lvbgogICAgaW5wdXQJaW50CXByaW9yaXR5CSJTdXJmYWNlIFByaW9yaXR5IgogICAgaW5wdXQJZmxvYXQJc3NzCVN1YnN1cmZhY2UKICAgIGlucHV0CXN0cmluZwlzc3Ntb2RlbAkiU1NTIE1vZGUiCiAgICBpbnB1dAlmbG9hdAlzc3NkaXN0CSJTdWJzdXJmYWNlIERpc3RhbmNlIgogICAgaW5wdXQJdmVjdG9yCXNzc2NvbG9yCSJTdWJzdXJmYWNlIENvbG9yIgogICAgaW5wdXQJZmxvYXQJc3NzcGhhc2UJIlNjYXR0ZXJpbmcgUGhhc2UiCiAgICBpbnB1dAlmbG9hdAlzaGVlbglTaGVlbgogICAgaW5wdXQJZmxvYXQJc2hlZW50aW50CSJTaGVlbiBUaW50IgogICAgaW5wdXQJdmVjdG9yCWVtaXRjb2xvcgkiRW1pc3Npb24gQ29sb3IiCiAgICBpbnB1dAlmbG9hdAllbWl0aW50CSJFbWlzc2lvbiBJbnRlbnNpdHkiCiAgICBpbnB1dAlpbnQJZW1pdGlsbHVtCSJFbWlzc2lvbiBJbGx1bWluYXRlcyBPYmplY3RzIgogICAgaW5wdXQJZmxvYXQJb3BhYwkiT3BhY2l0eSBTY2FsZSIKICAgIGlucHV0CXZlY3RvcglvcGFjY29sb3IJIk9wYWNpdHkgQ29sb3IiCiAgICBpbnB1dAlpbnQJZmFrZWNhdXN0aWNzZW5hYmxlZAlFbmFibGUKICAgIGlucHV0CWZsb2F0CWZha2VjYXVzdGljc3RyYW5zbWl0CSJUcmFuc21pc3Npb24gVGludCIKICAgIGlucHV0CWZsb2F0CWZha2VjYXVzdGljc3NoYWRvdwkiU2hhZG93IENvbnRvdXIiCiAgICBpbnB1dAlmbG9hdAlmYWtlY2F1c3RpY3NvcGFjaXR5CSJTaGFkb3cgT3BhY2l0eSIKICAgIGlucHV0CWludAliYXNlY29sb3JfdXNlVGV4dHVyZQkiVXNlIFRleHR1cmUiCiAgICBpbnB1dAlzdHJpbmcJYmFzZWNvbG9yX3RleHR1cmUJVGV4dHVyZQogICAgaW5wdXQJZmxvYXQJYmFzZWNvbG9yX3RleHR1cmVJbnRlbnNpdHkJIlRpbnQgSW50ZW5zaXR5IgogICAgaW5wdXQJc3RyaW5nCWJhc2Vjb2xvcl90ZXh0dXJlV3JhcAlXcmFwCiAgICBpbnB1dAlzdHJpbmcJYmFzZWNvbG9yX3RleHR1cmVDb2xvclNwYWNlCSJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICBpbnB1dAlpbnQJbWV0YWxsaWNfdXNlVGV4dHVyZQkiVXNlIFRleHR1cmUiCiAgICBpbnB1dAlzdHJpbmcJbWV0YWxsaWNfdGV4dHVyZQlUZXh0dXJlCiAgICBpbnB1dAlpbnQJbWV0YWxsaWNfbW9ub0NoYW5uZWwJQ2hhbm5lbAogICAgaW5wdXQJc3RyaW5nCW1ldGFsbGljX3RleHR1cmVXcmFwCVdyYXAKICAgIGlucHV0CXN0cmluZwltZXRhbGxpY190ZXh0dXJlQ29sb3JTcGFjZQkiU291cmNlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJaW50CXRyYW5zcGFyZW5jeV91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwl0cmFuc3BhcmVuY3lfdGV4dHVyZQlUZXh0dXJlCiAgICBpbnB1dAlpbnQJdHJhbnNwYXJlbmN5X21vbm9DaGFubmVsCUNoYW5uZWwKICAgIGlucHV0CXN0cmluZwl0cmFuc3BhcmVuY3lfdGV4dHVyZVdyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCXRyYW5zcGFyZW5jeV90ZXh0dXJlQ29sb3JTcGFjZQkiU291cmNlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJaW50CWlvcl91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwlpb3JfdGV4dHVyZQlUZXh0dXJlCiAgICBpbnB1dAlpbnQJaW9yX21vbm9DaGFubmVsCUNoYW5uZWwKICAgIGlucHV0CXN0cmluZwlpb3JfdGV4dHVyZVdyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCWlvcl90ZXh0dXJlQ29sb3JTcGFjZQkiU291cmNlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJaW50CXRyYW5zY29sb3JfdXNlVGV4dHVyZQkiVXNlIFRleHR1cmUiCiAgICBpbnB1dAlzdHJpbmcJdHJhbnNjb2xvcl90ZXh0dXJlCVRleHR1cmUKICAgIGlucHV0CWZsb2F0CXRyYW5zY29sb3JfdGV4dHVyZUludGVuc2l0eQkiVGludCBJbnRlbnNpdHkiCiAgICBpbnB1dAlzdHJpbmcJdHJhbnNjb2xvcl90ZXh0dXJlV3JhcAlXcmFwCiAgICBpbnB1dAlzdHJpbmcJdHJhbnNjb2xvcl90ZXh0dXJlQ29sb3JTcGFjZQkiU291cmNlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJaW50CXRyYW5zZGlzdF91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwl0cmFuc2Rpc3RfdGV4dHVyZQlUZXh0dXJlCiAgICBpbnB1dAlpbnQJdHJhbnNkaXN0X21vbm9DaGFubmVsCUNoYW5uZWwKICAgIGlucHV0CXN0cmluZwl0cmFuc2Rpc3RfdGV4dHVyZVdyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCXRyYW5zZGlzdF90ZXh0dXJlQ29sb3JTcGFjZQkiU291cmNlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJaW50CWRpc3BlcnNpb25fdXNlVGV4dHVyZQkiVXNlIFRleHR1cmUiCiAgICBpbnB1dAlzdHJpbmcJZGlzcGVyc2lvbl90ZXh0dXJlCVRleHR1cmUKICAgIGlucHV0CWludAlkaXNwZXJzaW9uX21vbm9DaGFubmVsCUNoYW5uZWwKICAgIGlucHV0CXN0cmluZwlkaXNwZXJzaW9uX3RleHR1cmVXcmFwCVdyYXAKICAgIGlucHV0CXN0cmluZwlkaXNwZXJzaW9uX3RleHR1cmVDb2xvclNwYWNlCSJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICBpbnB1dAlpbnQJcmVmbGVjdF91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwlyZWZsZWN0X3RleHR1cmUJVGV4dHVyZQogICAgaW5wdXQJaW50CXJlZmxlY3RfbW9ub0NoYW5uZWwJQ2hhbm5lbAogICAgaW5wdXQJc3RyaW5nCXJlZmxlY3RfdGV4dHVyZVdyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCXJlZmxlY3RfdGV4dHVyZUNvbG9yU3BhY2UJIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgIGlucHV0CWludAlyZWZsZWN0dGludF91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwlyZWZsZWN0dGludF90ZXh0dXJlCVRleHR1cmUKICAgIGlucHV0CWludAlyZWZsZWN0dGludF9tb25vQ2hhbm5lbAlDaGFubmVsCiAgICBpbnB1dAlzdHJpbmcJcmVmbGVjdHRpbnRfdGV4dHVyZVdyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCXJlZmxlY3R0aW50X3RleHR1cmVDb2xvclNwYWNlCSJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICBpbnB1dAlpbnQJcm91Z2hfdXNlVGV4dHVyZQkiVXNlIFRleHR1cmUiCiAgICBpbnB1dAlzdHJpbmcJcm91Z2hfdGV4dHVyZQlUZXh0dXJlCiAgICBpbnB1dAlpbnQJcm91Z2hfbW9ub0NoYW5uZWwJQ2hhbm5lbAogICAgaW5wdXQJc3RyaW5nCXJvdWdoX3RleHR1cmVXcmFwCVdyYXAKICAgIGlucHV0CXN0cmluZwlyb3VnaF90ZXh0dXJlQ29sb3JTcGFjZQkiU291cmNlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJaW50CWFuaXNvX3VzZVRleHR1cmUJIlVzZSBUZXh0dXJlIgogICAgaW5wdXQJc3RyaW5nCWFuaXNvX3RleHR1cmUJVGV4dHVyZQogICAgaW5wdXQJaW50CWFuaXNvX21vbm9DaGFubmVsCUNoYW5uZWwKICAgIGlucHV0CXN0cmluZwlhbmlzb190ZXh0dXJlV3JhcAlXcmFwCiAgICBpbnB1dAlzdHJpbmcJYW5pc29fdGV4dHVyZUNvbG9yU3BhY2UJIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgIGlucHV0CWludAlhbmlzb2Rpcl91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwlhbmlzb2Rpcl90ZXh0dXJlCVRleHR1cmUKICAgIGlucHV0CWludAlhbmlzb2Rpcl9tb25vQ2hhbm5lbAlDaGFubmVsCiAgICBpbnB1dAlzdHJpbmcJYW5pc29kaXJfdGV4dHVyZVdyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCWFuaXNvZGlyX3RleHR1cmVDb2xvclNwYWNlCSJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICBpbnB1dAlzdHJpbmcJYW5pc29kaXJfdGV4dHVyZUZpbHRlcgkiRmlsdGVyIFR5cGUiCiAgICBpbnB1dAlpbnQJc3NzX3VzZVRleHR1cmUJIlVzZSBUZXh0dXJlIgogICAgaW5wdXQJc3RyaW5nCXNzc190ZXh0dXJlCVRleHR1cmUKICAgIGlucHV0CWludAlzc3NfbW9ub0NoYW5uZWwJQ2hhbm5lbAogICAgaW5wdXQJc3RyaW5nCXNzc190ZXh0dXJlV3JhcAlXcmFwCiAgICBpbnB1dAlzdHJpbmcJc3NzX3RleHR1cmVDb2xvclNwYWNlCSJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICBpbnB1dAlpbnQJc3NzZGlzdF91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwlzc3NkaXN0X3RleHR1cmUJVGV4dHVyZQogICAgaW5wdXQJaW50CXNzc2Rpc3RfbW9ub0NoYW5uZWwJQ2hhbm5lbAogICAgaW5wdXQJc3RyaW5nCXNzc2Rpc3RfdGV4dHVyZVdyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCXNzc2Rpc3RfdGV4dHVyZUNvbG9yU3BhY2UJIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgIGlucHV0CWludAlzc3Njb2xvcl91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwlzc3Njb2xvcl90ZXh0dXJlCVRleHR1cmUKICAgIGlucHV0CXN0cmluZwlzc3Njb2xvcl90ZXh0dXJlV3JhcAlXcmFwCiAgICBpbnB1dAlzdHJpbmcJc3NzY29sb3JfdGV4dHVyZUNvbG9yU3BhY2UJIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgIGlucHV0CWludAlzaGVlbl91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwlzaGVlbl90ZXh0dXJlCVRleHR1cmUKICAgIGlucHV0CWludAlzaGVlbl9tb25vQ2hhbm5lbAlDaGFubmVsCiAgICBpbnB1dAlzdHJpbmcJc2hlZW5fdGV4dHVyZVdyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCXNoZWVuX3RleHR1cmVDb2xvclNwYWNlCSJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICBpbnB1dAlpbnQJc2hlZW50aW50X3VzZVRleHR1cmUJIlVzZSBUZXh0dXJlIgogICAgaW5wdXQJc3RyaW5nCXNoZWVudGludF90ZXh0dXJlCU1hcAogICAgaW5wdXQJaW50CXNoZWVudGludF9tb25vQ2hhbm5lbAlDaGFubmVsCiAgICBpbnB1dAlzdHJpbmcJc2hlZW50aW50X3RleHR1cmVXcmFwCVdyYXAKICAgIGlucHV0CXN0cmluZwlzaGVlbnRpbnRfdGV4dHVyZUNvbG9yU3BhY2UJIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgIGlucHV0CWludAljb2F0X3VzZVRleHR1cmUJIlVzZSBUZXh0dXJlIgogICAgaW5wdXQJc3RyaW5nCWNvYXRfdGV4dHVyZQlUZXh0dXJlCiAgICBpbnB1dAlpbnQJY29hdF9tb25vQ2hhbm5lbAlDaGFubmVsCiAgICBpbnB1dAlzdHJpbmcJY29hdF90ZXh0dXJlV3JhcAlXcmFwCiAgICBpbnB1dAlzdHJpbmcJY29hdF90ZXh0dXJlQ29sb3JTcGFjZQkiU291cmNlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJaW50CWNvYXRyb3VnaF91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwljb2F0cm91Z2hfdGV4dHVyZQlUZXh0dXJlCiAgICBpbnB1dAlpbnQJY29hdHJvdWdoX21vbm9DaGFubmVsCUNoYW5uZWwKICAgIGlucHV0CXN0cmluZwljb2F0cm91Z2hfdGV4dHVyZVdyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCWNvYXRyb3VnaF90ZXh0dXJlQ29sb3JTcGFjZQkiU291cmNlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJaW50CWVtaXRjb2xvcl91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwllbWl0Y29sb3JfdGV4dHVyZQlUZXh0dXJlCiAgICBpbnB1dAlmbG9hdAllbWl0Y29sb3JfdGV4dHVyZUludGVuc2l0eQkiVGludCBJbnRlbnNpdHkiCiAgICBpbnB1dAlzdHJpbmcJZW1pdGNvbG9yX3RleHR1cmVXcmFwCVdyYXAKICAgIGlucHV0CXN0cmluZwllbWl0Y29sb3JfdGV4dHVyZUNvbG9yU3BhY2UJIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgIGlucHV0CWludAlvcGFjY29sb3JfdXNlVGV4dHVyZQkiVXNlIFRleHR1cmUiCiAgICBpbnB1dAlzdHJpbmcJb3BhY2NvbG9yX3RleHR1cmUJVGV4dHVyZQogICAgaW5wdXQJc3RyaW5nCW9wYWNjb2xvcl90ZXh0dXJlV3JhcAlXcmFwCiAgICBpbnB1dAlmbG9hdAlvcGFjY29sb3JfdGV4dHVyZUludGVuc2l0eQkiVGludCBJbnRlbnNpdHkiCiAgICBpbnB1dAlzdHJpbmcJb3BhY2NvbG9yX3RleHR1cmVDb2xvclNwYWNlCSJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICBpbnB1dAlzdHJpbmcJc3VyZmFjZV90ZXh0dXJlRmlsdGVyCUZpbHRlcgogICAgaW5wdXQJZmxvYXQJc3VyZmFjZV90ZXh0dXJlRmlsdGVyV2lkdGgJIkZpbHRlciBXaWR0aCIKICAgIGlucHV0CWludAliYXNlQnVtcEFuZE5vcm1hbF9lbmFibGUJRW5hYmxlCiAgICBpbnB1dAlzdHJpbmcJYmFzZUJ1bXBBbmROb3JtYWxfdHlwZQkiVGV4dHVyZSBUeXBlIgogICAgaW5wdXQJc3RyaW5nCWJhc2VCdW1wX2NvbG9yU3BhY2UJIlRleHR1cmUgQ29sb3IgU3BhY2UiCiAgICBpbnB1dAlmbG9hdAliYXNlQnVtcF9idW1wU2NhbGUJIkVmZmVjdCBTY2FsZSIKICAgIGlucHV0CXN0cmluZwliYXNlQnVtcF9idW1wVGV4dHVyZQkiVGV4dHVyZSBQYXRoIgogICAgaW5wdXQJc3RyaW5nCWJhc2VCdW1wX3dyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCWJhc2VCdW1wX2ZpbHRlcglGaWx0ZXIKICAgIGlucHV0CWZsb2F0CWJhc2VCdW1wX2ZpbHRlcldpZHRoCSJGaWx0ZXIgV2lkdGgiCiAgICBpbnB1dAlpbnQJYmFzZUJ1bXBfY2hhbm5lbAlDaGFubmVsCiAgICBpbnB1dAlzdHJpbmcJYmFzZUJ1bXBfaW1hZ2VQbGFuZQkiSW1hZ2UgUGxhbmUiCiAgICBpbnB1dAlzdHJpbmcJYmFzZU5vcm1hbF9jb2xvcnNwYWNlCSJUZXh0dXJlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJc3RyaW5nCWJhc2VOb3JtYWxfdmVjdG9yU3BhY2UJIlZlY3RvciBTcGFjZSIKICAgIGlucHV0CWZsb2F0CWJhc2VOb3JtYWxfc2NhbGUJIkVmZmVjdCBTY2FsZSIKICAgIGlucHV0CXN0cmluZwliYXNlTm9ybWFsX3RleHR1cmUJIlRleHR1cmUgUGF0aCIKICAgIGlucHV0CXN0cmluZwliYXNlTm9ybWFsX3dyYXAJV3JhcAogICAgaW5wdXQJc3RyaW5nCWJhc2VOb3JtYWxfZmlsdGVyCUZpbHRlcgogICAgaW5wdXQJZmxvYXQJYmFzZU5vcm1hbF9maWx0ZXJXaWR0aAkiRmlsdGVyIFdpZHRoIgogICAgaW5wdXQJaW50CWJhc2VOb3JtYWxfY2hhbm5lbAlDaGFubmVsCiAgICBpbnB1dAlzdHJpbmcJYmFzZU5vcm1hbF9pbWFnZVBsYW5lCSJJbWFnZSBQbGFuZSIKICAgIGlucHV0CWludAliYXNlTm9ybWFsX3NwYWNlCSJOb3JtYWwgU3BhY2UiCiAgICBpbnB1dAlpbnQJYmFzZU5vcm1hbF9mbGlwWAkiRmxpcCBYIgogICAgaW5wdXQJaW50CWJhc2VOb3JtYWxfZmxpcFkJIkZsaXAgWSIKICAgIGlucHV0CWludAlzZXBhcmF0ZUNvYXROb3JtYWxzCSJTZXBhcmF0ZSBDb2F0IE5vcm1hbHMiCiAgICBpbnB1dAlpbnQJY29hdEJ1bXBBbmROb3JtYWxfZW5hYmxlCUVuYWJsZQogICAgaW5wdXQJc3RyaW5nCWNvYXRCdW1wQW5kTm9ybWFsX3R5cGUJIlRleHR1cmUgVHlwZSIKICAgIGlucHV0CXN0cmluZwljb2F0QnVtcF9jb2xvclNwYWNlCSJUZXh0dXJlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJZmxvYXQJY29hdEJ1bXBfYnVtcFNjYWxlCSJFZmZlY3QgU2NhbGUiCiAgICBpbnB1dAlzdHJpbmcJY29hdEJ1bXBfYnVtcFRleHR1cmUJIlRleHR1cmUgUGF0aCIKICAgIGlucHV0CXN0cmluZwljb2F0QnVtcF93cmFwCVdyYXAKICAgIGlucHV0CXN0cmluZwljb2F0QnVtcF9maWx0ZXIJRmlsdGVyCiAgICBpbnB1dAlmbG9hdAljb2F0QnVtcF9maWx0ZXJXaWR0aAkiRmlsdGVyIFdpZHRoIgogICAgaW5wdXQJaW50CWNvYXRCdW1wX2NoYW5uZWwJQ2hhbm5lbAogICAgaW5wdXQJc3RyaW5nCWNvYXRCdW1wX2ltYWdlUGxhbmUJIkltYWdlIFBsYW5lIgogICAgaW5wdXQJc3RyaW5nCWNvYXROb3JtYWxfY29sb3JzcGFjZQkiVGV4dHVyZSBDb2xvciBTcGFjZSIKICAgIGlucHV0CXN0cmluZwljb2F0Tm9ybWFsX3ZlY3RvclNwYWNlCSJWZWN0b3IgU3BhY2UiCiAgICBpbnB1dAlmbG9hdAljb2F0Tm9ybWFsX3NjYWxlCSJFZmZlY3QgU2NhbGUiCiAgICBpbnB1dAlzdHJpbmcJY29hdE5vcm1hbF90ZXh0dXJlCSJUZXh0dXJlIFBhdGgiCiAgICBpbnB1dAlzdHJpbmcJY29hdE5vcm1hbF93cmFwCVdyYXAKICAgIGlucHV0CXN0cmluZwljb2F0Tm9ybWFsX2ZpbHRlcglGaWx0ZXIKICAgIGlucHV0CWZsb2F0CWNvYXROb3JtYWxfZmlsdGVyV2lkdGgJIkZpbHRlciBXaWR0aCIKICAgIGlucHV0CWludAljb2F0Tm9ybWFsX2NoYW5uZWwJQ2hhbm5lbAogICAgaW5wdXQJc3RyaW5nCWNvYXROb3JtYWxfaW1hZ2VQbGFuZQkiSW1hZ2UgUGxhbmUiCiAgICBpbnB1dAlpbnQJY29hdE5vcm1hbF9zcGFjZQkiTm9ybWFsIFNwYWNlIgogICAgaW5wdXQJaW50CWNvYXROb3JtYWxfZmxpcFgJIkZsaXAgWCIKICAgIGlucHV0CWludAljb2F0Tm9ybWFsX2ZsaXBZCSJGbGlwIFkiCiAgICBpbnB1dAlpbnQJZGlzcElucHV0X2VuYWJsZQkiRW5hYmxlIElucHV0IERpc3BsYWNlbWVudCIKICAgIGlucHV0CWZsb2F0CWRpc3BJbnB1dF9tYXgJIk1heGltdW0gRGlzcGxhY2VtZW50IgogICAgaW5wdXQJc3RyaW5nCWRpc3BJbnB1dF92ZWN0b3JzcGFjZQkiVmVjdG9yIFNwYWNlIgogICAgaW5wdXQJaW50CWRpc3BUZXhfZW5hYmxlCSJFbmFibGUgVGV4dHVyZSBEaXNwbGFjZW1lbnQiCiAgICBpbnB1dAlzdHJpbmcJZGlzcFRleF90eXBlCSJUZXh0dXJlIFR5cGUiCiAgICBpbnB1dAlzdHJpbmcJZGlzcFRleF9jb2xvclNwYWNlCSJUZXh0dXJlIENvbG9yIFNwYWNlIgogICAgaW5wdXQJc3RyaW5nCWRpc3BUZXhfdmVjdG9yU3BhY2UJIlZlY3RvciBTcGFjZSIKICAgIGlucHV0CXN0cmluZwlkaXNwVGV4X2NoYW5uZWxPcmRlcgkiQ2hhbm5lbCBPcmRlciIKICAgIGlucHV0CWZsb2F0CWRpc3BUZXhfb2Zmc2V0CU9mZnNldAogICAgaW5wdXQJZmxvYXQJZGlzcFRleF9zY2FsZQkiRWZmZWN0IFNjYWxlIgogICAgaW5wdXQJc3RyaW5nCWRpc3BUZXhfdGV4dHVyZQkiVGV4dHVyZSBQYXRoIgogICAgaW5wdXQJaW50CWRpc3BUZXhfY2hhbm5lbAlDaGFubmVsCiAgICBpbnB1dAlzdHJpbmcJZGlzcFRleF93cmFwCVdyYXAKICAgIGlucHV0CXN0cmluZwlkaXNwVGV4X2ZpbHRlcglGaWx0ZXIKICAgIGlucHV0CWZsb2F0CWRpc3BUZXhfZmlsdGVyV2lkdGgJIkZpbHRlciBXaWR0aCIKICAgIGlucHV0CWludAlkaXNwTm9pc2VfZW5hYmxlCSJFbmFibGUgTm9pc2UgRGlzcGxhY2VtZW50IgogICAgaW5wdXQJc3RyaW5nCWRpc3BOb2lzZV90eXBlCSJOb2lzZSBUeXBlIgogICAgaW5wdXQJdmVjdG9yCWRpc3BOb2lzZV9mcmVxCUZyZXF1ZW5jeQogICAgaW5wdXQJdmVjdG9yCWRpc3BOb2lzZV9vZmZzZXQJT2Zmc2V0CiAgICBpbnB1dAlmbG9hdAlkaXNwTm9pc2VfYW1wCUFtcGxpdHVkZQogICAgaW5wdXQJZmxvYXQJZGlzcE5vaXNlX3JvdWdoCVJvdWdobmVzcwogICAgaW5wdXQJZmxvYXQJZGlzcE5vaXNlX2F0dGVuCUF0dGVudWF0aW9uCiAgICBpbnB1dAlpbnQJZGlzcE5vaXNlX3R1cmIJVHVyYnVsZW5jZQogICAgaW5wdXQJc3RyaW5nCWRpZmZsYWJlbAlEaWZmdXNlCiAgICBpbnB1dAlzdHJpbmcJcmVmbGxhYmVsCVJlZmxlY3Rpb24KICAgIGlucHV0CXN0cmluZwlyZWZyYWN0bGFiZWwJUmVmcmFjdGlvbgogICAgaW5wdXQJc3RyaW5nCWNvYXRsYWJlbAkiQ29hdCBSZWZsZWN0aW9uIgogICAgaW5wdXQJc3RyaW5nCXNzc2xhYmVsCVN1YnN1cmZhY2UKICAgIGlucHV0CXZlY3RvcjIJdXZ0cmFucwlUcmFuc2xhdGUKICAgIGlucHV0CWZsb2F0CXV2cm90CVJvdGF0ZQogICAgaW5wdXQJdmVjdG9yMgl1dnNjYWxlCVNjYWxlCiAgICBpbnB1dAl2ZWN0b3IJYmFzZU4JIiIKICAgIGlucHV0CXZlY3Rvcgljb2F0TgkiIgogICAgaW5wdXQJZmxvYXQJZGlzcAkiTm9ybWFsIERpc3BsYWNlbWVudCIKICAgIGlucHV0CXZlY3Rvcgl2ZGlzcAkiVmVjdG9yIERpc3BsYWNlbWVudCIKICAgIGlucHV0CWludAlvcGFjcG9pbnRhbHBoYQkiVXNlIFBvaW50IEFscGhhIgogICAgaW5wdXQJaW50CXJvdW5kZWRFZGdlX2VuYWJsZQkiIgogICAgaW5wdXQJZmxvYXQJcm91bmRlZEVkZ2VfcmFkaXVzCSJSb3VuZCBFZGdlIFJhZGl1cyIKICAgIGlucHV0CWludAlyb3VuZGVkRWRnZV9tb2RlCSJSb3VuZCBFZGdlIE1vZGUiCiAgICBpbnB1dAlpbnQJb3BhY3BhY2tlZGFscGhhCSJVc2UgUGFja2VkIEFscGhhIgogICAgaW5wdXQJdmVjdG9yMglzdAkiIgogICAgaW5wdXQJaW50CWJhc2Vjb2xvcl91c2VUZXh0dXJlQWxwaGEJIlVzZSBUZXh0dXJlIEFscGhhIgogICAgaW5wdXQJaW50CW9jY2x1c2lvbl91c2VUZXh0dXJlCSJVc2UgVGV4dHVyZSIKICAgIGlucHV0CXN0cmluZwlvY2NsdXNpb25fdGV4dHVyZQlUZXh0dXJlCiAgICBpbnB1dAlmbG9hdAlvY2NsdXNpb25fdGV4dHVyZUludGVuc2l0eQkiVGludCBJbnRlbnNpdHkiCiAgICBpbnB1dAlzdHJpbmcJb2NjbHVzaW9uX3RleHR1cmVXcmFwCVdyYXAKICAgIGlucHV0CXN0cmluZwlvY2NsdXNpb25fdGV4dHVyZUNvbG9yU3BhY2UJIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgIGlucHV0CXN0cmluZwlhbHBoYWJsZW5kbW9kZQkiQWxwaGEgTW9kZSIKICAgIGlucHV0CWZsb2F0CWFscGhhY3V0b2ZmCSJBbHBoYSBDdXRvZmYiCiAgICBpbnB1dAlpbnQJZW1pdGNvbG9yX3VzZVBvaW50Q29sb3IJIlVzZSBQb2ludCBDb2xvciIKICAgIGlucHV0CWludAlzc3Njb2xvcl91c2VQb2ludENvbG9yCSJVc2UgUG9pbnQgQ29sb3IiCiAgICBpbnB1dAlpbnQJdHJhbnNjb2xvcl91c2VQb2ludENvbG9yCSJVc2UgUG9pbnQgQ29sb3IiCiAgICBvdXRwdXQJc3VyZmFjZQlzdXJmYWNlCXN1cmZhY2UKICAgIG91dHB1dAlkaXNwbGFjZW1lbnQJZGlzcGxhY2VtZW50CWRpc3BsYWNlbWVudAogICAgb3V0cHV0CXN0cnVjdF9TaGFkZXJMYXllcglsYXllcgkiIgogICAgaW5wdXRmbGFncwl1dgkyCiAgICBpbnB1dGZsYWdzCWJhc2Vjb2xvcgkyCiAgICBpbnB1dGZsYWdzCWFsYmVkb211bHQJMgogICAgaW5wdXRmbGFncwliYXNlY29sb3JfdXNlUG9pbnRDb2xvcgkyCiAgICBpbnB1dGZsYWdzCWJhc2Vjb2xvcl91c2VQYWNrZWRDb2xvcgkyCiAgICBpbnB1dGZsYWdzCWZyb250ZmFjZQkyCiAgICBpbnB1dGZsYWdzCWlvcgkyCiAgICBpbnB1dGZsYWdzCXJvdWdoCTIKICAgIGlucHV0ZmxhZ3MJYW5pc28JMgogICAgaW5wdXRmbGFncwlhbmlzb2RpcgkyCiAgICBpbnB1dGZsYWdzCW1ldGFsbGljCTIKICAgIGlucHV0ZmxhZ3MJcmVmbGVjdAkyCiAgICBpbnB1dGZsYWdzCXJlZmxlY3R0aW50CTIKICAgIGlucHV0ZmxhZ3MJY29hdAkyCiAgICBpbnB1dGZsYWdzCWNvYXRyb3VnaAkyCiAgICBpbnB1dGZsYWdzCXRyYW5zcGFyZW5jeQkyCiAgICBpbnB1dGZsYWdzCXRyYW5zY29sb3IJMgogICAgaW5wdXRmbGFncwl0cmFuc2Rpc3QJMgogICAgaW5wdXRmbGFncwlkaXNwZXJzaW9uCTIKICAgIGlucHV0ZmxhZ3MJcHJpb3JpdHkJMgogICAgaW5wdXRmbGFncwlzc3MJMgogICAgaW5wdXRmbGFncwlzc3Ntb2RlbAkyCiAgICBpbnB1dGZsYWdzCXNzc2Rpc3QJMgogICAgaW5wdXRmbGFncwlzc3Njb2xvcgkyCiAgICBpbnB1dGZsYWdzCXNzc3BoYXNlCTIKICAgIGlucHV0ZmxhZ3MJc2hlZW4JMgogICAgaW5wdXRmbGFncwlzaGVlbnRpbnQJMgogICAgaW5wdXRmbGFncwllbWl0Y29sb3IJMgogICAgaW5wdXRmbGFncwllbWl0aW50CTIKICAgIGlucHV0ZmxhZ3MJZW1pdGlsbHVtCTIKICAgIGlucHV0ZmxhZ3MJb3BhYwkyCiAgICBpbnB1dGZsYWdzCW9wYWNjb2xvcgkyCiAgICBpbnB1dGZsYWdzCWZha2VjYXVzdGljc2VuYWJsZWQJMgogICAgaW5wdXRmbGFncwlmYWtlY2F1c3RpY3N0cmFuc21pdAkyCiAgICBpbnB1dGZsYWdzCWZha2VjYXVzdGljc3NoYWRvdwkyCiAgICBpbnB1dGZsYWdzCWZha2VjYXVzdGljc29wYWNpdHkJMgogICAgaW5wdXRmbGFncwliYXNlY29sb3JfdXNlVGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCWJhc2Vjb2xvcl90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJYmFzZWNvbG9yX3RleHR1cmVJbnRlbnNpdHkJMgogICAgaW5wdXRmbGFncwliYXNlY29sb3JfdGV4dHVyZVdyYXAJMgogICAgaW5wdXRmbGFncwliYXNlY29sb3JfdGV4dHVyZUNvbG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwltZXRhbGxpY191c2VUZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJbWV0YWxsaWNfdGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCW1ldGFsbGljX21vbm9DaGFubmVsCTIKICAgIGlucHV0ZmxhZ3MJbWV0YWxsaWNfdGV4dHVyZVdyYXAJMgogICAgaW5wdXRmbGFncwltZXRhbGxpY190ZXh0dXJlQ29sb3JTcGFjZQkyCiAgICBpbnB1dGZsYWdzCXRyYW5zcGFyZW5jeV91c2VUZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJdHJhbnNwYXJlbmN5X3RleHR1cmUJMgogICAgaW5wdXRmbGFncwl0cmFuc3BhcmVuY3lfbW9ub0NoYW5uZWwJMgogICAgaW5wdXRmbGFncwl0cmFuc3BhcmVuY3lfdGV4dHVyZVdyYXAJMgogICAgaW5wdXRmbGFncwl0cmFuc3BhcmVuY3lfdGV4dHVyZUNvbG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwlpb3JfdXNlVGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCWlvcl90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJaW9yX21vbm9DaGFubmVsCTIKICAgIGlucHV0ZmxhZ3MJaW9yX3RleHR1cmVXcmFwCTIKICAgIGlucHV0ZmxhZ3MJaW9yX3RleHR1cmVDb2xvclNwYWNlCTIKICAgIGlucHV0ZmxhZ3MJdHJhbnNjb2xvcl91c2VUZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJdHJhbnNjb2xvcl90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJdHJhbnNjb2xvcl90ZXh0dXJlSW50ZW5zaXR5CTIKICAgIGlucHV0ZmxhZ3MJdHJhbnNjb2xvcl90ZXh0dXJlV3JhcAkyCiAgICBpbnB1dGZsYWdzCXRyYW5zY29sb3JfdGV4dHVyZUNvbG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwl0cmFuc2Rpc3RfdXNlVGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCXRyYW5zZGlzdF90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJdHJhbnNkaXN0X21vbm9DaGFubmVsCTIKICAgIGlucHV0ZmxhZ3MJdHJhbnNkaXN0X3RleHR1cmVXcmFwCTIKICAgIGlucHV0ZmxhZ3MJdHJhbnNkaXN0X3RleHR1cmVDb2xvclNwYWNlCTIKICAgIGlucHV0ZmxhZ3MJZGlzcGVyc2lvbl91c2VUZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJZGlzcGVyc2lvbl90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJZGlzcGVyc2lvbl9tb25vQ2hhbm5lbAkyCiAgICBpbnB1dGZsYWdzCWRpc3BlcnNpb25fdGV4dHVyZVdyYXAJMgogICAgaW5wdXRmbGFncwlkaXNwZXJzaW9uX3RleHR1cmVDb2xvclNwYWNlCTIKICAgIGlucHV0ZmxhZ3MJcmVmbGVjdF91c2VUZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJcmVmbGVjdF90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJcmVmbGVjdF9tb25vQ2hhbm5lbAkyCiAgICBpbnB1dGZsYWdzCXJlZmxlY3RfdGV4dHVyZVdyYXAJMgogICAgaW5wdXRmbGFncwlyZWZsZWN0X3RleHR1cmVDb2xvclNwYWNlCTIKICAgIGlucHV0ZmxhZ3MJcmVmbGVjdHRpbnRfdXNlVGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCXJlZmxlY3R0aW50X3RleHR1cmUJMgogICAgaW5wdXRmbGFncwlyZWZsZWN0dGludF9tb25vQ2hhbm5lbAkyCiAgICBpbnB1dGZsYWdzCXJlZmxlY3R0aW50X3RleHR1cmVXcmFwCTIKICAgIGlucHV0ZmxhZ3MJcmVmbGVjdHRpbnRfdGV4dHVyZUNvbG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwlyb3VnaF91c2VUZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJcm91Z2hfdGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCXJvdWdoX21vbm9DaGFubmVsCTIKICAgIGlucHV0ZmxhZ3MJcm91Z2hfdGV4dHVyZVdyYXAJMgogICAgaW5wdXRmbGFncwlyb3VnaF90ZXh0dXJlQ29sb3JTcGFjZQkyCiAgICBpbnB1dGZsYWdzCWFuaXNvX3VzZVRleHR1cmUJMgogICAgaW5wdXRmbGFncwlhbmlzb190ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJYW5pc29fbW9ub0NoYW5uZWwJMgogICAgaW5wdXRmbGFncwlhbmlzb190ZXh0dXJlV3JhcAkyCiAgICBpbnB1dGZsYWdzCWFuaXNvX3RleHR1cmVDb2xvclNwYWNlCTIKICAgIGlucHV0ZmxhZ3MJYW5pc29kaXJfdXNlVGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCWFuaXNvZGlyX3RleHR1cmUJMgogICAgaW5wdXRmbGFncwlhbmlzb2Rpcl9tb25vQ2hhbm5lbAkyCiAgICBpbnB1dGZsYWdzCWFuaXNvZGlyX3RleHR1cmVXcmFwCTIKICAgIGlucHV0ZmxhZ3MJYW5pc29kaXJfdGV4dHVyZUNvbG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwlhbmlzb2Rpcl90ZXh0dXJlRmlsdGVyCTIKICAgIGlucHV0ZmxhZ3MJc3NzX3VzZVRleHR1cmUJMgogICAgaW5wdXRmbGFncwlzc3NfdGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCXNzc19tb25vQ2hhbm5lbAkyCiAgICBpbnB1dGZsYWdzCXNzc190ZXh0dXJlV3JhcAkyCiAgICBpbnB1dGZsYWdzCXNzc190ZXh0dXJlQ29sb3JTcGFjZQkyCiAgICBpbnB1dGZsYWdzCXNzc2Rpc3RfdXNlVGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCXNzc2Rpc3RfdGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCXNzc2Rpc3RfbW9ub0NoYW5uZWwJMgogICAgaW5wdXRmbGFncwlzc3NkaXN0X3RleHR1cmVXcmFwCTIKICAgIGlucHV0ZmxhZ3MJc3NzZGlzdF90ZXh0dXJlQ29sb3JTcGFjZQkyCiAgICBpbnB1dGZsYWdzCXNzc2NvbG9yX3VzZVRleHR1cmUJMgogICAgaW5wdXRmbGFncwlzc3Njb2xvcl90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJc3NzY29sb3JfdGV4dHVyZVdyYXAJMgogICAgaW5wdXRmbGFncwlzc3Njb2xvcl90ZXh0dXJlQ29sb3JTcGFjZQkyCiAgICBpbnB1dGZsYWdzCXNoZWVuX3VzZVRleHR1cmUJMgogICAgaW5wdXRmbGFncwlzaGVlbl90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJc2hlZW5fbW9ub0NoYW5uZWwJMgogICAgaW5wdXRmbGFncwlzaGVlbl90ZXh0dXJlV3JhcAkyCiAgICBpbnB1dGZsYWdzCXNoZWVuX3RleHR1cmVDb2xvclNwYWNlCTIKICAgIGlucHV0ZmxhZ3MJc2hlZW50aW50X3VzZVRleHR1cmUJMgogICAgaW5wdXRmbGFncwlzaGVlbnRpbnRfdGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCXNoZWVudGludF9tb25vQ2hhbm5lbAkyCiAgICBpbnB1dGZsYWdzCXNoZWVudGludF90ZXh0dXJlV3JhcAkyCiAgICBpbnB1dGZsYWdzCXNoZWVudGludF90ZXh0dXJlQ29sb3JTcGFjZQkyCiAgICBpbnB1dGZsYWdzCWNvYXRfdXNlVGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCWNvYXRfdGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCWNvYXRfbW9ub0NoYW5uZWwJMgogICAgaW5wdXRmbGFncwljb2F0X3RleHR1cmVXcmFwCTIKICAgIGlucHV0ZmxhZ3MJY29hdF90ZXh0dXJlQ29sb3JTcGFjZQkyCiAgICBpbnB1dGZsYWdzCWNvYXRyb3VnaF91c2VUZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJY29hdHJvdWdoX3RleHR1cmUJMgogICAgaW5wdXRmbGFncwljb2F0cm91Z2hfbW9ub0NoYW5uZWwJMgogICAgaW5wdXRmbGFncwljb2F0cm91Z2hfdGV4dHVyZVdyYXAJMgogICAgaW5wdXRmbGFncwljb2F0cm91Z2hfdGV4dHVyZUNvbG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwllbWl0Y29sb3JfdXNlVGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCWVtaXRjb2xvcl90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJZW1pdGNvbG9yX3RleHR1cmVJbnRlbnNpdHkJMgogICAgaW5wdXRmbGFncwllbWl0Y29sb3JfdGV4dHVyZVdyYXAJMgogICAgaW5wdXRmbGFncwllbWl0Y29sb3JfdGV4dHVyZUNvbG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwlvcGFjY29sb3JfdXNlVGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCW9wYWNjb2xvcl90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJb3BhY2NvbG9yX3RleHR1cmVXcmFwCTIKICAgIGlucHV0ZmxhZ3MJb3BhY2NvbG9yX3RleHR1cmVJbnRlbnNpdHkJMgogICAgaW5wdXRmbGFncwlvcGFjY29sb3JfdGV4dHVyZUNvbG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwlzdXJmYWNlX3RleHR1cmVGaWx0ZXIJMgogICAgaW5wdXRmbGFncwlzdXJmYWNlX3RleHR1cmVGaWx0ZXJXaWR0aAkyCiAgICBpbnB1dGZsYWdzCWJhc2VCdW1wQW5kTm9ybWFsX2VuYWJsZQkyCiAgICBpbnB1dGZsYWdzCWJhc2VCdW1wQW5kTm9ybWFsX3R5cGUJMgogICAgaW5wdXRmbGFncwliYXNlQnVtcF9jb2xvclNwYWNlCTIKICAgIGlucHV0ZmxhZ3MJYmFzZUJ1bXBfYnVtcFNjYWxlCTIKICAgIGlucHV0ZmxhZ3MJYmFzZUJ1bXBfYnVtcFRleHR1cmUJMgogICAgaW5wdXRmbGFncwliYXNlQnVtcF93cmFwCTIKICAgIGlucHV0ZmxhZ3MJYmFzZUJ1bXBfZmlsdGVyCTIKICAgIGlucHV0ZmxhZ3MJYmFzZUJ1bXBfZmlsdGVyV2lkdGgJMgogICAgaW5wdXRmbGFncwliYXNlQnVtcF9jaGFubmVsCTIKICAgIGlucHV0ZmxhZ3MJYmFzZUJ1bXBfaW1hZ2VQbGFuZQkyCiAgICBpbnB1dGZsYWdzCWJhc2VOb3JtYWxfY29sb3JzcGFjZQkyCiAgICBpbnB1dGZsYWdzCWJhc2VOb3JtYWxfdmVjdG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwliYXNlTm9ybWFsX3NjYWxlCTIKICAgIGlucHV0ZmxhZ3MJYmFzZU5vcm1hbF90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJYmFzZU5vcm1hbF93cmFwCTIKICAgIGlucHV0ZmxhZ3MJYmFzZU5vcm1hbF9maWx0ZXIJMgogICAgaW5wdXRmbGFncwliYXNlTm9ybWFsX2ZpbHRlcldpZHRoCTIKICAgIGlucHV0ZmxhZ3MJYmFzZU5vcm1hbF9jaGFubmVsCTIKICAgIGlucHV0ZmxhZ3MJYmFzZU5vcm1hbF9pbWFnZVBsYW5lCTIKICAgIGlucHV0ZmxhZ3MJYmFzZU5vcm1hbF9zcGFjZQkyCiAgICBpbnB1dGZsYWdzCWJhc2VOb3JtYWxfZmxpcFgJMgogICAgaW5wdXRmbGFncwliYXNlTm9ybWFsX2ZsaXBZCTIKICAgIGlucHV0ZmxhZ3MJc2VwYXJhdGVDb2F0Tm9ybWFscwkyCiAgICBpbnB1dGZsYWdzCWNvYXRCdW1wQW5kTm9ybWFsX2VuYWJsZQkyCiAgICBpbnB1dGZsYWdzCWNvYXRCdW1wQW5kTm9ybWFsX3R5cGUJMgogICAgaW5wdXRmbGFncwljb2F0QnVtcF9jb2xvclNwYWNlCTIKICAgIGlucHV0ZmxhZ3MJY29hdEJ1bXBfYnVtcFNjYWxlCTIKICAgIGlucHV0ZmxhZ3MJY29hdEJ1bXBfYnVtcFRleHR1cmUJMgogICAgaW5wdXRmbGFncwljb2F0QnVtcF93cmFwCTIKICAgIGlucHV0ZmxhZ3MJY29hdEJ1bXBfZmlsdGVyCTIKICAgIGlucHV0ZmxhZ3MJY29hdEJ1bXBfZmlsdGVyV2lkdGgJMgogICAgaW5wdXRmbGFncwljb2F0QnVtcF9jaGFubmVsCTIKICAgIGlucHV0ZmxhZ3MJY29hdEJ1bXBfaW1hZ2VQbGFuZQkyCiAgICBpbnB1dGZsYWdzCWNvYXROb3JtYWxfY29sb3JzcGFjZQkyCiAgICBpbnB1dGZsYWdzCWNvYXROb3JtYWxfdmVjdG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwljb2F0Tm9ybWFsX3NjYWxlCTIKICAgIGlucHV0ZmxhZ3MJY29hdE5vcm1hbF90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJY29hdE5vcm1hbF93cmFwCTIKICAgIGlucHV0ZmxhZ3MJY29hdE5vcm1hbF9maWx0ZXIJMgogICAgaW5wdXRmbGFncwljb2F0Tm9ybWFsX2ZpbHRlcldpZHRoCTIKICAgIGlucHV0ZmxhZ3MJY29hdE5vcm1hbF9jaGFubmVsCTIKICAgIGlucHV0ZmxhZ3MJY29hdE5vcm1hbF9pbWFnZVBsYW5lCTIKICAgIGlucHV0ZmxhZ3MJY29hdE5vcm1hbF9zcGFjZQkyCiAgICBpbnB1dGZsYWdzCWNvYXROb3JtYWxfZmxpcFgJMgogICAgaW5wdXRmbGFncwljb2F0Tm9ybWFsX2ZsaXBZCTIKICAgIGlucHV0ZmxhZ3MJZGlzcElucHV0X2VuYWJsZQkyCiAgICBpbnB1dGZsYWdzCWRpc3BJbnB1dF9tYXgJMgogICAgaW5wdXRmbGFncwlkaXNwSW5wdXRfdmVjdG9yc3BhY2UJMgogICAgaW5wdXRmbGFncwlkaXNwVGV4X2VuYWJsZQkyCiAgICBpbnB1dGZsYWdzCWRpc3BUZXhfdHlwZQkyCiAgICBpbnB1dGZsYWdzCWRpc3BUZXhfY29sb3JTcGFjZQkyCiAgICBpbnB1dGZsYWdzCWRpc3BUZXhfdmVjdG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwlkaXNwVGV4X2NoYW5uZWxPcmRlcgkyCiAgICBpbnB1dGZsYWdzCWRpc3BUZXhfb2Zmc2V0CTIKICAgIGlucHV0ZmxhZ3MJZGlzcFRleF9zY2FsZQkyCiAgICBpbnB1dGZsYWdzCWRpc3BUZXhfdGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCWRpc3BUZXhfY2hhbm5lbAkyCiAgICBpbnB1dGZsYWdzCWRpc3BUZXhfd3JhcAkyCiAgICBpbnB1dGZsYWdzCWRpc3BUZXhfZmlsdGVyCTIKICAgIGlucHV0ZmxhZ3MJZGlzcFRleF9maWx0ZXJXaWR0aAkyCiAgICBpbnB1dGZsYWdzCWRpc3BOb2lzZV9lbmFibGUJMgogICAgaW5wdXRmbGFncwlkaXNwTm9pc2VfdHlwZQkyCiAgICBpbnB1dGZsYWdzCWRpc3BOb2lzZV9mcmVxCTIKICAgIGlucHV0ZmxhZ3MJZGlzcE5vaXNlX29mZnNldAkyCiAgICBpbnB1dGZsYWdzCWRpc3BOb2lzZV9hbXAJMgogICAgaW5wdXRmbGFncwlkaXNwTm9pc2Vfcm91Z2gJMgogICAgaW5wdXRmbGFncwlkaXNwTm9pc2VfYXR0ZW4JMgogICAgaW5wdXRmbGFncwlkaXNwTm9pc2VfdHVyYgkyCiAgICBpbnB1dGZsYWdzCWRpZmZsYWJlbAkyCiAgICBpbnB1dGZsYWdzCXJlZmxsYWJlbAkyCiAgICBpbnB1dGZsYWdzCXJlZnJhY3RsYWJlbAkyCiAgICBpbnB1dGZsYWdzCWNvYXRsYWJlbAkyCiAgICBpbnB1dGZsYWdzCXNzc2xhYmVsCTIKICAgIGlucHV0ZmxhZ3MJdXZ0cmFucwkyCiAgICBpbnB1dGZsYWdzCXV2cm90CTIKICAgIGlucHV0ZmxhZ3MJdXZzY2FsZQkyCiAgICBpbnB1dGZsYWdzCWJhc2VOCTIKICAgIGlucHV0ZmxhZ3MJY29hdE4JMgogICAgaW5wdXRmbGFncwlkaXNwCTIKICAgIGlucHV0ZmxhZ3MJdmRpc3AJMgogICAgaW5wdXRmbGFncwlvcGFjcG9pbnRhbHBoYQkyCiAgICBpbnB1dGZsYWdzCXJvdW5kZWRFZGdlX2VuYWJsZQkyCiAgICBpbnB1dGZsYWdzCXJvdW5kZWRFZGdlX3JhZGl1cwkyCiAgICBpbnB1dGZsYWdzCXJvdW5kZWRFZGdlX21vZGUJMgogICAgaW5wdXRmbGFncwlvcGFjcGFja2VkYWxwaGEJMgogICAgaW5wdXRmbGFncwlzdAkyCiAgICBpbnB1dGZsYWdzCWJhc2Vjb2xvcl91c2VUZXh0dXJlQWxwaGEJMgogICAgaW5wdXRmbGFncwlvY2NsdXNpb25fdXNlVGV4dHVyZQkyCiAgICBpbnB1dGZsYWdzCW9jY2x1c2lvbl90ZXh0dXJlCTIKICAgIGlucHV0ZmxhZ3MJb2NjbHVzaW9uX3RleHR1cmVJbnRlbnNpdHkJMgogICAgaW5wdXRmbGFncwlvY2NsdXNpb25fdGV4dHVyZVdyYXAJMgogICAgaW5wdXRmbGFncwlvY2NsdXNpb25fdGV4dHVyZUNvbG9yU3BhY2UJMgogICAgaW5wdXRmbGFncwlhbHBoYWJsZW5kbW9kZQkyCiAgICBpbnB1dGZsYWdzCWFscGhhY3V0b2ZmCTIKICAgIGlucHV0ZmxhZ3MJZW1pdGNvbG9yX3VzZVBvaW50Q29sb3IJMgogICAgaW5wdXRmbGFncwlzc3Njb2xvcl91c2VQb2ludENvbG9yCTIKICAgIGlucHV0ZmxhZ3MJdHJhbnNjb2xvcl91c2VQb2ludENvbG9yCTIKICAgIG91dHB1dGZsYWdzCWxheWVyCTIKICAgIHNpZ25hdHVyZQkiRGVmYXVsdCBJbnB1dHMiCWRlZmF1bHQJeyB2ZWN0b3IgdmVjdG9yIGZsb2F0IGludCBpbnQgaW50IGZsb2F0IGZsb2F0IGZsb2F0IGZsb2F0IGZsb2F0IGZsb2F0IGZsb2F0IGZsb2F0IGZsb2F0IGZsb2F0IHZlY3RvciBmbG9hdCBmbG9hdCBpbnQgZmxvYXQgc3RyaW5nIGZsb2F0IHZlY3RvciBmbG9hdCBmbG9hdCBmbG9hdCB2ZWN0b3IgZmxvYXQgaW50IGZsb2F0IHZlY3RvciBpbnQgZmxvYXQgZmxvYXQgZmxvYXQgaW50IHN0cmluZyBmbG9hdCBzdHJpbmcgc3RyaW5nIGludCBzdHJpbmcgaW50IHN0cmluZyBzdHJpbmcgaW50IHN0cmluZyBpbnQgc3RyaW5nIHN0cmluZyBpbnQgc3RyaW5nIGludCBzdHJpbmcgc3RyaW5nIGludCBzdHJpbmcgZmxvYXQgc3RyaW5nIHN0cmluZyBpbnQgc3RyaW5nIGludCBzdHJpbmcgc3RyaW5nIGludCBzdHJpbmcgaW50IHN0cmluZyBzdHJpbmcgaW50IHN0cmluZyBpbnQgc3RyaW5nIHN0cmluZyBpbnQgc3RyaW5nIGludCBzdHJpbmcgc3RyaW5nIGludCBzdHJpbmcgaW50IHN0cmluZyBzdHJpbmcgaW50IHN0cmluZyBpbnQgc3RyaW5nIHN0cmluZyBpbnQgc3RyaW5nIGludCBzdHJpbmcgc3RyaW5nIHN0cmluZyBpbnQgc3RyaW5nIGludCBzdHJpbmcgc3RyaW5nIGludCBzdHJpbmcgaW50IHN0cmluZyBzdHJpbmcgaW50IHN0cmluZyBzdHJpbmcgc3RyaW5nIGludCBzdHJpbmcgaW50IHN0cmluZyBzdHJpbmcgaW50IHN0cmluZyBpbnQgc3RyaW5nIHN0cmluZyBpbnQgc3RyaW5nIGludCBzdHJpbmcgc3RyaW5nIGludCBzdHJpbmcgaW50IHN0cmluZyBzdHJpbmcgaW50IHN0cmluZyBmbG9hdCBzdHJpbmcgc3RyaW5nIGludCBzdHJpbmcgc3RyaW5nIGZsb2F0IHN0cmluZyBzdHJpbmcgZmxvYXQgaW50IHN0cmluZyBzdHJpbmcgZmxvYXQgc3RyaW5nIHN0cmluZyBzdHJpbmcgZmxvYXQgaW50IHN0cmluZyBzdHJpbmcgc3RyaW5nIGZsb2F0IHN0cmluZyBzdHJpbmcgc3RyaW5nIGZsb2F0IGludCBzdHJpbmcgaW50IGludCBpbnQgaW50IGludCBzdHJpbmcgc3RyaW5nIGZsb2F0IHN0cmluZyBzdHJpbmcgc3RyaW5nIGZsb2F0IGludCBzdHJpbmcgc3RyaW5nIHN0cmluZyBmbG9hdCBzdHJpbmcgc3RyaW5nIHN0cmluZyBmbG9hdCBpbnQgc3RyaW5nIGludCBpbnQgaW50IGludCBmbG9hdCBzdHJpbmcgaW50IHN0cmluZyBzdHJpbmcgc3RyaW5nIHN0cmluZyBmbG9hdCBmbG9hdCBzdHJpbmcgaW50IHN0cmluZyBzdHJpbmcgZmxvYXQgaW50IHN0cmluZyB2ZWN0b3IgdmVjdG9yIGZsb2F0IGZsb2F0IGZsb2F0IGludCBzdHJpbmcgc3RyaW5nIHN0cmluZyBzdHJpbmcgc3RyaW5nIHZlY3RvcjIgZmxvYXQgdmVjdG9yMiB2ZWN0b3IgdmVjdG9yIGZsb2F0IHZlY3RvciBpbnQgaW50IGZsb2F0IGludCBpbnQgdmVjdG9yMiBpbnQgaW50IHN0cmluZyBmbG9hdCBzdHJpbmcgc3RyaW5nIHN0cmluZyBmbG9hdCBpbnQgaW50IGludCBzdXJmYWNlIGRpc3BsYWNlbWVudCBzdHJ1Y3RfU2hhZGVyTGF5ZXIgfQoKICAgIG91dHB1dG92ZXJyaWRlcwlkZWZhdWx0CiAgICB7CglfX19iZWdpbglhdXRvCgkJCSgwKQoJX19fYmVnaW4JYXV0bwoJCQkoMCkKCV9fX2JlZ2luCWF1dG8KCQkJKDApCiAgICB9CgogICAgaGVscCB7CgkiIgogICAgfQoKICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInNwZWNtb2RlbCIKICAgICAgICBsYWJlbCAgICJPcGVuR0wgU3BlY3VsYXIgTW9kZWwiCiAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICBpbnZpc2libGUKICAgICAgICBkZWZhdWx0IHsgImdneCIgfQogICAgICAgIHBhcm10YWcgeyAib2dsX2NvYXRfbW9kZWwiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJvZ2xfc3BlY19tb2RlbCIgIjEiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImNvYXRzcGVjbW9kZWwiCiAgICAgICAgbGFiZWwgICAiT3BlbkdMIENvYXQgU3BlY3VsYXIgTW9kZWwiCiAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICBpbnZpc2libGUKICAgICAgICBkZWZhdWx0IHsgImdneCIgfQogICAgICAgIHBhcm10YWcgeyAib2dsX2NvYXRfbW9kZWwiICIxIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJzcGVjdWxhcl90aW50IgogICAgICAgIGxhYmVsICAgIk9wZW5HTCBTcGVjdWxhciBUaW50IgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBkZWZhdWx0IHsgWyAiKDEtY2goXCJtZXRhbGxpY1wiKSkqY2goXCJyZWZsZWN0dGludFwiKSIgaHNjcmlwdC1leHByIF0gfQogICAgICAgIHJhbmdlICAgeyAwISAxISB9CiAgICAgICAgcGFybXRhZyB7ICJ1bml0cyIgIiIgfQogICAgfQogICAgZ3JvdXAgewogICAgICAgIG5hbWUgICAgImRpZmZ1c2VfZm9sZGVyXzE1IgogICAgICAgIGxhYmVsICAgIlN1cmZhY2UiCgogICAgICAgIGdyb3VwY29sbGFwc2libGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXI3IgogICAgICAgICAgICBsYWJlbCAgICJCYXNpYyIKICAgICAgICAgICAgcGFybXRhZyB7ICJncm91cF9kZWZhdWx0IiAiMSIgfQoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlY29sb3IiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJCYXNlIENvbG9yIgogICAgICAgICAgICAgICAgdHlwZSAgICBjb2xvcgogICAgICAgICAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAuMiIgIjAuMiIgIjAuMiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgYmFzZWNvbG9yX3VzZUJhc2VDb2xvciA9PSAwIH0geyBkaWZmX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2FtYiIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2RpZmYiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9zcGVjIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJhbGJlZG9tdWx0IgogICAgICAgICAgICAgICAgbGFiZWwgICAiQWxiZWRvIE11bHRpcGxpZXIiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfYW1iX2ludGVuc2l0eSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2RpZmZfaW50ZW5zaXR5IiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfc3BlY19pbnRlbnNpdHkiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJhc2Vjb2xvcl91c2VQb2ludENvbG9yIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFBvaW50IENvbG9yIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib24iIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpZmZfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZWNvbG9yX3VzZVBhY2tlZENvbG9yIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFBhY2tlZCBDb2xvciIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlmZl9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJmcm9udGZhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTaGFkZSBCb3RoIFNpZGVzIEFzIEZyb250IgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib24iIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cGNvbGxhcHNpYmxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyNCIKICAgICAgICAgICAgbGFiZWwgICAiU3BlY3VsYXIiCiAgICAgICAgICAgIHBhcm10YWcgeyAiZ3JvdXBfZGVmYXVsdCIgIjEiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiaW9yIgogICAgICAgICAgICAgICAgbGFiZWwgICAiSU9SIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIxLjUiIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAxIDMgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfaW9yIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJyb3VnaCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlJvdWdobmVzcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMC4zIiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyB1c2VCYXNlQ29sb3IgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9kaWZmX3JvdWdoIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfcm91Z2giICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImFuaXNvIgogICAgICAgICAgICAgICAgbGFiZWwgICAiQW5pc290cm9weSIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgdXNlQmFzZUNvbG9yID09IDAgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJhbmlzb2RpciIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkFuaXNvdHJvcHkgRGlyZWN0aW9uIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGdyb3VwY29sbGFwc2libGUgewogICAgICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyMTIiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJSZWZsZWN0aW9uIgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJncm91cF9kZWZhdWx0IiAiMSIgfQoKICAgICAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgICAgIG5hbWUgICAgIm1ldGFsbGljIgogICAgICAgICAgICAgICAgICAgIGxhYmVsICAgIk1ldGFsbGljIgogICAgICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgICAgICBoaWRld2hlbiAieyB1c2VCYXNlQ29sb3IgPT0gMCB9IgogICAgICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX21ldGFsbGljIiAiMSIgfQogICAgICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgICAgIG5hbWUgICAgInJlZmxlY3QiCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiUmVmbGVjdGl2aXR5IgogICAgICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgICAgICBoaWRld2hlbiAieyB1c2VCYXNlQ29sb3IgPT0gMCB9IgogICAgICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3JlZmxlY3QiICIxIiB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAicmVmbGVjdHRpbnQiCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiUmVmbGVjdCBUaW50IgogICAgICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgICAgICBoaWRld2hlbiAieyB1c2VCYXNlQ29sb3IgPT0gMCB9IgogICAgICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3NwZWN0aW50IiAiMSIgfQogICAgICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXQiCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiQ29hdCIKICAgICAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgdXNlQmFzZUNvbG9yID09IDAgfSIKICAgICAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9jb2F0X2ludGVuc2l0eSIgIjEiIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0cm91Z2giCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiQ29hdCBSb3VnaG5lc3MiCiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHVzZUJhc2VDb2xvciA9PSAwIH0iCiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfY29hdF9yb3VnaCIgIjEiIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGdyb3VwY29sbGFwc2libGUgewogICAgICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyMTMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUcmFuc3BhcmVuY3kiCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImdyb3VwX2RlZmF1bHQiICIxIiB9CgogICAgICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAidHJhbnNwYXJlbmN5IgogICAgICAgICAgICAgICAgICAgIGxhYmVsICAgIlRyYW5zcGFyZW5jeSIKICAgICAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfdHJhbnNwYXJlbmN5IiAiMSIgfQogICAgICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgICAgIG5hbWUgICAgInRyYW5zY29sb3IiCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiVHJhbnNtaXNzaW9uIENvbG9yIgogICAgICAgICAgICAgICAgICAgIHR5cGUgICAgY29sb3IKICAgICAgICAgICAgICAgICAgICBzaXplICAgIDMKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiICIxIiAiMSIgfQogICAgICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHRyYW5zY29sb3JfdXNlQmFzZUNvbG9yID09IDAgfSB7IGRpZmZfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgICAgICBuYW1lICAgICJ0cmFuc2Rpc3QiCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiQXQgRGlzdGFuY2UiCiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMC4xIiB9CiAgICAgICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgdXNlQmFzZUNvbG9yID09IDAgfSIKICAgICAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgICAgICBuYW1lICAgICJkaXNwZXJzaW9uIgogICAgICAgICAgICAgICAgICAgIGxhYmVsICAgIkRpc3BlcnNpb24iCiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHVzZUJhc2VDb2xvciA9PSAwIH0iCiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAicHJpb3JpdHkiCiAgICAgICAgICAgICAgICAgICAgbGFiZWwgICAiU3VyZmFjZSBQcmlvcml0eSIKICAgICAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAidHJhbnNjb2xvcl91c2VQb2ludENvbG9yIgogICAgICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBQb2ludCBDb2xvciIKICAgICAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgIH0KCiAgICAgICAgZ3JvdXBjb2xsYXBzaWJsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjgiCiAgICAgICAgICAgIGxhYmVsICAgIlN1YnN1cmZhY2UgU2NhdHRlcmluZyIKICAgICAgICAgICAgcGFybXRhZyB7ICJncm91cF9kZWZhdWx0IiAiMSIgfQoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzc3MiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTdWJzdXJmYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyB1c2VCYXNlQ29sb3IgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNzc2NvbG9yIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU3Vic3VyZmFjZSBDb2xvciIKICAgICAgICAgICAgICAgIHR5cGUgICAgY29sb3IKICAgICAgICAgICAgICAgIHNpemUgICAgMwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiAiMSIgIjEiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHVzZUJhc2VDb2xvciA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3NzbW9kZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTU1MgTW9kZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInBicnNzcyIgfQogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgInBicnNzcyIgICAgICAgICJGdWxsIFN1YnN1cmZhY2UgU2NhdHRlcmluZyIKICAgICAgICAgICAgICAgICAgICAicGJyc2luZ2xlcyIgICAgIlNpbmdsZSBTY2F0dGVyaW5nIgogICAgICAgICAgICAgICAgICAgICJwYnJyd2Fsa3NzcyIgICAiUmFuZG9tIFdhbGsgKEthcm1hKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3NzZGlzdCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlN1YnN1cmZhY2UgRGlzdGFuY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAuMSIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgdXNlQmFzZUNvbG9yID09IDAgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzc3NwaGFzZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNjYXR0ZXJpbmcgUGhhc2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHNzc21vZGVsID09IHBicnNzcyB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDEgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzc3Njb2xvcl91c2VQb2ludENvbG9yIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFBvaW50IENvbG9yIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBjb2xsYXBzaWJsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjExIgogICAgICAgICAgICBsYWJlbCAgICJTaGVlbiIKICAgICAgICAgICAgcGFybXRhZyB7ICJncm91cF9kZWZhdWx0IiAiMSIgfQoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzaGVlbiIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNoZWVuIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyB1c2VCYXNlQ29sb3IgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNoZWVudGludCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNoZWVuIFRpbnQiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHVzZUJhc2VDb2xvciA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cGNvbGxhcHNpYmxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyOSIKICAgICAgICAgICAgbGFiZWwgICAiRW1pc3Npb24iCiAgICAgICAgICAgIHBhcm10YWcgeyAiZ3JvdXBfZGVmYXVsdCIgIjEiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW1pdGludCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVtaXNzaW9uIEludGVuc2l0eSIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfZW1pdF9pbnRlbnNpdHkiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVtaXRjb2xvciIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVtaXNzaW9uIENvbG9yIgogICAgICAgICAgICAgICAgdHlwZSAgICBjb2xvcgogICAgICAgICAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiICIxIiAiMSIgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9lbWl0IiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJlbWl0Y29sb3JfdXNlUG9pbnRDb2xvciIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBQb2ludCBDb2xvciIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJlbWl0aWxsdW0iCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbWlzc2lvbiBJbGx1bWluYXRlcyBPYmplY3RzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib24iIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0KCiAgICBncm91cCB7CiAgICAgICAgbmFtZSAgICAiZGlmZnVzZV9mb2xkZXJfMTVfMSIKICAgICAgICBsYWJlbCAgICJPcGFjaXR5IgoKICAgICAgICBncm91cHNpbXBsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjE1IgogICAgICAgICAgICBsYWJlbCAgICJPcGFjaXR5IgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJvcGFjIgogICAgICAgICAgICAgICAgbGFiZWwgICAiT3BhY2l0eSBTY2FsZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgIm9wYWNjb2xvciIKICAgICAgICAgICAgICAgIGxhYmVsICAgIk9wYWNpdHkgQ29sb3IiCiAgICAgICAgICAgICAgICB0eXBlICAgIGNvbG9yCiAgICAgICAgICAgICAgICBzaXplICAgIDMKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgIjEiICIxIiB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAib3BhY3BvaW50YWxwaGEiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJVc2UgUG9pbnQgQWxwaGEiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvbiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJvcGFjcGFja2VkYWxwaGEiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJVc2UgUGFja2VkIEFscGhhIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXI2IgogICAgICAgICAgICBsYWJlbCAgICJGYWtlIENhdXN0aWNzIgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJmYWtlY2F1c3RpY3NlbmFibGVkIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImZha2VjYXVzdGljc3RyYW5zbWl0IgogICAgICAgICAgICAgICAgbGFiZWwgICAiVHJhbnNtaXNzaW9uIFRpbnQiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGZha2VjYXVzdGljc2VuYWJsZWQgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImZha2VjYXVzdGljc3NoYWRvdyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNoYWRvdyBDb250b3VyIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBmYWtlY2F1c3RpY3NlbmFibGVkID09IDAgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJmYWtlY2F1c3RpY3NvcGFjaXR5IgogICAgICAgICAgICAgICAgbGFiZWwgICAiU2hhZG93IE9wYWNpdHkiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGZha2VjYXVzdGljc2VuYWJsZWQgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIxNyIKICAgICAgICAgICAgbGFiZWwgICAiTWFza2luZyIKCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYWxwaGFibGVuZG1vZGUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJBbHBoYSBNb2RlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiYmxlbmQiIH0KICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJibGVuZCIgICAgICJCbGVuZCIKICAgICAgICAgICAgICAgICAgICAibWFzayIgICAgICAiTWFzayIKICAgICAgICAgICAgICAgICAgICAib3BhcXVlIiAgICAiT3BhcXVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfYWxwaGFfbW9kZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYWxwaGFjdXRvZmYiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJBbHBoYSBDdXRvZmYiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAuNSIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgYWxwaGFibGVuZG1vZGUgIT0gbWFzayB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9hbHBoYV9jdXRvZmYiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CgogICAgZ3JvdXAgewogICAgICAgIG5hbWUgICAgImRpZmZ1c2VfZm9sZGVyXzE1XzIiCiAgICAgICAgbGFiZWwgICAiVGV4dHVyZXMiCgogICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyNTQiCiAgICAgICAgICAgIGxhYmVsICAgIkJhc2UgQ29sb3IiCiAgICAgICAgICAgIGdyb3VwdGFnIHsgImdyb3VwX3R5cGUiICJzaW1wbGUiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZWNvbG9yX3VzZVRleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJVc2UgVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlmZl9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfdXNlX3RleDEiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJhc2Vjb2xvcl90ZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW1hZ2UKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaWZmX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBiYXNlY29sb3JfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9zcGVjbWFwIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfdGV4MSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZWNvbG9yX3RleHR1cmVJbnRlbnNpdHkiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUaW50IEludGVuc2l0eSIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlmZl9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgYmFzZWNvbG9yX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJhc2Vjb2xvcl90ZXh0dXJlV3JhcCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIldyYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpZmZfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGJhc2Vjb2xvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJyZXBlYXQiICAgICJSZXBlYXQiCiAgICAgICAgICAgICAgICAgICAgInN0cmVhayIgICAgIlN0cmVhayIKICAgICAgICAgICAgICAgICAgICAiZGVjYWwiICAgICAiRGVjYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF90ZXhfdndyYXAxIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfdGV4X3dyYXAxIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlY29sb3JfdGV4dHVyZUNvbG9yU3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJhdXRvIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaWZmX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBiYXNlY29sb3JfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICBbICJlY2hvIGBweXRob25leHBycyhcIl9faW1wb3J0X18oJ3Rvb2x1dGlscycpLm9jaW9Db2xvclNwYWNlTWVudShpbmNsdWRlX3JvbGVzPUZhbHNlLGV4dHJhX2Nob2ljZXM9WydhdXRvJywnQXV0b21hdGljJywnbGluZWFyJywnTGluZWFyJywnc1JHQicsJ3NSR0InLCdyZWM3MDknLCdSZWMgNzA5JywncmF3JywnUmF3JywnX3NlcGFyYXRvcl8nLCdfc2VwYXJhdG9yJ10pXCIpYCIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlY29sb3JfdXNlVGV4dHVyZUFscGhhIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFRleHR1cmUgQWxwaGEiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpZmZfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGJhc2Vjb2xvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3VzZV9kaWZmdXNlX21hcF9hbHBoYSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cHNpbXBsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjEiCiAgICAgICAgICAgIGxhYmVsICAgIklPUiIKCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiaW9yX3VzZVRleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJVc2UgVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJpb3JfdGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGltYWdlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgaW9yX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJpb3JfbW9ub0NoYW5uZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJDaGFubmVsIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBpb3JfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIkx1bWluYW5jZSIKICAgICAgICAgICAgICAgICAgICAiMSIgIlJlZCIKICAgICAgICAgICAgICAgICAgICAiMiIgIkdyZWVuIgogICAgICAgICAgICAgICAgICAgICIzIiAiQmx1ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiaW9yX3RleHR1cmVXcmFwIgogICAgICAgICAgICAgICAgbGFiZWwgICAiV3JhcCIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGlvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJyZXBlYXQiICAgICJSZXBlYXQiCiAgICAgICAgICAgICAgICAgICAgInN0cmVhayIgICAgIlN0cmVhayIKICAgICAgICAgICAgICAgICAgICAiZGVjYWwiICAgICAiRGVjYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImlvcl90ZXh0dXJlQ29sb3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImxpbmVhciIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgaW9yX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgWyAiZWNobyBgcHl0aG9uZXhwcnMoXCJfX2ltcG9ydF9fKCd0b29sdXRpbHMnKS5vY2lvQ29sb3JTcGFjZU1lbnUoaW5jbHVkZV9yb2xlcz1GYWxzZSxleHRyYV9jaG9pY2VzPVsnYXV0bycsJ0F1dG9tYXRpYycsJ2xpbmVhcicsJ0xpbmVhcicsJ3NSR0InLCdzUkdCJywncmVjNzA5JywnUmVjIDcwOScsJ3JhdycsJ1JhdycsJ19zZXBhcmF0b3JfJywnX3NlcGFyYXRvciddKVwiKWAiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cHNpbXBsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjIyNyIKICAgICAgICAgICAgbGFiZWwgICAiUm91Z2huZXNzIgogICAgICAgICAgICBncm91cHRhZyB7ICJncm91cF90eXBlIiAic2ltcGxlIiB9CgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInJvdWdoX3VzZVRleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJVc2UgVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfdXNlX3JvdWdobWFwIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJyb3VnaF90ZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW1hZ2UKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyByb3VnaF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3JvdWdobWFwIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJyb3VnaF9tb25vQ2hhbm5lbCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkNoYW5uZWwiCiAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHJvdWdoX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIjAiICJMdW1pbmFuY2UiCiAgICAgICAgICAgICAgICAgICAgIjEiICJSZWQiCiAgICAgICAgICAgICAgICAgICAgIjIiICJHcmVlbiIKICAgICAgICAgICAgICAgICAgICAiMyIgIkJsdWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9yb3VnaG1hcF9jb21wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJyb3VnaF90ZXh0dXJlV3JhcCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIldyYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAicmVwZWF0IiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyByb3VnaF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJyZXBlYXQiICAgICJSZXBlYXQiCiAgICAgICAgICAgICAgICAgICAgInN0cmVhayIgICAgIlN0cmVhayIKICAgICAgICAgICAgICAgICAgICAiZGVjYWwiICAgICAiRGVjYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInJvdWdoX3RleHR1cmVDb2xvclNwYWNlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU291cmNlIENvbG9yIFNwYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAibGluZWFyIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyByb3VnaF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgIFsgImVjaG8gYHB5dGhvbmV4cHJzKFwiX19pbXBvcnRfXygndG9vbHV0aWxzJykub2Npb0NvbG9yU3BhY2VNZW51KGluY2x1ZGVfcm9sZXM9RmFsc2UsZXh0cmFfY2hvaWNlcz1bJ2F1dG8nLCdBdXRvbWF0aWMnLCdsaW5lYXInLCdMaW5lYXInLCdzUkdCJywnc1JHQicsJ3JlYzcwOScsJ1JlYyA3MDknLCdyYXcnLCdSYXcnLCdfc2VwYXJhdG9yXycsJ19zZXBhcmF0b3InXSlcIilgIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIyMjgiCiAgICAgICAgICAgIGxhYmVsICAgIkFuaXNvdHJvcHkiCiAgICAgICAgICAgIGdyb3VwdGFnIHsgImdyb3VwX3R5cGUiICJzaW1wbGUiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYW5pc29fdXNlVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImFuaXNvX3RleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbWFnZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGFuaXNvX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJhbmlzb19tb25vQ2hhbm5lbCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkNoYW5uZWwiCiAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGFuaXNvX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIjAiICJMdW1pbmFuY2UiCiAgICAgICAgICAgICAgICAgICAgIjEiICJSZWQiCiAgICAgICAgICAgICAgICAgICAgIjIiICJHcmVlbiIKICAgICAgICAgICAgICAgICAgICAiMyIgIkJsdWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImFuaXNvX3RleHR1cmVXcmFwIgogICAgICAgICAgICAgICAgbGFiZWwgICAiV3JhcCIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGFuaXNvX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgInJlcGVhdCIgICAgIlJlcGVhdCIKICAgICAgICAgICAgICAgICAgICAic3RyZWFrIiAgICAiU3RyZWFrIgogICAgICAgICAgICAgICAgICAgICJkZWNhbCIgICAgICJEZWNhbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYW5pc29fdGV4dHVyZUNvbG9yU3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJsaW5lYXIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGFuaXNvX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgWyAiZWNobyBgcHl0aG9uZXhwcnMoXCJfX2ltcG9ydF9fKCd0b29sdXRpbHMnKS5vY2lvQ29sb3JTcGFjZU1lbnUoaW5jbHVkZV9yb2xlcz1GYWxzZSxleHRyYV9jaG9pY2VzPVsnYXV0bycsJ0F1dG9tYXRpYycsJ2xpbmVhcicsJ0xpbmVhcicsJ3NSR0InLCdzUkdCJywncmVjNzA5JywnUmVjIDcwOScsJ3JhdycsJ1JhdycsJ19zZXBhcmF0b3JfJywnX3NlcGFyYXRvciddKVwiKWAiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cHNpbXBsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjIyOSIKICAgICAgICAgICAgbGFiZWwgICAiQW5pc290cm9weSBEaXJlY3Rpb24iCiAgICAgICAgICAgIGdyb3VwdGFnIHsgImdyb3VwX3R5cGUiICJzaW1wbGUiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYW5pc29kaXJfdXNlVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgInB5dGhvbiAtYyAnaG91LnBobSgpLnRvZ2dsZV9hbmlzb2Rpcl90ZXh0dXJlKGhvdS5wd2QoKSknIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImFuaXNvZGlyX3RleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbWFnZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGFuaXNvZGlyX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJhbmlzb2Rpcl9tb25vQ2hhbm5lbCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkNoYW5uZWwiCiAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGFuaXNvZGlyX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIjAiICJMdW1pbmFuY2UiCiAgICAgICAgICAgICAgICAgICAgIjEiICJSZWQiCiAgICAgICAgICAgICAgICAgICAgIjIiICJHcmVlbiIKICAgICAgICAgICAgICAgICAgICAiMyIgIkJsdWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImFuaXNvZGlyX3RleHR1cmVXcmFwIgogICAgICAgICAgICAgICAgbGFiZWwgICAiV3JhcCIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGFuaXNvZGlyX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgInJlcGVhdCIgICAgIlJlcGVhdCIKICAgICAgICAgICAgICAgICAgICAic3RyZWFrIiAgICAiU3RyZWFrIgogICAgICAgICAgICAgICAgICAgICJkZWNhbCIgICAgICJEZWNhbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYW5pc29kaXJfdGV4dHVyZUNvbG9yU3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJsaW5lYXIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGFuaXNvZGlyX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgWyAiZWNobyBgcHl0aG9uZXhwcnMoXCJfX2ltcG9ydF9fKCd0b29sdXRpbHMnKS5vY2lvQ29sb3JTcGFjZU1lbnUoaW5jbHVkZV9yb2xlcz1GYWxzZSxleHRyYV9jaG9pY2VzPVsnYXV0bycsJ0F1dG9tYXRpYycsJ2xpbmVhcicsJ0xpbmVhcicsJ3NSR0InLCdzUkdCJywncmVjNzA5JywnUmVjIDcwOScsJ3JhdycsJ1JhdycsJ19zZXBhcmF0b3JfJywnX3NlcGFyYXRvciddKVwiKWAiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJhbmlzb2Rpcl90ZXh0dXJlRmlsdGVyIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRmlsdGVyIFR5cGUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJwb2ludCIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgYW5pc29kaXJfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiYm94IiAgICAgICAiQm94IgogICAgICAgICAgICAgICAgICAgICJnYXVzcyIgICAgICJHYXVzc2lhbiIKICAgICAgICAgICAgICAgICAgICAiYmFydGxldHQiICAiQmFydGxldHQvVHJpYW5ndWxhciIKICAgICAgICAgICAgICAgICAgICAic2luYyIgICAgICAiU2luYyBTaGFycGVuaW5nIgogICAgICAgICAgICAgICAgICAgICJoYW5uaW5nIiAgICJIYW5uaW5nIgogICAgICAgICAgICAgICAgICAgICJibGFja21hbiIgICJCbGFja21hbiIKICAgICAgICAgICAgICAgICAgICAiY2F0cm9tIiAgICAiQ2F0bXVsbC1Sb20iCiAgICAgICAgICAgICAgICAgICAgIm1pdGNoZWxsIiAgIk1pdGNoZWxsIgogICAgICAgICAgICAgICAgICAgICJwb2ludCIgICAgICJQb2ludCAoTm8gRmlsdGVyKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cHNpbXBsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjU1IgogICAgICAgICAgICBsYWJlbCAgICJNZXRhbGxpYyIKICAgICAgICAgICAgZ3JvdXB0YWcgeyAiZ3JvdXBfdHlwZSIgInNpbXBsZSIgfQoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJtZXRhbGxpY191c2VUZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3VzZV9tZXRhbGxpY21hcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibWV0YWxsaWNfdGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGltYWdlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgbWV0YWxsaWNfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9tZXRhbGxpY21hcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibWV0YWxsaWNfbW9ub0NoYW5uZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJDaGFubmVsIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBtZXRhbGxpY191c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICIwIiAiTHVtaW5hbmNlIgogICAgICAgICAgICAgICAgICAgICIxIiAiUmVkIgogICAgICAgICAgICAgICAgICAgICIyIiAiR3JlZW4iCiAgICAgICAgICAgICAgICAgICAgIjMiICJCbHVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfbWV0YWxsaWNtYXBfY29tcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibWV0YWxsaWNfdGV4dHVyZVdyYXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXcmFwIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInJlcGVhdCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgbWV0YWxsaWNfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAicmVwZWF0IiAgICAiUmVwZWF0IgogICAgICAgICAgICAgICAgICAgICJzdHJlYWsiICAgICJTdHJlYWsiCiAgICAgICAgICAgICAgICAgICAgImRlY2FsIiAgICAgIkRlY2FsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJtZXRhbGxpY190ZXh0dXJlQ29sb3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImxpbmVhciIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgbWV0YWxsaWNfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICBbICJlY2hvIGBweXRob25leHBycyhcIl9faW1wb3J0X18oJ3Rvb2x1dGlscycpLm9jaW9Db2xvclNwYWNlTWVudShpbmNsdWRlX3JvbGVzPUZhbHNlLGV4dHJhX2Nob2ljZXM9WydhdXRvJywnQXV0b21hdGljJywnbGluZWFyJywnTGluZWFyJywnc1JHQicsJ3NSR0InLCdyZWM3MDknLCdSZWMgNzA5JywncmF3JywnUmF3JywnX3NlcGFyYXRvcl8nLCdfc2VwYXJhdG9yJ10pXCIpYCIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyMTYiCiAgICAgICAgICAgIGxhYmVsICAgIlJlZmxlY3Rpdml0eSIKCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicmVmbGVjdF91c2VUZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3VzZV9yZWZsZWN0X21hcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicmVmbGVjdF90ZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW1hZ2UKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyByZWZsZWN0X3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfcmVmbGVjdF9tYXAiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInJlZmxlY3RfbW9ub0NoYW5uZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJDaGFubmVsIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyByZWZsZWN0X3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIjAiICJMdW1pbmFuY2UiCiAgICAgICAgICAgICAgICAgICAgIjEiICJSZWQiCiAgICAgICAgICAgICAgICAgICAgIjIiICJHcmVlbiIKICAgICAgICAgICAgICAgICAgICAiMyIgIkJsdWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9yZWZsZWN0X21hcF9jb21wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJyZWZsZWN0X3RleHR1cmVXcmFwIgogICAgICAgICAgICAgICAgbGFiZWwgICAiV3JhcCIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHJlZmxlY3RfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAicmVwZWF0IiAgICAiUmVwZWF0IgogICAgICAgICAgICAgICAgICAgICJzdHJlYWsiICAgICJTdHJlYWsiCiAgICAgICAgICAgICAgICAgICAgImRlY2FsIiAgICAgIkRlY2FsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJyZWZsZWN0X3RleHR1cmVDb2xvclNwYWNlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU291cmNlIENvbG9yIFNwYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAibGluZWFyIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyByZWZsZWN0X3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgWyAiZWNobyBgcHl0aG9uZXhwcnMoXCJfX2ltcG9ydF9fKCd0b29sdXRpbHMnKS5vY2lvQ29sb3JTcGFjZU1lbnUoaW5jbHVkZV9yb2xlcz1GYWxzZSxleHRyYV9jaG9pY2VzPVsnYXV0bycsJ0F1dG9tYXRpYycsJ2xpbmVhcicsJ0xpbmVhcicsJ3NSR0InLCdzUkdCJywncmVjNzA5JywnUmVjIDcwOScsJ3JhdycsJ1JhdycsJ19zZXBhcmF0b3JfJywnX3NlcGFyYXRvciddKVwiKWAiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cHNpbXBsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjIyNiIKICAgICAgICAgICAgbGFiZWwgICAiUmVmbGVjdCBUaW50IgogICAgICAgICAgICBncm91cHRhZyB7ICJncm91cF90eXBlIiAic2ltcGxlIiB9CgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInJlZmxlY3R0aW50X3VzZVRleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJVc2UgVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJyZWZsZWN0dGludF90ZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW1hZ2UKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyByZWZsZWN0dGludF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicmVmbGVjdHRpbnRfbW9ub0NoYW5uZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJDaGFubmVsIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyByZWZsZWN0dGludF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICIwIiAiTHVtaW5hbmNlIgogICAgICAgICAgICAgICAgICAgICIxIiAiUmVkIgogICAgICAgICAgICAgICAgICAgICIyIiAiR3JlZW4iCiAgICAgICAgICAgICAgICAgICAgIjMiICJCbHVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJyZWZsZWN0dGludF90ZXh0dXJlV3JhcCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIldyYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAicmVwZWF0IiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyByZWZsZWN0dGludF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJyZXBlYXQiICAgICJSZXBlYXQiCiAgICAgICAgICAgICAgICAgICAgInN0cmVhayIgICAgIlN0cmVhayIKICAgICAgICAgICAgICAgICAgICAiZGVjYWwiICAgICAiRGVjYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInJlZmxlY3R0aW50X3RleHR1cmVDb2xvclNwYWNlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU291cmNlIENvbG9yIFNwYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAibGluZWFyIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyByZWZsZWN0dGludF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgIFsgImVjaG8gYHB5dGhvbmV4cHJzKFwiX19pbXBvcnRfXygndG9vbHV0aWxzJykub2Npb0NvbG9yU3BhY2VNZW51KGluY2x1ZGVfcm9sZXM9RmFsc2UsZXh0cmFfY2hvaWNlcz1bJ2F1dG8nLCdBdXRvbWF0aWMnLCdsaW5lYXInLCdMaW5lYXInLCdzUkdCJywnc1JHQicsJ3JlYzcwOScsJ1JlYyA3MDknLCdyYXcnLCdSYXcnLCdfc2VwYXJhdG9yXycsJ19zZXBhcmF0b3InXSlcIilgIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIyMzMiCiAgICAgICAgICAgIGxhYmVsICAgIkNvYXQiCiAgICAgICAgICAgIGdyb3VwdGFnIHsgImdyb3VwX3R5cGUiICJzaW1wbGUiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdF91c2VUZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3VzZV9jb2F0X2ludGVuc2l0eV9tYXAiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXRfdGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGltYWdlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgY29hdF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2NvYXRfaW50ZW5zaXR5X21hcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdF9tb25vQ2hhbm5lbCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkNoYW5uZWwiCiAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGNvYXRfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIkx1bWluYW5jZSIKICAgICAgICAgICAgICAgICAgICAiMSIgIlJlZCIKICAgICAgICAgICAgICAgICAgICAiMiIgIkdyZWVuIgogICAgICAgICAgICAgICAgICAgICIzIiAiQmx1ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2NvYXRfaW50ZW5zaXR5X2NvbXAiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXRfdGV4dHVyZVdyYXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXcmFwIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInJlcGVhdCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgY29hdF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJyZXBlYXQiICAgICJSZXBlYXQiCiAgICAgICAgICAgICAgICAgICAgInN0cmVhayIgICAgIlN0cmVhayIKICAgICAgICAgICAgICAgICAgICAiZGVjYWwiICAgICAiRGVjYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXRfdGV4dHVyZUNvbG9yU3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJsaW5lYXIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGNvYXRfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICBbICJlY2hvIGBweXRob25leHBycyhcIl9faW1wb3J0X18oJ3Rvb2x1dGlscycpLm9jaW9Db2xvclNwYWNlTWVudShpbmNsdWRlX3JvbGVzPUZhbHNlLGV4dHJhX2Nob2ljZXM9WydhdXRvJywnQXV0b21hdGljJywnbGluZWFyJywnTGluZWFyJywnc1JHQicsJ3NSR0InLCdyZWM3MDknLCdSZWMgNzA5JywncmF3JywnUmF3JywnX3NlcGFyYXRvcl8nLCdfc2VwYXJhdG9yJ10pXCIpYCIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyMjM0IgogICAgICAgICAgICBsYWJlbCAgICJDb2F0IFJvdWdobmVzcyIKICAgICAgICAgICAgZ3JvdXB0YWcgeyAiZ3JvdXBfdHlwZSIgInNpbXBsZSIgfQoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0cm91Z2hfdXNlVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF91c2VfY29hdF9yb3VnaG5lc3NfbWFwIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0cm91Z2hfdGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGltYWdlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgY29hdHJvdWdoX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfY29hdF9yb3VnaG5lc3NfbWFwIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0cm91Z2hfbW9ub0NoYW5uZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJDaGFubmVsIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBjb2F0cm91Z2hfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIkx1bWluYW5jZSIKICAgICAgICAgICAgICAgICAgICAiMSIgIlJlZCIKICAgICAgICAgICAgICAgICAgICAiMiIgIkdyZWVuIgogICAgICAgICAgICAgICAgICAgICIzIiAiQmx1ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2NvYXRfcm91Z2huZXNzX2NvbXAiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXRyb3VnaF90ZXh0dXJlV3JhcCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIldyYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAicmVwZWF0IiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBjb2F0cm91Z2hfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAicmVwZWF0IiAgICAiUmVwZWF0IgogICAgICAgICAgICAgICAgICAgICJzdHJlYWsiICAgICJTdHJlYWsiCiAgICAgICAgICAgICAgICAgICAgImRlY2FsIiAgICAgIkRlY2FsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0cm91Z2hfdGV4dHVyZUNvbG9yU3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJsaW5lYXIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGNvYXRyb3VnaF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgIFsgImVjaG8gYHB5dGhvbmV4cHJzKFwiX19pbXBvcnRfXygndG9vbHV0aWxzJykub2Npb0NvbG9yU3BhY2VNZW51KGluY2x1ZGVfcm9sZXM9RmFsc2UsZXh0cmFfY2hvaWNlcz1bJ2F1dG8nLCdBdXRvbWF0aWMnLCdsaW5lYXInLCdMaW5lYXInLCdzUkdCJywnc1JHQicsJ3JlYzcwOScsJ1JlYyA3MDknLCdyYXcnLCdSYXcnLCdfc2VwYXJhdG9yXycsJ19zZXBhcmF0b3InXSlcIilgIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIyIgogICAgICAgICAgICBsYWJlbCAgICJUcmFuc3BhcmVuY3kiCgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInRyYW5zcGFyZW5jeV91c2VUZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAidHJhbnNwYXJlbmN5X3RleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbWFnZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHRyYW5zcGFyZW5jeV91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAidHJhbnNwYXJlbmN5X21vbm9DaGFubmVsIgogICAgICAgICAgICAgICAgbGFiZWwgICAiQ2hhbm5lbCIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgdHJhbnNwYXJlbmN5X3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIjAiICJMdW1pbmFuY2UiCiAgICAgICAgICAgICAgICAgICAgIjEiICJSZWQiCiAgICAgICAgICAgICAgICAgICAgIjIiICJHcmVlbiIKICAgICAgICAgICAgICAgICAgICAiMyIgIkJsdWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInRyYW5zcGFyZW5jeV90ZXh0dXJlV3JhcCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIldyYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAicmVwZWF0IiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyB0cmFuc3BhcmVuY3lfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAicmVwZWF0IiAgICAiUmVwZWF0IgogICAgICAgICAgICAgICAgICAgICJzdHJlYWsiICAgICJTdHJlYWsiCiAgICAgICAgICAgICAgICAgICAgImRlY2FsIiAgICAgIkRlY2FsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJ0cmFuc3BhcmVuY3lfdGV4dHVyZUNvbG9yU3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJsaW5lYXIiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHRyYW5zcGFyZW5jeV91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgIFsgImVjaG8gYHB5dGhvbmV4cHJzKFwiX19pbXBvcnRfXygndG9vbHV0aWxzJykub2Npb0NvbG9yU3BhY2VNZW51KGluY2x1ZGVfcm9sZXM9RmFsc2UsZXh0cmFfY2hvaWNlcz1bJ2F1dG8nLCdBdXRvbWF0aWMnLCdsaW5lYXInLCdMaW5lYXInLCdzUkdCJywnc1JHQicsJ3JlYzcwOScsJ1JlYyA3MDknLCdyYXcnLCdSYXcnLCdfc2VwYXJhdG9yXycsJ19zZXBhcmF0b3InXSlcIilgIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXI1IgogICAgICAgICAgICBsYWJlbCAgICJUcmFuc21pc3Npb24gQ29sb3IiCgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInRyYW5zY29sb3JfdXNlVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBkaWZmX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInRyYW5zY29sb3JfdGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGltYWdlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlmZl9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgdHJhbnNjb2xvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAidHJhbnNjb2xvcl90ZXh0dXJlSW50ZW5zaXR5IgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGludCBJbnRlbnNpdHkiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpZmZfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHRyYW5zY29sb3JfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAyIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAidHJhbnNjb2xvcl90ZXh0dXJlV3JhcCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIldyYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGRpZmZfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHRyYW5zY29sb3JfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAicmVwZWF0IiAgICAiUmVwZWF0IgogICAgICAgICAgICAgICAgICAgICJzdHJlYWsiICAgICJTdHJlYWsiCiAgICAgICAgICAgICAgICAgICAgImRlY2FsIiAgICAgIkRlY2FsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJ0cmFuc2NvbG9yX3RleHR1cmVDb2xvclNwYWNlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU291cmNlIENvbG9yIFNwYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiYXV0byIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZGlmZl9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgdHJhbnNjb2xvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgIFsgImVjaG8gYHB5dGhvbmV4cHJzKFwiX19pbXBvcnRfXygndG9vbHV0aWxzJykub2Npb0NvbG9yU3BhY2VNZW51KGluY2x1ZGVfcm9sZXM9RmFsc2UsZXh0cmFfY2hvaWNlcz1bJ2F1dG8nLCdBdXRvbWF0aWMnLCdsaW5lYXInLCdMaW5lYXInLCdzUkdCJywnc1JHQicsJ3JlYzcwOScsJ1JlYyA3MDknLCdyYXcnLCdSYXcnLCdfc2VwYXJhdG9yXycsJ19zZXBhcmF0b3InXSlcIilgIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXI1XzEiCiAgICAgICAgICAgIGxhYmVsICAgIkF0IERpc3RhbmNlIgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJ0cmFuc2Rpc3RfdXNlVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInRyYW5zZGlzdF90ZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW1hZ2UKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyB0cmFuc2Rpc3RfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInRyYW5zZGlzdF9tb25vQ2hhbm5lbCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkNoYW5uZWwiCiAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHRyYW5zZGlzdF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICIwIiAiTHVtaW5hbmNlIgogICAgICAgICAgICAgICAgICAgICIxIiAiUmVkIgogICAgICAgICAgICAgICAgICAgICIyIiAiR3JlZW4iCiAgICAgICAgICAgICAgICAgICAgIjMiICJCbHVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJ0cmFuc2Rpc3RfdGV4dHVyZVdyYXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXcmFwIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInJlcGVhdCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgdHJhbnNkaXN0X3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgInJlcGVhdCIgICAgIlJlcGVhdCIKICAgICAgICAgICAgICAgICAgICAic3RyZWFrIiAgICAiU3RyZWFrIgogICAgICAgICAgICAgICAgICAgICJkZWNhbCIgICAgICJEZWNhbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAidHJhbnNkaXN0X3RleHR1cmVDb2xvclNwYWNlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU291cmNlIENvbG9yIFNwYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAibGluZWFyIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyB0cmFuc2Rpc3RfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICBbICJlY2hvIGBweXRob25leHBycyhcIl9faW1wb3J0X18oJ3Rvb2x1dGlscycpLm9jaW9Db2xvclNwYWNlTWVudShpbmNsdWRlX3JvbGVzPUZhbHNlLGV4dHJhX2Nob2ljZXM9WydhdXRvJywnQXV0b21hdGljJywnbGluZWFyJywnTGluZWFyJywnc1JHQicsJ3NSR0InLCdyZWM3MDknLCdSZWMgNzA5JywncmF3JywnUmF3JywnX3NlcGFyYXRvcl8nLCdfc2VwYXJhdG9yJ10pXCIpYCIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyNV8yIgogICAgICAgICAgICBsYWJlbCAgICJEaXNwZXJzaW9uIgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJkaXNwZXJzaW9uX3VzZVRleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJVc2UgVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJkaXNwZXJzaW9uX3RleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbWFnZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3BlcnNpb25fdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BlcnNpb25fbW9ub0NoYW5uZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJDaGFubmVsIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBkaXNwZXJzaW9uX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIjAiICJMdW1pbmFuY2UiCiAgICAgICAgICAgICAgICAgICAgIjEiICJSZWQiCiAgICAgICAgICAgICAgICAgICAgIjIiICJHcmVlbiIKICAgICAgICAgICAgICAgICAgICAiMyIgIkJsdWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BlcnNpb25fdGV4dHVyZVdyYXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXcmFwIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInJlcGVhdCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzcGVyc2lvbl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJyZXBlYXQiICAgICJSZXBlYXQiCiAgICAgICAgICAgICAgICAgICAgInN0cmVhayIgICAgIlN0cmVhayIKICAgICAgICAgICAgICAgICAgICAiZGVjYWwiICAgICAiRGVjYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BlcnNpb25fdGV4dHVyZUNvbG9yU3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJsaW5lYXIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3BlcnNpb25fdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICBbICJlY2hvIGBweXRob25leHBycyhcIl9faW1wb3J0X18oJ3Rvb2x1dGlscycpLm9jaW9Db2xvclNwYWNlTWVudShpbmNsdWRlX3JvbGVzPUZhbHNlLGV4dHJhX2Nob2ljZXM9WydhdXRvJywnQXV0b21hdGljJywnbGluZWFyJywnTGluZWFyJywnc1JHQicsJ3NSR0InLCdyZWM3MDknLCdSZWMgNzA5JywncmF3JywnUmF3JywnX3NlcGFyYXRvcl8nLCdfc2VwYXJhdG9yJ10pXCIpYCIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyMjMwIgogICAgICAgICAgICBsYWJlbCAgICJTdWJzdXJmYWNlIgogICAgICAgICAgICBncm91cHRhZyB7ICJncm91cF90eXBlIiAic2ltcGxlIiB9CgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNzc191c2VUZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3NzX3RleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbWFnZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHNzc191c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3NzX21vbm9DaGFubmVsIgogICAgICAgICAgICAgICAgbGFiZWwgICAiQ2hhbm5lbCIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc3NzX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIjAiICJMdW1pbmFuY2UiCiAgICAgICAgICAgICAgICAgICAgIjEiICJSZWQiCiAgICAgICAgICAgICAgICAgICAgIjIiICJHcmVlbiIKICAgICAgICAgICAgICAgICAgICAiMyIgIkJsdWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNzc190ZXh0dXJlV3JhcCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIldyYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAicmVwZWF0IiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBzc3NfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAicmVwZWF0IiAgICAiUmVwZWF0IgogICAgICAgICAgICAgICAgICAgICJzdHJlYWsiICAgICJTdHJlYWsiCiAgICAgICAgICAgICAgICAgICAgImRlY2FsIiAgICAgIkRlY2FsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzc3NfdGV4dHVyZUNvbG9yU3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJsaW5lYXIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHNzc191c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgIFsgImVjaG8gYHB5dGhvbmV4cHJzKFwiX19pbXBvcnRfXygndG9vbHV0aWxzJykub2Npb0NvbG9yU3BhY2VNZW51KGluY2x1ZGVfcm9sZXM9RmFsc2UsZXh0cmFfY2hvaWNlcz1bJ2F1dG8nLCdBdXRvbWF0aWMnLCdsaW5lYXInLCdMaW5lYXInLCdzUkdCJywnc1JHQicsJ3JlYzcwOScsJ1JlYyA3MDknLCdyYXcnLCdSYXcnLCdfc2VwYXJhdG9yXycsJ19zZXBhcmF0b3InXSlcIilgIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIzIgogICAgICAgICAgICBsYWJlbCAgICJTdWJzdXJmYWNlIFNjYXR0ZXJpbmcgRGlzdGFuY2UiCgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNzc2Rpc3RfdXNlVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNzc2Rpc3RfdGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGltYWdlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc3NzZGlzdF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3NzZGlzdF9tb25vQ2hhbm5lbCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkNoYW5uZWwiCiAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHNzc2Rpc3RfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIkx1bWluYW5jZSIKICAgICAgICAgICAgICAgICAgICAiMSIgIlJlZCIKICAgICAgICAgICAgICAgICAgICAiMiIgIkdyZWVuIgogICAgICAgICAgICAgICAgICAgICIzIiAiQmx1ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3NzZGlzdF90ZXh0dXJlV3JhcCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIldyYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAicmVwZWF0IiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBzc3NkaXN0X3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgInJlcGVhdCIgICAgIlJlcGVhdCIKICAgICAgICAgICAgICAgICAgICAic3RyZWFrIiAgICAiU3RyZWFrIgogICAgICAgICAgICAgICAgICAgICJkZWNhbCIgICAgICJEZWNhbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3NzZGlzdF90ZXh0dXJlQ29sb3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImxpbmVhciIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc3NzZGlzdF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgIFsgImVjaG8gYHB5dGhvbmV4cHJzKFwiX19pbXBvcnRfXygndG9vbHV0aWxzJykub2Npb0NvbG9yU3BhY2VNZW51KGluY2x1ZGVfcm9sZXM9RmFsc2UsZXh0cmFfY2hvaWNlcz1bJ2F1dG8nLCdBdXRvbWF0aWMnLCdsaW5lYXInLCdMaW5lYXInLCdzUkdCJywnc1JHQicsJ3JlYzcwOScsJ1JlYyA3MDknLCdyYXcnLCdSYXcnLCdfc2VwYXJhdG9yXycsJ19zZXBhcmF0b3InXSlcIilgIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIzXzEiCiAgICAgICAgICAgIGxhYmVsICAgIlN1YnN1cmZhY2UgQ29sb3IiCgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNzc2NvbG9yX3VzZVRleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJVc2UgVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzc3Njb2xvcl90ZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW1hZ2UKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBzc3Njb2xvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3NzY29sb3JfdGV4dHVyZVdyYXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXcmFwIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInJlcGVhdCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc3NzY29sb3JfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAicmVwZWF0IiAgICAiUmVwZWF0IgogICAgICAgICAgICAgICAgICAgICJzdHJlYWsiICAgICJTdHJlYWsiCiAgICAgICAgICAgICAgICAgICAgImRlY2FsIiAgICAgIkRlY2FsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzc3Njb2xvcl90ZXh0dXJlQ29sb3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImxpbmVhciIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc3NzY29sb3JfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICBbICJlY2hvIGBweXRob25leHBycyhcIl9faW1wb3J0X18oJ3Rvb2x1dGlscycpLm9jaW9Db2xvclNwYWNlTWVudShpbmNsdWRlX3JvbGVzPUZhbHNlLGV4dHJhX2Nob2ljZXM9WydhdXRvJywnQXV0b21hdGljJywnbGluZWFyJywnTGluZWFyJywnc1JHQicsJ3NSR0InLCdyZWM3MDknLCdSZWMgNzA5JywncmF3JywnUmF3JywnX3NlcGFyYXRvcl8nLCdfc2VwYXJhdG9yJ10pXCIpYCIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyMjMxIgogICAgICAgICAgICBsYWJlbCAgICJTaGVlbiIKICAgICAgICAgICAgZ3JvdXB0YWcgeyAiZ3JvdXBfdHlwZSIgInNpbXBsZSIgfQoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzaGVlbl91c2VUZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic2hlZW5fdGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGltYWdlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc2hlZW5fdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNoZWVuX21vbm9DaGFubmVsIgogICAgICAgICAgICAgICAgbGFiZWwgICAiQ2hhbm5lbCIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc2hlZW5fdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIkx1bWluYW5jZSIKICAgICAgICAgICAgICAgICAgICAiMSIgIlJlZCIKICAgICAgICAgICAgICAgICAgICAiMiIgIkdyZWVuIgogICAgICAgICAgICAgICAgICAgICIzIiAiQmx1ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic2hlZW5fdGV4dHVyZVdyYXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXcmFwIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInJlcGVhdCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc2hlZW5fdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAicmVwZWF0IiAgICAiUmVwZWF0IgogICAgICAgICAgICAgICAgICAgICJzdHJlYWsiICAgICJTdHJlYWsiCiAgICAgICAgICAgICAgICAgICAgImRlY2FsIiAgICAgIkRlY2FsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzaGVlbl90ZXh0dXJlQ29sb3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImxpbmVhciIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc2hlZW5fdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICBbICJlY2hvIGBweXRob25leHBycyhcIl9faW1wb3J0X18oJ3Rvb2x1dGlscycpLm9jaW9Db2xvclNwYWNlTWVudShpbmNsdWRlX3JvbGVzPUZhbHNlLGV4dHJhX2Nob2ljZXM9WydhdXRvJywnQXV0b21hdGljJywnbGluZWFyJywnTGluZWFyJywnc1JHQicsJ3NSR0InLCdyZWM3MDknLCdSZWMgNzA5JywncmF3JywnUmF3JywnX3NlcGFyYXRvcl8nLCdfc2VwYXJhdG9yJ10pXCIpYCIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyMjMyIgogICAgICAgICAgICBsYWJlbCAgICJTaGVlbiBUaW50IgogICAgICAgICAgICBncm91cHRhZyB7ICJncm91cF90eXBlIiAic2ltcGxlIiB9CgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNoZWVudGludF91c2VUZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVXNlIFRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic2hlZW50aW50X3RleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJNYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIGltYWdlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IHsgcmVmbF9saWdodHMgPT0gMCByZWZsX29ianMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc2hlZW50aW50X3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzaGVlbnRpbnRfbW9ub0NoYW5uZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJDaGFubmVsIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyByZWZsX2VuYWJsZSA9PSAwIH0geyByZWZsX2xpZ2h0cyA9PSAwIHJlZmxfb2JqcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBzaGVlbnRpbnRfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIkx1bWluYW5jZSIKICAgICAgICAgICAgICAgICAgICAiMSIgIlJlZCIKICAgICAgICAgICAgICAgICAgICAiMiIgIkdyZWVuIgogICAgICAgICAgICAgICAgICAgICIzIiAiQmx1ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic2hlZW50aW50X3RleHR1cmVXcmFwIgogICAgICAgICAgICAgICAgbGFiZWwgICAiV3JhcCIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJlZmxfZW5hYmxlID09IDAgfSB7IHJlZmxfbGlnaHRzID09IDAgcmVmbF9vYmpzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IHNoZWVudGludF91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJyZXBlYXQiICAgICJSZXBlYXQiCiAgICAgICAgICAgICAgICAgICAgInN0cmVhayIgICAgIlN0cmVhayIKICAgICAgICAgICAgICAgICAgICAiZGVjYWwiICAgICAiRGVjYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNoZWVudGludF90ZXh0dXJlQ29sb3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImxpbmVhciIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgcmVmbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgc2hlZW50aW50X3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgWyAiZWNobyBgcHl0aG9uZXhwcnMoXCJfX2ltcG9ydF9fKCd0b29sdXRpbHMnKS5vY2lvQ29sb3JTcGFjZU1lbnUoaW5jbHVkZV9yb2xlcz1GYWxzZSxleHRyYV9jaG9pY2VzPVsnYXV0bycsJ0F1dG9tYXRpYycsJ2xpbmVhcicsJ0xpbmVhcicsJ3NSR0InLCdzUkdCJywncmVjNzA5JywnUmVjIDcwOScsJ3JhdycsJ1JhdycsJ19zZXBhcmF0b3JfJywnX3NlcGFyYXRvciddKVwiKWAiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cHNpbXBsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImRpZmZ1c2VfZm9sZGVyXzE0XzMiCiAgICAgICAgICAgIGxhYmVsICAgIkVtaXNzaW9uIgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJlbWl0Y29sb3JfdXNlVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF91c2VfZW1pc3Npb25tYXAiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVtaXRjb2xvcl90ZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW1hZ2UKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBlbWl0Y29sb3JfdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9lbWlzc2lvbm1hcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW1pdGNvbG9yX3RleHR1cmVJbnRlbnNpdHkiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUaW50IEludGVuc2l0eSIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgZW1pdGNvbG9yX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVtaXRjb2xvcl90ZXh0dXJlV3JhcCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIldyYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGVtaXRjb2xvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJyZXBlYXQiICAgICJSZXBlYXQiCiAgICAgICAgICAgICAgICAgICAgInN0cmVhayIgICAgIlN0cmVhayIKICAgICAgICAgICAgICAgICAgICAiZGVjYWwiICAgICAiRGVjYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVtaXRjb2xvcl90ZXh0dXJlQ29sb3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInJlcGVhdCIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgZW1pdGNvbG9yX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgWyAiZWNobyBgcHl0aG9uZXhwcnMoXCJfX2ltcG9ydF9fKCd0b29sdXRpbHMnKS5vY2lvQ29sb3JTcGFjZU1lbnUoaW5jbHVkZV9yb2xlcz1GYWxzZSxleHRyYV9jaG9pY2VzPVsnYXV0bycsJ0F1dG9tYXRpYycsJ2xpbmVhcicsJ0xpbmVhcicsJ3NSR0InLCdzUkdCJywncmVjNzA5JywnUmVjIDcwOScsJ3JhdycsJ1JhdycsJ19zZXBhcmF0b3JfJywnX3NlcGFyYXRvciddKVwiKWAiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cHNpbXBsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjE0IgogICAgICAgICAgICBsYWJlbCAgICJPcGFjaXR5IgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJvcGFjY29sb3JfdXNlVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF91c2Vfb3BhY2l0eW1hcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAib3BhY2NvbG9yX3RleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbWFnZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IG9wYWNjb2xvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX29wYWNpdHltYXAiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgIm9wYWNjb2xvcl90ZXh0dXJlV3JhcCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIldyYXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IG9wYWNjb2xvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJyZXBlYXQiICAgICJSZXBlYXQiCiAgICAgICAgICAgICAgICAgICAgInN0cmVhayIgICAgIlN0cmVhayIKICAgICAgICAgICAgICAgICAgICAiZGVjYWwiICAgICAiRGVjYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgIm9wYWNjb2xvcl90ZXh0dXJlSW50ZW5zaXR5IgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGludCBJbnRlbnNpdHkiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IG9wYWNjb2xvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJvcGFjY29sb3JfdGV4dHVyZUNvbG9yU3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTb3VyY2UgQ29sb3IgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IG9wYWNjb2xvcl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgIFsgImVjaG8gYHB5dGhvbmV4cHJzKFwiX19pbXBvcnRfXygndG9vbHV0aWxzJykub2Npb0NvbG9yU3BhY2VNZW51KGluY2x1ZGVfcm9sZXM9RmFsc2UsZXh0cmFfY2hvaWNlcz1bJ2F1dG8nLCdBdXRvbWF0aWMnLCdsaW5lYXInLCdMaW5lYXInLCdzUkdCJywnc1JHQicsJ3JlYzcwOScsJ1JlYyA3MDknLCdyYXcnLCdSYXcnLCdfc2VwYXJhdG9yXycsJ19zZXBhcmF0b3InXSlcIilgIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIxOCIKICAgICAgICAgICAgbGFiZWwgICAiT2NjbHVzaW9uIgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJvY2NsdXNpb25fdXNlVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVzZSBUZXh0dXJlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF91c2Vfb2NjbHVzaW9ubWFwIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJvY2NsdXNpb25fdGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGltYWdlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgb2NjbHVzaW9uX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfb2NjbHVzaW9ubWFwIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJvY2NsdXNpb25fdGV4dHVyZVdyYXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXcmFwIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAicmVwZWF0IiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBvY2NsdXNpb25fdXNlVGV4dHVyZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAicmVwZWF0IiAgICAiUmVwZWF0IgogICAgICAgICAgICAgICAgICAgICJzdHJlYWsiICAgICJTdHJlYWsiCiAgICAgICAgICAgICAgICAgICAgImRlY2FsIiAgICAgIkRlY2FsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfdGV4X3Z3cmFwMSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3RleF93cmFwMSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAib2NjbHVzaW9uX3RleHR1cmVJbnRlbnNpdHkiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUaW50IEludGVuc2l0eSIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgb2NjbHVzaW9uX3VzZVRleHR1cmUgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgIm9jY2x1c2lvbl90ZXh0dXJlQ29sb3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNvdXJjZSBDb2xvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImF1dG8iIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IG9jY2x1c2lvbl91c2VUZXh0dXJlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgIFsgImVjaG8gYHB5dGhvbmV4cHJzKFwiX19pbXBvcnRfXygndG9vbHV0aWxzJykub2Npb0NvbG9yU3BhY2VNZW51KGluY2x1ZGVfcm9sZXM9RmFsc2UsZXh0cmFfY2hvaWNlcz1bJ2F1dG8nLCdBdXRvbWF0aWMnLCdsaW5lYXInLCdMaW5lYXInLCdzUkdCJywnc1JHQicsJ3JlYzcwOScsJ1JlYyA3MDknLCdyYXcnLCdSYXcnLCdfc2VwYXJhdG9yXycsJ19zZXBhcmF0b3InXSlcIilgIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIyMzUiCiAgICAgICAgICAgIGxhYmVsICAgIlNhbXBsaW5nIgogICAgICAgICAgICBncm91cHRhZyB7ICJncm91cF90eXBlIiAic2ltcGxlIiB9CgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInN1cmZhY2VfdGV4dHVyZUZpbHRlciIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkZpbHRlciIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImNhdHJvbSIgfQogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgImJveCIgICAgICAgIkJveCIKICAgICAgICAgICAgICAgICAgICAiZ2F1c3MiICAgICAiR2F1c3NpYW4iCiAgICAgICAgICAgICAgICAgICAgImJhcnRsZXR0IiAgIkJhcnRsZXR0L1RyaWFuZ3VsYXIiCiAgICAgICAgICAgICAgICAgICAgInNpbmMiICAgICAgIlNpbmMgU2hhcnBlbmluZyIKICAgICAgICAgICAgICAgICAgICAiaGFubmluZyIgICAiSGFubmluZyIKICAgICAgICAgICAgICAgICAgICAiYmxhY2ttYW4iICAiQmxhY2ttYW4iCiAgICAgICAgICAgICAgICAgICAgImNhdHJvbSIgICAgIkNhdG11bGwtUm9tIgogICAgICAgICAgICAgICAgICAgICJtaXRjaGVsbCIgICJNaXRjaGVsbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3VyZmFjZV90ZXh0dXJlRmlsdGVyV2lkdGgiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJGaWx0ZXIgV2lkdGgiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDUgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQoKICAgIGdyb3VwIHsKICAgICAgICBuYW1lICAgICJkaWZmdXNlX2ZvbGRlcl8xNV8zIgogICAgICAgIGxhYmVsICAgIkJ1bXAgJiBOb3JtYWxzIgoKICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAicm91bmRlZEVkZ2VfZW5hYmxlIgogICAgICAgICAgICBsYWJlbCAgICJyb3VuZGVkRWRnZV9lbmFibGUiCiAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInJvdW5kZWRFZGdlX3JhZGl1cyIKICAgICAgICAgICAgbGFiZWwgICAiUm91bmQgRWRnZSBSYWRpdXMiCiAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgZGVmYXVsdCB7ICIwLjAxIiB9CiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJvdW5kZWRFZGdlX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgIHJhbmdlICAgeyAwIDAuMSB9CiAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJyb3VuZGVkRWRnZV9tb2RlIgogICAgICAgICAgICBsYWJlbCAgICJSb3VuZCBFZGdlIE1vZGUiCiAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICBoZWxwICAgICJFZGdlIHR5cGVzIHRvIHNtb290aC4iCiAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IHJvdW5kZWRFZGdlX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgImJvdGgiICAgICAgIkNvbmNhdmUgYW5kIENvbnZleCBFZGdlcyIKICAgICAgICAgICAgICAgICJjb25jYXZlIiAgICJDb25jYXZlIEVkZ2VzIgogICAgICAgICAgICAgICAgImNvbnZleCIgICAgIkNvbnZleCBFZGdlcyIKICAgICAgICAgICAgfQogICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgfQogICAgICAgIGdyb3VwIHsKICAgICAgICAgICAgbmFtZSAgICAic2hhZGluZ18xNiIKICAgICAgICAgICAgbGFiZWwgICAiQmFzZSIKCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZUJ1bXBBbmROb3JtYWxfZW5hYmxlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJhc2VCdW1wQW5kTm9ybWFsX3R5cGUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZXh0dXJlIFR5cGUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJub3JtYWwiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiYnVtcCIgICAgICAiQnVtcCIKICAgICAgICAgICAgICAgICAgICAibm9ybWFsIiAgICAiTm9ybWFsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlQnVtcF9jb2xvclNwYWNlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSBDb2xvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImxpbmVhciIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX3R5cGUgIT0gYnVtcCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgWyAiZWNobyBgcHl0aG9uZXhwcnMoXCJfX2ltcG9ydF9fKCd0b29sdXRpbHMnKS5vY2lvQ29sb3JTcGFjZU1lbnUoaW5jbHVkZV9yb2xlcz1GYWxzZSxleHRyYV9jaG9pY2VzPVsnYXV0bycsJ0F1dG9tYXRpYycsJ2xpbmVhcicsJ0xpbmVhcicsJ3NSR0InLCdzUkdCJywncmVjNzA5JywnUmVjIDcwOScsJ3JhdycsJ1JhdycsJ19zZXBhcmF0b3JfJywnX3NlcGFyYXRvciddKVwiKWAiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZUJ1bXBfYnVtcFNjYWxlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRWZmZWN0IFNjYWxlIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwLjA1IiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfdHlwZSAhPSBidW1wIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAwLjUgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfYnVtcHNjYWxlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlQnVtcF9idW1wVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUgUGF0aCIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW1hZ2UKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfdHlwZSAhPSBidW1wIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJhc2VCdW1wX3dyYXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXcmFwIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInJlcGVhdCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX3R5cGUgIT0gYnVtcCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgInJlcGVhdCIgICAgIlJlcGVhdCIKICAgICAgICAgICAgICAgICAgICAic3RyZWFrIiAgICAiU3RyZWFrIgogICAgICAgICAgICAgICAgICAgICJkZWNhbCIgICAgICJEZWNhbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZUJ1bXBfZmlsdGVyIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRmlsdGVyIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImdhdXNzIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfdHlwZSAhPSBidW1wIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiYm94IiAgICAgICAiQm94IgogICAgICAgICAgICAgICAgICAgICJnYXVzcyIgICAgICJHYXVzc2lhbiIKICAgICAgICAgICAgICAgICAgICAiYmFydGxldHQiICAiQmFydGxldHQvVHJpYW5ndWxhciIKICAgICAgICAgICAgICAgICAgICAic2luYyIgICAgICAiU2luYyBTaGFycGVuaW5nIgogICAgICAgICAgICAgICAgICAgICJoYW5uaW5nIiAgICJIYW5uaW5nIgogICAgICAgICAgICAgICAgICAgICJibGFja21hbiIgICJCbGFja21hbiIKICAgICAgICAgICAgICAgICAgICAiY2F0cm9tIiAgICAiQ2F0bXVsbC1Sb20iCiAgICAgICAgICAgICAgICAgICAgIm1pdGNoZWxsIiAgIk1pdGNoZWxsIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlQnVtcF9maWx0ZXJXaWR0aCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkZpbHRlciBXaWR0aCIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX3R5cGUgIT0gYnVtcCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJhc2VCdW1wX2NoYW5uZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJDaGFubmVsIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF90eXBlICE9IGJ1bXAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICIwIiAiTHVtaW5hbmNlIgogICAgICAgICAgICAgICAgICAgICIxIiAiUmVkIgogICAgICAgICAgICAgICAgICAgICIyIiAiR3JlZW4iCiAgICAgICAgICAgICAgICAgICAgIjMiICJCbHVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlQnVtcF9pbWFnZVBsYW5lIgogICAgICAgICAgICAgICAgbGFiZWwgICAiSW1hZ2UgUGxhbmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF90eXBlICE9IGJ1bXAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZU5vcm1hbF9jb2xvcnNwYWNlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSBDb2xvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImxpbmVhciIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX3R5cGUgIT0gbm9ybWFsIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICBbICJlY2hvIGBweXRob25leHBycyhcIl9faW1wb3J0X18oJ3Rvb2x1dGlscycpLm9jaW9Db2xvclNwYWNlTWVudShpbmNsdWRlX3JvbGVzPUZhbHNlLGV4dHJhX2Nob2ljZXM9WydhdXRvJywnQXV0b21hdGljJywnbGluZWFyJywnTGluZWFyJywnc1JHQicsJ3NSR0InLCdyZWM3MDknLCdSZWMgNzA5JywncmF3JywnUmF3JywnX3NlcGFyYXRvcl8nLCdfc2VwYXJhdG9yJ10pXCIpYCIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlTm9ybWFsX3ZlY3RvclNwYWNlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVmVjdG9yIFNwYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAidXZ0YW5nZW50IiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJ1dnRhbmdlbnQiICJVViBUYW5nZW50IFNwYWNlIgogICAgICAgICAgICAgICAgICAgICJvYmplY3QiICAgICJPYmplY3QgU3BhY2UiCiAgICAgICAgICAgICAgICAgICAgIndvcmxkIiAgICAgIldvcmxkIFNwYWNlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfbm9ybWFsbWFwX3R5cGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJhc2VOb3JtYWxfc2NhbGUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFZmZlY3QgU2NhbGUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF90eXBlICE9IG5vcm1hbCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJhc2VOb3JtYWxfdGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUgUGF0aCIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW1hZ2UKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX25vcm1hbG1hcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZU5vcm1hbF93cmFwIgogICAgICAgICAgICAgICAgbGFiZWwgICAiV3JhcCIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF90eXBlICE9IG5vcm1hbCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgInJlcGVhdCIgICAgIlJlcGVhdCIKICAgICAgICAgICAgICAgICAgICAic3RyZWFrIiAgICAiU3RyZWFrIgogICAgICAgICAgICAgICAgICAgICJkZWNhbCIgICAgICJEZWNhbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZU5vcm1hbF9maWx0ZXIiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJGaWx0ZXIiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiZ2F1c3MiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF90eXBlICE9IG5vcm1hbCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgImJveCIgICAgICAgIkJveCIKICAgICAgICAgICAgICAgICAgICAiZ2F1c3MiICAgICAiR2F1c3NpYW4iCiAgICAgICAgICAgICAgICAgICAgImJhcnRsZXR0IiAgIkJhcnRsZXR0L1RyaWFuZ3VsYXIiCiAgICAgICAgICAgICAgICAgICAgInNpbmMiICAgICAgIlNpbmMgU2hhcnBlbmluZyIKICAgICAgICAgICAgICAgICAgICAiaGFubmluZyIgICAiSGFubmluZyIKICAgICAgICAgICAgICAgICAgICAiYmxhY2ttYW4iICAiQmxhY2ttYW4iCiAgICAgICAgICAgICAgICAgICAgImNhdHJvbSIgICAgIkNhdG11bGwtUm9tIgogICAgICAgICAgICAgICAgICAgICJtaXRjaGVsbCIgICJNaXRjaGVsbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZU5vcm1hbF9maWx0ZXJXaWR0aCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkZpbHRlciBXaWR0aCIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX3R5cGUgIT0gbm9ybWFsIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAyIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYmFzZU5vcm1hbF9jaGFubmVsIgogICAgICAgICAgICAgICAgbGFiZWwgICAiQ2hhbm5lbCIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICIwIiAiTHVtaW5hbmNlIgogICAgICAgICAgICAgICAgICAgICIxIiAiUmVkIgogICAgICAgICAgICAgICAgICAgICIyIiAiR3JlZW4iCiAgICAgICAgICAgICAgICAgICAgIjMiICJCbHVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlTm9ybWFsX2ltYWdlUGxhbmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJJbWFnZSBQbGFuZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX3R5cGUgIT0gbm9ybWFsIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJhc2VOb3JtYWxfc3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJOb3JtYWwgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGJhc2VCdW1wQW5kTm9ybWFsX3R5cGUgIT0gbm9ybWFsIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIjAgdG8gMSIKICAgICAgICAgICAgICAgICAgICAiMSIgIi0xIHRvIDEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9ub3JtYWxiaWFzIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlTm9ybWFsX2ZsaXBYIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRmxpcCBYIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX25vcm1hbGZsaXB4IiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlTm9ybWFsX2ZsaXBZIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRmxpcCBZIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBiYXNlQnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgYmFzZUJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX25vcm1hbGZsaXB5IiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJiYXNlQnVtcF91c2VUZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiT3BlbkdMIFVzZSBCdW1wIFRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgaW52aXNpYmxlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgWyAiY2goXCJiYXNlQnVtcEFuZE5vcm1hbF9lbmFibGVcIikgJiYgc3RyY21wKGNocyhcImJhc2VCdW1wQW5kTm9ybWFsX3R5cGVcIiksIFwiYnVtcFwiKSA9PSAwIiBoc2NyaXB0LWV4cHIgXSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF91c2VfYnVtcG1hcCIgIjEiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJhc2VOb3JtYWxfdXNlVGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIk9wZW5HTCBVc2UgTm9ybWFsIFRleHR1cmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgaW52aXNpYmxlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgWyAiY2goXCJiYXNlQnVtcEFuZE5vcm1hbF9lbmFibGVcIikgJiYgc3RyY21wKGNocyhcImJhc2VCdW1wQW5kTm9ybWFsX3R5cGVcIiksIFwibm9ybWFsXCIpID09IDAiIGhzY3JpcHQtZXhwciBdIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3VzZV9ub3JtYWxtYXAiICIxIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGdyb3VwIHsKICAgICAgICAgICAgbmFtZSAgICAic2hhZGluZ18xNl8xIgogICAgICAgICAgICBsYWJlbCAgICJDb2F0IgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzZXBhcmF0ZUNvYXROb3JtYWxzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU2VwYXJhdGUgQ29hdCBOb3JtYWxzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXRCdW1wQW5kTm9ybWFsX2VuYWJsZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9uIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBzZXBhcmF0ZUNvYXROb3JtYWxzID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdEJ1bXBBbmROb3JtYWxfdHlwZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUgVHlwZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm5vcm1hbCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSB7IHNlcGFyYXRlQ29hdE5vcm1hbHMgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgImJ1bXAiICAgICAgIkJ1bXAiCiAgICAgICAgICAgICAgICAgICAgIm5vcm1hbCIgICAgIk5vcm1hbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdEJ1bXBfY29sb3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUgQ29sb3IgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJsaW5lYXIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0geyBzZXBhcmF0ZUNvYXROb3JtYWxzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX3R5cGUgIT0gYnVtcCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgWyAiZWNobyBgcHl0aG9uZXhwcnMoXCJfX2ltcG9ydF9fKCd0b29sdXRpbHMnKS5vY2lvQ29sb3JTcGFjZU1lbnUoaW5jbHVkZV9yb2xlcz1GYWxzZSxleHRyYV9jaG9pY2VzPVsnYXV0bycsJ0F1dG9tYXRpYycsJ2xpbmVhcicsJ0xpbmVhcicsJ3NSR0InLCdzUkdCJywncmVjNzA5JywnUmVjIDcwOScsJ3JhdycsJ1JhdycsJ19zZXBhcmF0b3JfJywnX3NlcGFyYXRvciddKVwiKWAiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdEJ1bXBfYnVtcFNjYWxlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRWZmZWN0IFNjYWxlIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwLjA1IiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IHsgc2VwYXJhdGVDb2F0Tm9ybWFscyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF90eXBlICE9IGJ1bXAgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDAuNSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXRCdW1wX2J1bXBUZXh0dXJlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSBQYXRoIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbWFnZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0geyBzZXBhcmF0ZUNvYXROb3JtYWxzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX3R5cGUgIT0gYnVtcCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0QnVtcF93cmFwIgogICAgICAgICAgICAgICAgbGFiZWwgICAiV3JhcCIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZXBlYXQiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0geyBzZXBhcmF0ZUNvYXROb3JtYWxzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX3R5cGUgIT0gYnVtcCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgInJlcGVhdCIgICAgIlJlcGVhdCIKICAgICAgICAgICAgICAgICAgICAic3RyZWFrIiAgICAiU3RyZWFrIgogICAgICAgICAgICAgICAgICAgICJkZWNhbCIgICAgICJEZWNhbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdEJ1bXBfZmlsdGVyIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRmlsdGVyIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImdhdXNzIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IHsgc2VwYXJhdGVDb2F0Tm9ybWFscyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF90eXBlICE9IGJ1bXAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJib3giICAgICAgICJCb3giCiAgICAgICAgICAgICAgICAgICAgImdhdXNzIiAgICAgIkdhdXNzaWFuIgogICAgICAgICAgICAgICAgICAgICJiYXJ0bGV0dCIgICJCYXJ0bGV0dC9Ucmlhbmd1bGFyIgogICAgICAgICAgICAgICAgICAgICJzaW5jIiAgICAgICJTaW5jIFNoYXJwZW5pbmciCiAgICAgICAgICAgICAgICAgICAgImhhbm5pbmciICAgIkhhbm5pbmciCiAgICAgICAgICAgICAgICAgICAgImJsYWNrbWFuIiAgIkJsYWNrbWFuIgogICAgICAgICAgICAgICAgICAgICJjYXRyb20iICAgICJDYXRtdWxsLVJvbSIKICAgICAgICAgICAgICAgICAgICAibWl0Y2hlbGwiICAiTWl0Y2hlbGwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXRCdW1wX2ZpbHRlcldpZHRoIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRmlsdGVyIFdpZHRoIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IHsgc2VwYXJhdGVDb2F0Tm9ybWFscyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF90eXBlICE9IGJ1bXAgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0QnVtcF9jaGFubmVsIgogICAgICAgICAgICAgICAgbGFiZWwgICAiQ2hhbm5lbCIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IHsgc2VwYXJhdGVDb2F0Tm9ybWFscyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF90eXBlICE9IGJ1bXAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICIwIiAiTHVtaW5hbmNlIgogICAgICAgICAgICAgICAgICAgICIxIiAiUmVkIgogICAgICAgICAgICAgICAgICAgICIyIiAiR3JlZW4iCiAgICAgICAgICAgICAgICAgICAgIjMiICJCbHVlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0QnVtcF9pbWFnZVBsYW5lIgogICAgICAgICAgICAgICAgbGFiZWwgICAiSW1hZ2UgUGxhbmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0geyBzZXBhcmF0ZUNvYXROb3JtYWxzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX3R5cGUgIT0gYnVtcCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0Tm9ybWFsX2NvbG9yc3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZXh0dXJlIENvbG9yIFNwYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAibGluZWFyIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IHsgc2VwYXJhdGVDb2F0Tm9ybWFscyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF90eXBlICE9IG5vcm1hbCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgWyAiZWNobyBgcHl0aG9uZXhwcnMoXCJfX2ltcG9ydF9fKCd0b29sdXRpbHMnKS5vY2lvQ29sb3JTcGFjZU1lbnUoaW5jbHVkZV9yb2xlcz1GYWxzZSxleHRyYV9jaG9pY2VzPVsnYXV0bycsJ0F1dG9tYXRpYycsJ2xpbmVhcicsJ0xpbmVhcicsJ3NSR0InLCdzUkdCJywncmVjNzA5JywnUmVjIDcwOScsJ3JhdycsJ1JhdycsJ19zZXBhcmF0b3JfJywnX3NlcGFyYXRvciddKVwiKWAiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdE5vcm1hbF92ZWN0b3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlZlY3RvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInV2dGFuZ2VudCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSB7IHNlcGFyYXRlQ29hdE5vcm1hbHMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJ1dnRhbmdlbnQiICJVViBUYW5nZW50IFNwYWNlIgogICAgICAgICAgICAgICAgICAgICJvYmplY3QiICAgICJPYmplY3QgU3BhY2UiCiAgICAgICAgICAgICAgICAgICAgIndvcmxkIiAgICAgIldvcmxkIFNwYWNlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0Tm9ybWFsX3NjYWxlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRWZmZWN0IFNjYWxlIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IHsgc2VwYXJhdGVDb2F0Tm9ybWFscyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF90eXBlICE9IG5vcm1hbCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXROb3JtYWxfdGV4dHVyZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUgUGF0aCIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW1hZ2UKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IHsgc2VwYXJhdGVDb2F0Tm9ybWFscyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF90eXBlICE9IG5vcm1hbCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0Tm9ybWFsX3dyYXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXcmFwIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInJlcGVhdCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSB7IHNlcGFyYXRlQ29hdE5vcm1hbHMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJyZXBlYXQiICAgICJSZXBlYXQiCiAgICAgICAgICAgICAgICAgICAgInN0cmVhayIgICAgIlN0cmVhayIKICAgICAgICAgICAgICAgICAgICAiZGVjYWwiICAgICAiRGVjYWwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXROb3JtYWxfZmlsdGVyIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRmlsdGVyIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImdhdXNzIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF9lbmFibGUgPT0gMCB9IHsgc2VwYXJhdGVDb2F0Tm9ybWFscyA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBjb2F0QnVtcEFuZE5vcm1hbF90eXBlICE9IG5vcm1hbCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgImJveCIgICAgICAgIkJveCIKICAgICAgICAgICAgICAgICAgICAiZ2F1c3MiICAgICAiR2F1c3NpYW4iCiAgICAgICAgICAgICAgICAgICAgImJhcnRsZXR0IiAgIkJhcnRsZXR0L1RyaWFuZ3VsYXIiCiAgICAgICAgICAgICAgICAgICAgInNpbmMiICAgICAgIlNpbmMgU2hhcnBlbmluZyIKICAgICAgICAgICAgICAgICAgICAiaGFubmluZyIgICAiSGFubmluZyIKICAgICAgICAgICAgICAgICAgICAiYmxhY2ttYW4iICAiQmxhY2ttYW4iCiAgICAgICAgICAgICAgICAgICAgImNhdHJvbSIgICAgIkNhdG11bGwtUm9tIgogICAgICAgICAgICAgICAgICAgICJtaXRjaGVsbCIgICJNaXRjaGVsbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdE5vcm1hbF9maWx0ZXJXaWR0aCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkZpbHRlciBXaWR0aCIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSB7IHNlcGFyYXRlQ29hdE5vcm1hbHMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb2F0Tm9ybWFsX2NoYW5uZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJDaGFubmVsIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0geyBzZXBhcmF0ZUNvYXROb3JtYWxzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX3R5cGUgIT0gbm9ybWFsIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiMCIgIkx1bWluYW5jZSIKICAgICAgICAgICAgICAgICAgICAiMSIgIlJlZCIKICAgICAgICAgICAgICAgICAgICAiMiIgIkdyZWVuIgogICAgICAgICAgICAgICAgICAgICIzIiAiQmx1ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdE5vcm1hbF9pbWFnZVBsYW5lIgogICAgICAgICAgICAgICAgbGFiZWwgICAiSW1hZ2UgUGxhbmUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX2VuYWJsZSA9PSAwIH0geyBzZXBhcmF0ZUNvYXROb3JtYWxzID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGNvYXRCdW1wQW5kTm9ybWFsX3R5cGUgIT0gbm9ybWFsIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXROb3JtYWxfc3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJOb3JtYWwgU3BhY2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIGludGVnZXIKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSB7IHNlcGFyYXRlQ29hdE5vcm1hbHMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICIwIiAiMCB0byAxIgogICAgICAgICAgICAgICAgICAgICIxIiAiLTEgdG8gMSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdE5vcm1hbF9mbGlwWCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkZsaXAgWCIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSB7IHNlcGFyYXRlQ29hdE5vcm1hbHMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiY29hdE5vcm1hbF9mbGlwWSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkZsaXAgWSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfZW5hYmxlID09IDAgfSB7IHNlcGFyYXRlQ29hdE5vcm1hbHMgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgY29hdEJ1bXBBbmROb3JtYWxfdHlwZSAhPSBub3JtYWwgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0KCiAgICBncm91cCB7CiAgICAgICAgbmFtZSAgICAiZGlmZnVzZV9mb2xkZXJfMTVfNCIKICAgICAgICBsYWJlbCAgICJEaXNwbGFjZW1lbnQiCgogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJzaG9wX2Rpc2FibGVfZGlzcGxhY2Vfc2hhZGVyIgogICAgICAgICAgICBsYWJlbCAgICJEaXNhYmxlIERpc3BsYWNlIFNoYWRlciIKICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgaW52aXNpYmxlCiAgICAgICAgICAgIGRlZmF1bHQgeyBbICIhY2goXCJkaXNwSW5wdXRfZW5hYmxlXCIpICYmICFjaChcImRpc3BUZXhfZW5hYmxlXCIpICYmICFjaChcImRpc3BOb2lzZV9lbmFibGVcIikiIGhzY3JpcHQtZXhwciBdIH0KICAgICAgICAgICAgaGVscCAgICAiTm9uZSIKICAgICAgICAgICAgcGFybXRhZyB7ICJzcGFyZV9jYXRlZ29yeSIgIlNoYWRlcnMiIH0KICAgICAgICB9CiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIyMzYiCiAgICAgICAgICAgIGxhYmVsICAgIkdlbmVyYWwiCiAgICAgICAgICAgIGdyb3VwdGFnIHsgImdyb3VwX3R5cGUiICJzaW1wbGUiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAidm1fZGlzcGxhY2Vib3VuZCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkRpc3BsYWNlbWVudCBCb3VuZCIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyBbICIxLjAxKmNoKFwiZGlzcElucHV0X2VuYWJsZVwiKSpjaChcImRpc3BJbnB1dF9tYXhcIikgKyBjaChcImRpc3BUZXhfZW5hYmxlXCIpKm1heChhYnMoKDEuMCtjaChcImRpc3BUZXhfb2Zmc2V0XCIpKSpjaChcImRpc3BUZXhfc2NhbGVcIikpLCBhYnMoY2goXCJkaXNwVGV4X29mZnNldFwiKSpjaChcImRpc3BUZXhfc2NhbGVcIikpKSArIGNoKFwiZGlzcE5vaXNlX2VuYWJsZVwiKSphYnMoY2goXCJkaXNwTm9pc2VfYW1wXCIpKSIgaHNjcmlwdC1leHByIF0gfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlRGlzcE1hcCA9PSAwIGVuYWJsZU5vaXNlID09IDAgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJ2bV90cnVlZGlzcGxhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUcnVlIERpc3BsYWNlbWVudHMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7IFsgIm9uIiBoc2NyaXB0LWV4cHIgXSB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVEaXNwTWFwID09IDAgZW5hYmxlTm9pc2UgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICIiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInZtX2J1bXByYXlkaXNwbGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkFkZCBCdW1wIFRvIFJheSBUcmFjZWQgRGlzcGxhY2VtZW50cyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgIGhlbHAgICAgIk5vbmUiCiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyB2bV90cnVlZGlzcGxhY2UgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJtYW50cmFfY2xhc3MiICJvYmplY3QiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAibWFudHJhX25hbWUiICJidW1wcmF5ZGlzcGxhY2UiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic3BhcmVfY2F0ZWdvcnkiICJTaGFkaW5nIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyMTAiCiAgICAgICAgICAgIGxhYmVsICAgIkN1c3RvbSBJbnB1dCIKCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZGlzcElucHV0X2VuYWJsZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBJbnB1dCBEaXNwbGFjZW1lbnQiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BJbnB1dF9tYXgiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJNYXhpbXVtIERpc3BsYWNlbWVudCIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzcElucHV0X2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgIiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZGlzcElucHV0X3ZlY3RvcnNwYWNlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVmVjdG9yIFNwYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAidXZ0YW5nZW50IiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBkaXNwSW5wdXRfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJ1dnRhbmdlbnQiICJVViBUYW5nZW50IFNwYWNlIgogICAgICAgICAgICAgICAgICAgICJvYmplY3QiICAgICJPYmplY3QgU3BhY2UiCiAgICAgICAgICAgICAgICAgICAgIndvcmxkIiAgICAgIldvcmxkIFNwYWNlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJkaXNwbGFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cHNpbXBsZSB7CiAgICAgICAgICAgIG5hbWUgICAgImZvbGRlcjIzNyIKICAgICAgICAgICAgbGFiZWwgICAiVGV4dHVyZSIKICAgICAgICAgICAgaGlkZXdoZW50YWIgInsgZW5hYmxlRGlzcE1hcCA9PSAwIH0iCiAgICAgICAgICAgIGdyb3VwdGFnIHsgImdyb3VwX3R5cGUiICJzaW1wbGUiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZGlzcFRleF9lbmFibGUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgVGV4dHVyZSBEaXNwbGFjZW1lbnQiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3VzZV9kaXNwbGFjZW1hcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BUZXhfdHlwZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRleHR1cmUgVHlwZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImRpc3AiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3BUZXhfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJkaXNwIiAgICAgICAgICAiRGlzcGxhY2VtZW50IEFsb25nIE5vcm1hbCIKICAgICAgICAgICAgICAgICAgICAidmVjdG9yZGlzcCIgICAgIlZlY3RvciBEaXNwbGFjZW1lbnQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJkaXNwVGV4X2NvbG9yU3BhY2UiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZXh0dXJlIENvbG9yIFNwYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAibGluZWFyIiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBkaXNwVGV4X2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICBbICJlY2hvIGBweXRob25leHBycyhcIl9faW1wb3J0X18oJ3Rvb2x1dGlscycpLm9jaW9Db2xvclNwYWNlTWVudShpbmNsdWRlX3JvbGVzPUZhbHNlLGV4dHJhX2Nob2ljZXM9WydhdXRvJywnQXV0b21hdGljJywnbGluZWFyJywnTGluZWFyJywnc1JHQicsJ3NSR0InLCdyZWM3MDknLCdSZWMgNzA5JywncmF3JywnUmF3JywnX3NlcGFyYXRvcl8nLCdfc2VwYXJhdG9yJ10pXCIpYCIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJkaXNwbGFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZGlzcFRleF92ZWN0b3JTcGFjZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlZlY3RvciBTcGFjZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInV2dGFuZ2VudCIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzcFRleF9lbmFibGUgPT0gMCB9IHsgZGlzcFRleF90eXBlICE9IG5vcm1hbCBkaXNwVGV4X3R5cGUgIT0gdmVjdG9yZGlzcCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgInV2dGFuZ2VudCIgIlVWIFRhbmdlbnQgU3BhY2UiCiAgICAgICAgICAgICAgICAgICAgIm9iamVjdCIgICAgIk9iamVjdCBTcGFjZSIKICAgICAgICAgICAgICAgICAgICAid29ybGQiICAgICAiV29ybGQgU3BhY2UiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9kaXNwbGFjZV9zcGFjZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BUZXhfY2hhbm5lbE9yZGVyIgogICAgICAgICAgICAgICAgbGFiZWwgICAiQ2hhbm5lbCBPcmRlciIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInh5eiIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzcFRleF9lbmFibGUgPT0gMCB9IHsgZGlzcFRleF90eXBlICE9IHZlY3RvcmRpc3AgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJ4eXoiICAgIlhZWiIKICAgICAgICAgICAgICAgICAgICAieHp5IiAgICJYWlkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9kaXNwbGFjZV91cCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BUZXhfb2Zmc2V0IgogICAgICAgICAgICAgICAgbGFiZWwgICAiT2Zmc2V0IgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICItMC41IiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBkaXNwVGV4X2VuYWJsZSA9PSAwIH0geyBkaXNwVGV4X3R5cGUgIT0gYnVtcCBkaXNwVGV4X3R5cGUgIT0gZGlzcCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfZGlzcGxhY2VvZmZzZXQiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJkaXNwVGV4X3NjYWxlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRWZmZWN0IFNjYWxlIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwLjA1IiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBkaXNwVGV4X2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2Rpc3BsYWNlc2NhbGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJkaXNwVGV4X3RleHR1cmUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJUZXh0dXJlIFBhdGgiCiAgICAgICAgICAgICAgICB0eXBlICAgIGltYWdlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzcFRleF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfZGlzcGxhY2VtYXAiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJkaXNwVGV4X2NoYW5uZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJDaGFubmVsIgogICAgICAgICAgICAgICAgdHlwZSAgICBpbnRlZ2VyCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBkaXNwVGV4X2VuYWJsZSA9PSAwIH0geyBkaXNwVGV4X3R5cGUgIT0gYnVtcCBkaXNwVGV4X3R5cGUgIT0gZGlzcCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIjAiICJMdW1pbmFuY2UiCiAgICAgICAgICAgICAgICAgICAgIjEiICJSZWQiCiAgICAgICAgICAgICAgICAgICAgIjIiICJHcmVlbiIKICAgICAgICAgICAgICAgICAgICAiMyIgIkJsdWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJkaXNwVGV4X3dyYXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJXcmFwIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInJlcGVhdCIgfQogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzcFRleF9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgInJlcGVhdCIgICAgIlJlcGVhdCIKICAgICAgICAgICAgICAgICAgICAic3RyZWFrIiAgICAiU3RyZWFrIgogICAgICAgICAgICAgICAgICAgICJkZWNhbCIgICAgICJEZWNhbCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BUZXhfZmlsdGVyIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRmlsdGVyIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiZ2F1c3MiIH0KICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3BUZXhfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJib3giICAgICAgICJCb3giCiAgICAgICAgICAgICAgICAgICAgImdhdXNzIiAgICAgIkdhdXNzaWFuIgogICAgICAgICAgICAgICAgICAgICJiYXJ0bGV0dCIgICJCYXJ0bGV0dC9Ucmlhbmd1bGFyIgogICAgICAgICAgICAgICAgICAgICJzaW5jIiAgICAgICJTaW5jIFNoYXJwZW5pbmciCiAgICAgICAgICAgICAgICAgICAgImhhbm5pbmciICAgIkhhbm5pbmciCiAgICAgICAgICAgICAgICAgICAgImJsYWNrbWFuIiAgIkJsYWNrbWFuIgogICAgICAgICAgICAgICAgICAgICJjYXRyb20iICAgICJDYXRtdWxsLVJvbSIKICAgICAgICAgICAgICAgICAgICAibWl0Y2hlbGwiICAiTWl0Y2hlbGwiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJkaXNwVGV4X2ZpbHRlcldpZHRoIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRmlsdGVyIFdpZHRoIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiB9CiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBkaXNwVGV4X2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAyIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIyMzgiCiAgICAgICAgICAgIGxhYmVsICAgIk5vaXNlIgogICAgICAgICAgICBoaWRld2hlbnRhYiAieyBlbmFibGVOb2lzZSA9PSAwIH0iCiAgICAgICAgICAgIGdyb3VwdGFnIHsgImdyb3VwX3R5cGUiICJzaW1wbGUiIH0KCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZGlzcE5vaXNlX2VuYWJsZSIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBOb2lzZSBEaXNwbGFjZW1lbnQiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BOb2lzZV90eXBlIgogICAgICAgICAgICAgICAgbGFiZWwgICAiTm9pc2UgVHlwZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInhub2lzZSIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlTm9pc2UgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzcE5vaXNlX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAicG5vaXNlIiAgICAiUGVybGluIE5vaXNlIgogICAgICAgICAgICAgICAgICAgICJvbm9pc2UiICAgICJPcmlnaW5hbCBQZXJsaW4gTm9pc2UiCiAgICAgICAgICAgICAgICAgICAgInhub2lzZSIgICAgIlNpbXBsZXggTm9pc2UiCiAgICAgICAgICAgICAgICAgICAgInNub2lzZSIgICAgIlNwYXJzZSBDb252b2x1dGlvbiBOb2lzZSIKICAgICAgICAgICAgICAgICAgICAiYW5vaXNlIiAgICAiQWxsaWdhdG9yIE5vaXNlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJkaXNwbGFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZGlzcE5vaXNlX2ZyZXEiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJGcmVxdWVuY3kiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBzaXplICAgIDMKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMTAiICIxMCIgIjEwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVOb2lzZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBkaXNwTm9pc2VfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BOb2lzZV9vZmZzZXQiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJPZmZzZXQiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBzaXplICAgIDMKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVOb2lzZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBkaXNwTm9pc2VfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BOb2lzZV9hbXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJBbXBsaXR1ZGUiCiAgICAgICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZU5vaXNlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3BOb2lzZV9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDEgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJkaXNwbGFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZGlzcE5vaXNlX3JvdWdoIgogICAgICAgICAgICAgICAgbGFiZWwgICAiUm91Z2huZXNzIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwLjUiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZU5vaXNlID09IDAgfSIKICAgICAgICAgICAgICAgIGhpZGV3aGVuICJ7IGRpc3BOb2lzZV9lbmFibGUgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJkaXNwTm9pc2VfYXR0ZW4iCiAgICAgICAgICAgICAgICBsYWJlbCAgICJBdHRlbnVhdGlvbiIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlTm9pc2UgPT0gMCB9IgogICAgICAgICAgICAgICAgaGlkZXdoZW4gInsgZGlzcE5vaXNlX2VuYWJsZSA9PSAwIH0iCiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpc3BOb2lzZV90dXJiIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVHVyYnVsZW5jZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgaW50ZWdlcgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICI1IiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVOb2lzZSA9PSAwIH0iCiAgICAgICAgICAgICAgICBoaWRld2hlbiAieyBkaXNwTm9pc2VfZW5hYmxlID09IDAgfSIKICAgICAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAiZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CgogICAgZ3JvdXAgewogICAgICAgIG5hbWUgICAgImRpZmZ1c2VfZm9sZGVyXzE1XzUiCiAgICAgICAgbGFiZWwgICAiU2V0dGluZ3MiCgogICAgICAgIGdyb3Vwc2ltcGxlIHsKICAgICAgICAgICAgbmFtZSAgICAiZm9sZGVyMjM5IgogICAgICAgICAgICBsYWJlbCAgICJDb21wb25lbnQgTGFiZWxzIgogICAgICAgICAgICBncm91cHRhZyB7ICJncm91cF90eXBlIiAic2ltcGxlIiB9CgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRpZmZsYWJlbCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkRpZmZ1c2UiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJkaWZmdXNlIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInJlZmxsYWJlbCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlJlZmxlY3Rpb24iCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZWZsZWN0IiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInJlZnJhY3RsYWJlbCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlJlZnJhY3Rpb24iCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJyZWZyYWN0IiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImNvYXRsYWJlbCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkNvYXQgUmVmbGVjdGlvbiIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImNvYXQiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3NzbGFiZWwiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTdWJzdXJmYWNlIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAic3NzIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZ3JvdXBzaW1wbGUgewogICAgICAgICAgICBuYW1lICAgICJmb2xkZXIwIgogICAgICAgICAgICBsYWJlbCAgICJVViIKCiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAidXZ0cmFucyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlRyYW5zbGF0ZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIHNpemUgICAgMgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfYnVtcF91dnRyYW5zbGF0ZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2NvYXRfaW50ZW5zaXR5X3V2dHJhbnNsYXRlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfY29hdF9yb3VnaG5lc3NfdXZ0cmFuc2xhdGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9kaXNwbGFjZV91dnRyYW5zbGF0ZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2VtaXNzaW9uX3V2dHJhbnNsYXRlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfbWV0YWxsaWNfdXZ0cmFuc2xhdGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9ub3JtYWxfdXZ0cmFuc2xhdGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9vY2NsdXNpb25fdXZ0cmFuc2xhdGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9vcGFjaXR5X3V2dHJhbnNsYXRlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfcmVmbGVjdF91dnRyYW5zbGF0ZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3JvdWdoX3V2dHJhbnNsYXRlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfc3BlY191dnRyYW5zbGF0ZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3RleF91dnRyYW5zbGF0ZTEiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UgZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInV2cm90IgogICAgICAgICAgICAgICAgbGFiZWwgICAiUm90YXRlIgogICAgICAgICAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgICAgICAgICByYW5nZSAgIHsgMCAzNjAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfYnVtcF91dnJvdGF0ZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2NvYXRfaW50ZW5zaXR5X3V2cm90YXRlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfY29hdF9yb3VnaG5lc3NfdXZyb3RhdGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9kaXNwbGFjZV91dnJvdGF0ZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2VtaXNzaW9uX3V2cm90YXRlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfbWV0YWxsaWNfdXZyb3RhdGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9ub3JtYWxfdXZyb3RhdGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9vY2NsdXNpb25fdXZyb3RhdGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9vcGFjaXR5X3V2cm90YXRlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfcmVmbGVjdF91dnJvdGF0ZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3JvdWdoX3V2cm90YXRlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfc3BlY191dnJvdGF0ZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3RleF91dnJvdGF0ZTEiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UgZGlzcGxhY2UiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInV2c2NhbGUiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTY2FsZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgICAgIHNpemUgICAgMgogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiAiMSIgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfYnVtcF91dnNjYWxlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfY29hdF9pbnRlbnNpdHlfdXZzY2FsZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX2NvYXRfcm91Z2huZXNzX3V2c2NhbGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9kaXNwbGFjZV91dnNjYWxlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfZW1pc3Npb25fdXZzY2FsZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX21ldGFsbGljX3V2c2NhbGUiICIxIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9nbF9ub3JtYWxfdXZzY2FsZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX29jY2x1c2lvbl91dnNjYWxlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfb3BhY2l0eV91dnNjYWxlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfcmVmbGVjdF91dnNjYWxlIiAiMSIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvZ2xfcm91Z2hfdXZzY2FsZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3NwZWNfdXZzY2FsZSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAib2dsX3RleF91dnNjYWxlMSIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSBkaXNwbGFjZSIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0KCiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJDZCIKICAgICAgICBsYWJlbCAgICJBdHRyaWJ1dGUgQ29sb3IiCiAgICAgICAgdHlwZSAgICBjb2xvcgogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMSIgIjEiICIxIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiQWxwaGEiCiAgICAgICAgbGFiZWwgICAiQXR0cmlidXRlIEFscGhhIgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJsYXllciIKICAgICAgICBsYWJlbCAgICJsYXllciIKICAgICAgICB0eXBlICAgIGxhYmVsCiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIGRpc3BsYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJkaXJlY3QiCiAgICAgICAgbGFiZWwgICAiZGlyZWN0IgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBzaXplICAgIDMKICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJpbmRpcmVjdCIKICAgICAgICBsYWJlbCAgICJpbmRpcmVjdCIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiQ2UiCiAgICAgICAgbGFiZWwgICAiQ2UiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImRpcmVjdF9lbWlzc2lvbiIKICAgICAgICBsYWJlbCAgICJkaXJlY3RfZW1pc3Npb24iCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImFsbF9lbWlzc2lvbiIKICAgICAgICBsYWJlbCAgICJhbGxfZW1pc3Npb24iCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImFsbCIKICAgICAgICBsYWJlbCAgICJhbGwiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImluZGlyZWN0X2VtaXNzaW9uIgogICAgICAgIGxhYmVsICAgImluZGlyZWN0X2VtaXNzaW9uIgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBzaXplICAgIDMKICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJkaXJlY3RfY29tcCIKICAgICAgICBsYWJlbCAgICJkaXJlY3RfY29tcCIKICAgICAgICB0eXBlICAgIGxhYmVsCiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJpbmRpcmVjdF9jb21wIgogICAgICAgIGxhYmVsICAgImluZGlyZWN0X2NvbXAiCiAgICAgICAgdHlwZSAgICBsYWJlbAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiYWxsX2NvbXAiCiAgICAgICAgbGFiZWwgICAiYWxsX2NvbXAiCiAgICAgICAgdHlwZSAgICBsYWJlbAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiZGlyZWN0X25vc2hhZG93IgogICAgICAgIGxhYmVsICAgImRpcmVjdF9ub3NoYWRvdyIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiZGlyZWN0X3NoYWRvdyIKICAgICAgICBsYWJlbCAgICJkaXJlY3Rfc2hhZG93IgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBzaXplICAgIDMKICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJpbmRpcmVjdF9ub3NoYWRvdyIKICAgICAgICBsYWJlbCAgICJpbmRpcmVjdF9ub3NoYWRvdyIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiaW5kaXJlY3Rfc2hhZG93IgogICAgICAgIGxhYmVsICAgImluZGlyZWN0X3NoYWRvdyIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAibGV2ZWwiCiAgICAgICAgbGFiZWwgICAibGV2ZWwiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImRpZmZ1c2VsZXZlbCIKICAgICAgICBsYWJlbCAgICJkaWZmdXNlbGV2ZWwiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInNwZWN1bGFybGV2ZWwiCiAgICAgICAgbGFiZWwgICAic3BlY3VsYXJsZXZlbCIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAidm9sdW1lbGV2ZWwiCiAgICAgICAgbGFiZWwgICAidm9sdW1lbGV2ZWwiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImRpcmVjdF9zYW1wbGVzIgogICAgICAgIGxhYmVsICAgImRpcmVjdF9zYW1wbGVzIgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJpbmRpcmVjdF9zYW1wbGVzIgogICAgICAgIGxhYmVsICAgImluZGlyZWN0X3NhbXBsZXMiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgIm5saWdodHMiCiAgICAgICAgbGFiZWwgICAibmxpZ2h0cyIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiZGlyZWN0X25vc2hhZG93X2NvbXAiCiAgICAgICAgbGFiZWwgICAiZGlyZWN0X25vc2hhZG93X2NvbXAiCiAgICAgICAgdHlwZSAgICBsYWJlbAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiaW5kaXJlY3Rfbm9zaGFkb3dfY29tcCIKICAgICAgICBsYWJlbCAgICJpbmRpcmVjdF9ub3NoYWRvd19jb21wIgogICAgICAgIHR5cGUgICAgbGFiZWwKICAgICAgICBpbnZpc2libGUKICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgIm5kZGlzcGVyc2lvbiIKICAgICAgICBsYWJlbCAgICJuZGRpc3BlcnNpb24iCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgIm5kcHJpb3JpdHkiCiAgICAgICAgbGFiZWwgICAibmRwcmlvcml0eSIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgZGVmYXVsdCB7ICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAibmRpb3IiCiAgICAgICAgbGFiZWwgICAibmRpb3IiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImFic29ycHRpb24iCiAgICAgICAgbGFiZWwgICAiYWJzb3JwdGlvbiIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiT2MiCiAgICAgICAgbGFiZWwgICAiT2MiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgIkN2IgogICAgICAgIGxhYmVsICAgIkN2IgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBzaXplICAgIDMKICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJUaCIKICAgICAgICBsYWJlbCAgICJUaCIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiQWIiCiAgICAgICAgbGFiZWwgICAiQWIiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgIkN1IgogICAgICAgIGxhYmVsICAgIkN1IgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBzaXplICAgIDMKICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJWZCIKICAgICAgICBsYWJlbCAgICJWZCIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiTnQiCiAgICAgICAgbGFiZWwgICAiTnQiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgIkRzIgogICAgICAgIGxhYmVsICAgIkRzIgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBzaXplICAgIDMKICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJwcmVfZGlzcF9QIgogICAgICAgIGxhYmVsICAgInByZV9kaXNwX1AiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJwcmVfZGlzcF91dGFuIgogICAgICAgIGxhYmVsICAgInByZV9kaXNwX3V0YW4iCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJwcmVfZGlzcF92dGFuIgogICAgICAgIGxhYmVsICAgInByZV9kaXNwX3Z0YW4iCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJwcmVfZGlzcF9OIgogICAgICAgIGxhYmVsICAgInByZV9kaXNwX04iCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJkaXNwIgogICAgICAgIGxhYmVsICAgIk5vcm1hbCBEaXNwbGFjZW1lbnQiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgImRpc3BsYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJ2ZGlzcCIKICAgICAgICBsYWJlbCAgICJWZWN0b3IgRGlzcGxhY2VtZW50IgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBzaXplICAgIDMKICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJkaXNwbGFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiRHQiCiAgICAgICAgbGFiZWwgICAiRHQiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgIlZkdCIKICAgICAgICBsYWJlbCAgICJWZHQiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMTAgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImJhc2VOIgogICAgICAgIGxhYmVsICAgImJhc2VOIgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBpbnZpc2libGUKICAgICAgICBzaXplICAgIDMKICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJjb2F0TiIKICAgICAgICBsYWJlbCAgICJjb2F0TiIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgcGFybXRhZyB7ICJwYXJtdm9wIiAiMSIgfQogICAgICAgIHBhcm10YWcgeyAic2hhZGVycGFybWNvbnRleHRzIiAic3VyZmFjZSIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAic3BlY2NvbG9yIgogICAgICAgIGxhYmVsICAgIlNwZWN1bGFyIENvbG9yIgogICAgICAgIHR5cGUgICAgY29sb3IKICAgICAgICBpbnZpc2libGUKICAgICAgICBzaXplICAgIDMKICAgICAgICBkZWZhdWx0IHsgIjEiICIxIiAiMSIgfQogICAgICAgIGhlbHAgICAgIkRlcHJlY2F0ZWQgUGFyYW1ldGVyIgogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiZGlzcGxheUNvbG9yIgogICAgICAgIGxhYmVsICAgIkF0dHJpYnV0ZSBDb2xvciIKICAgICAgICB0eXBlICAgIGNvbG9yCiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIxIiAiMSIgIjEiIH0KICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJzdCIKICAgICAgICBsYWJlbCAgICJzdCIKICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgaW52aXNpYmxlCiAgICAgICAgc2l6ZSAgICAyCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgInBhcm12b3AiICIxIiB9CiAgICAgICAgcGFybXRhZyB7ICJzaGFkZXJwYXJtY29udGV4dHMiICJzdXJmYWNlIGRpc3BsYWNlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJkaXNwbGF5T3BhY2l0eSIKICAgICAgICBsYWJlbCAgICJBdHRyaWJ1dGUgQWxwaGEiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGludmlzaWJsZQogICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgIHJhbmdlICAgeyAwIDEgfQogICAgICAgIHBhcm10YWcgeyAicGFybXZvcCIgIjEiIH0KICAgICAgICBwYXJtdGFnIHsgInNoYWRlcnBhcm1jb250ZXh0cyIgInN1cmZhY2UiIH0KICAgIH0KfQpJTkRYAAAAAAAAAAAAAAACAAAACENvbnRlbnRzAAAAAAAAAFdoZ0fIAAAADERpYWxvZ1NjcmlwdAAAAFcAAI8LZ2Jd6zA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQzNzEwMDAwMDEzMDAwMDAwMDAwMDBUUkFJTEVSISEhACMgRGlhbG9nIHNjcmlwdCBmb3Igc29wY3JlYXRlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkCgp7CiAgICBuYW1lCXNvcGNyZWF0ZQogICAgc2NyaXB0CXNvcGNyZWF0ZQogICAgbGFiZWwJIlNPUCBDcmVhdGUiCgogICAgaGVscCB7CgkiIgogICAgfQogICAgYmluZGhhbmRsZSBwcnggeGZvcm0gIlRyYW5zZm9ybWVyIiBwaXZvdF9yeCAiIgogICAgYmluZGhhbmRsZSBwcnkgeGZvcm0gIlRyYW5zZm9ybWVyIiBwaXZvdF9yeSAiIgogICAgYmluZGhhbmRsZSBwcnogeGZvcm0gIlRyYW5zZm9ybWVyIiBwaXZvdF9yeiAiIgogICAgYmluZGhhbmRsZSBweCB4Zm9ybSAiVHJhbnNmb3JtZXIiIHB4ICIiCiAgICBiaW5kaGFuZGxlIHB5IHhmb3JtICJUcmFuc2Zvcm1lciIgcHkgIiIKICAgIGJpbmRoYW5kbGUgcHogeGZvcm0gIlRyYW5zZm9ybWVyIiBweiAiIgogICAgYmluZGhhbmRsZSByeCB4Zm9ybSAiVHJhbnNmb3JtZXIiIHJ4ICIiCiAgICBiaW5kaGFuZGxlIHJ5IHhmb3JtICJUcmFuc2Zvcm1lciIgcnkgIiIKICAgIGJpbmRoYW5kbGUgcnogeGZvcm0gIlRyYW5zZm9ybWVyIiByeiAiIgogICAgYmluZGhhbmRsZSBzaGVhcjEgeGZvcm0gIlRyYW5zZm9ybWVyIiBzaGVhcl94eSAiIgogICAgYmluZGhhbmRsZSBzaGVhcjIgeGZvcm0gIlRyYW5zZm9ybWVyIiBzaGVhcl94eiAiIgogICAgYmluZGhhbmRsZSBzaGVhcjMgeGZvcm0gIlRyYW5zZm9ybWVyIiBzaGVhcl95eiAiIgogICAgYmluZGhhbmRsZSBzeCB4Zm9ybSAiVHJhbnNmb3JtZXIiIHN4ICIiCiAgICBiaW5kaGFuZGxlIHN5IHhmb3JtICJUcmFuc2Zvcm1lciIgc3kgIiIKICAgIGJpbmRoYW5kbGUgc3ogeGZvcm0gIlRyYW5zZm9ybWVyIiBzeiAiIgogICAgYmluZGhhbmRsZSB4T3JkIHhmb3JtICJUcmFuc2Zvcm1lciIgdHJzX29yZGVyICIiCiAgICBiaW5kaGFuZGxlIHR4IHhmb3JtICJUcmFuc2Zvcm1lciIgdHggIiIKICAgIGJpbmRoYW5kbGUgdHkgeGZvcm0gIlRyYW5zZm9ybWVyIiB0eSAiIgogICAgYmluZGhhbmRsZSB0eiB4Zm9ybSAiVHJhbnNmb3JtZXIiIHR6ICIiCiAgICBiaW5kaGFuZGxlIHNjYWxlIHhmb3JtICJUcmFuc2Zvcm1lciIgdW5pZm9ybV9zY2FsZSAiIgogICAgYmluZGhhbmRsZSByT3JkIHhmb3JtICJUcmFuc2Zvcm1lciIgeHl6X29yZGVyICIiCgogICAgaW5wdXRsYWJlbAkxCSJJbnB1dCBTdGFnZSIKCiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJhc3JlZmVyZW5jZSIKICAgICAgICBsYWJlbCAgICJMb2FkIEFzIFJlZmVyZW5jZSIKICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJjb3B5Y29udGVudHMiCiAgICAgICAgbGFiZWwgICAiU3VibGF5ZXIgU3R5bGUiCiAgICAgICAgdHlwZSAgICBvcmRpbmFsCiAgICAgICAgZGVmYXVsdCB7ICJvbiIgfQogICAgICAgIGhpZGV3aGVuICJ7IGFzcmVmZXJlbmNlID09IDEgfSIKICAgICAgICBtZW51IHsKICAgICAgICAgICAgIm9mZiIgICAiQWRkIFNPUCBMYXllciBBcyBOZXcgU3VibGF5ZXIiCiAgICAgICAgICAgICJtZXJnZSIgIk1lcmdlIFNPUCBMYXllciBJbnRvIEV4aXN0aW5nIEFjdGl2ZSBMYXllciIKICAgICAgICAgICAgIm9uIiAgICAiQ29weSBTT1AgTGF5ZXIgSW50byBOZXcgQWN0aXZlIExheWVyIgogICAgICAgIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImFkanVzdHhmb3Jtc2ZvcmlucHV0IgogICAgICAgIGxhYmVsICAgIkFkanVzdCBUcmFuc2Zvcm1zIGZvciBJbnB1dCBIaWVyYXJjaHkiCiAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICBkZWZhdWx0IHsgIm9uIiB9CiAgICAgICAgaGlkZXdoZW4gInsgYXNyZWZlcmVuY2UgPT0gMSB9IgogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiYmluZG1hdGVyaWFscyIKICAgICAgICBsYWJlbCAgICJCaW5kIE1hdGVyaWFscyIKICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgIGRlZmF1bHQgeyAibm9iaW5kIiB9CiAgICAgICAgbWVudSB7CiAgICAgICAgICAgIFsgIm9wbWVudSAtbCAtYSBzb3BpbXBvcnQgYmluZG1hdGVyaWFscyIgXQogICAgICAgIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInJlZnR5cGUiCiAgICAgICAgbGFiZWwgICAiUmVmZXJlbmNlIFR5cGUiCiAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICBkZWZhdWx0IHsgInBheWxvYWR3ZWFrIiB9CiAgICAgICAgaGlkZXdoZW4gInsgYXNyZWZlcmVuY2UgPT0gMCB9IgogICAgICAgIG1lbnUgewogICAgICAgICAgICBbICJvcG1lbnUgLWwgLWEgc29waW1wb3J0IHJlZnR5cGUiIF0KICAgICAgICB9CiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJyZWZwcmltIgogICAgICAgIGxhYmVsICAgIlJlZmVyZW5jZSBQcmltaXRpdmUiCiAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgIGhpZGV3aGVuICJ7IGFzcmVmZXJlbmNlID09IDAgfSIKICAgICAgICBtZW51IHsKICAgICAgICAgICAgWyAib3BtZW51IC1sIC1hIHNvcGltcG9ydCByZWZwcmltIiBdCiAgICAgICAgfQogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAicmVmcHJpbXBhdGgiCiAgICAgICAgbGFiZWwgICAiUmVmZXJlbmNlIFByaW1pdGl2ZSBQYXRoIgogICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICBkaXNhYmxld2hlbiAieyByZWZwcmltICE9IFwiXCIgfSIKICAgICAgICBoaWRld2hlbiAieyBhc3JlZmVyZW5jZSA9PSAwIH0iCiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJwcmltcGF0aCIKICAgICAgICBsYWJlbCAgICJQcmltaXRpdmUgUGF0aCIKICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgIGRlZmF1bHQgeyAiLyRPUyIgfQogICAgICAgIGhpZGV3aGVuICJ7IGFzcmVmZXJlbmNlID09IDAgfSIKICAgICAgICBtZW51cmVwbGFjZSB7CiAgICAgICAgICAgIFsgIm9wbWVudSAtbCAtYSBzb3BpbXBvcnQgcHJpbXBhdGgiIF0KICAgICAgICB9CiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfYWN0aW9uIiAiaW1wb3J0IGxvcHV0aWxzXG5sb3B1dGlscy5zZWxlY3RQcmltc0luUGFybShrd2FyZ3MsIEZhbHNlKSIgfQogICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2FjdGlvbl9oZWxwIiAiU2VsZWN0IGEgcHJpbWl0aXZlIGluIHRoZSBTY2VuZSBWaWV3ZXIgb3IgU2NlbmUgR3JhcGggVHJlZSBwYW5lLlxuQ3RybC1jbGljayB0byBzZWxlY3QgdXNpbmcgdGhlIHByaW1pdGl2ZSBwaWNrZXIgZGlhbG9nLlxuQWx0LWNsaWNrIHRvIHRvZ2dsZSBtb3ZlbWVudCBvZiB0aGUgZGlzcGxheSBmbGFnLiIgfQogICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2FjdGlvbl9pY29uIiAiQlVUVE9OU19yZXNlbGVjdCIgfQogICAgICAgIHBhcm10YWcgeyAic2lkZWZ4Ojp1c2RwYXRodHlwZSIgInByaW0iIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImluc3RhbmNlYWJsZSIKICAgICAgICBsYWJlbCAgICJNYWtlIEluc3RhbmNlYWJsZSIKICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgaGlkZXdoZW4gInsgYXNyZWZlcmVuY2UgPT0gMCB9IgogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAicGFyZW50cHJpbWtpbmQiCiAgICAgICAgbGFiZWwgICAiUGFyZW50IFByaW1pdGl2ZSBLaW5kIgogICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgZGVmYXVsdCB7ICJncm91cCIgfQogICAgICAgIGhpZGV3aGVuICJ7IGFzcmVmZXJlbmNlID09IDAgfSIKICAgICAgICBtZW51IHsKICAgICAgICAgICAgWyAib3BtZW51IC1sIC1hIHNvcGltcG9ydCBwYXJlbnRwcmlta2luZCIgXQogICAgICAgIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInBhcmVudHByaW10eXBlIgogICAgICAgIGxhYmVsICAgIlBhcmVudCBQcmltaXRpdmUgVHlwZSIKICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgIGRlZmF1bHQgeyAiVXNkR2VvbVhmb3JtIiB9CiAgICAgICAgaGlkZXdoZW4gInsgYXNyZWZlcmVuY2UgPT0gMCB9IgogICAgICAgIG1lbnUgewogICAgICAgICAgICBbICJvcG1lbnUgLWwgLWEgc29waW1wb3J0IHBhcmVudHByaW10eXBlIiBdCiAgICAgICAgfQogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAic2hvd2xvcHN0YWdlIgogICAgICAgIGxhYmVsICAgIlNob3cgTE9QIFN0YWdlIGluIFNPUHMiCiAgICAgICAgdHlwZSAgICBvcHBhdGgKICAgICAgICBkZWZhdWx0IHsgImBvcGlucHV0cGF0aChcIi5cIiwgMClgIiB9CiAgICAgICAgcGFybXRhZyB7ICJvcGZpbHRlciIgIiEhTE9QISEiIH0KICAgICAgICBwYXJtdGFnIHsgIm9wcmVsYXRpdmUiICIuIiB9CiAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInNlcHBhcm0iCiAgICAgICAgbGFiZWwgICAiU2VwYXJhdG9yIgogICAgICAgIHR5cGUgICAgc2VwYXJhdG9yCiAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImVuYWJsZV9ncm91cCIKICAgICAgICBsYWJlbCAgICJFbmFibGUgSW1wb3J0IEdyb3VwIgogICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgbm9sYWJlbAogICAgICAgIGpvaW5uZXh0CiAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImdyb3VwIgogICAgICAgIGxhYmVsICAgIkltcG9ydCBHcm91cCIKICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX2dyb3VwID09IDAgfSIKICAgICAgICBtZW51dG9nZ2xlIHsKICAgICAgICAgICAgWyAib3BtZW51IC1sIC1hIHNvcGltcG9ydCBncm91cCIgXQogICAgICAgIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImVuYWJsZV9ncm91cHR5cGUiCiAgICAgICAgbGFiZWwgICAiRW5hYmxlIEltcG9ydCBHcm91cCBUeXBlIgogICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgbm9sYWJlbAogICAgICAgIGpvaW5uZXh0CiAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiZ3JvdXB0eXBlIgogICAgICAgIGxhYmVsICAgIkltcG9ydCBHcm91cCBUeXBlIgogICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgZGVmYXVsdCB7ICJwcmltaXRpdmUiIH0KICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfZ3JvdXB0eXBlID09IDAgfSIKICAgICAgICBtZW51IHsKICAgICAgICAgICAgInByaW1pdGl2ZSIgIlByaW1pdGl2ZXMiCiAgICAgICAgICAgICJwb2ludCIgICAgICJQb2ludHMiCiAgICAgICAgfQogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJlbmFibGVfcGF0aHByZWZpeCIKICAgICAgICBsYWJlbCAgICJFbmFibGUgSW1wb3J0IFBhdGggUHJlZml4IgogICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgbm9sYWJlbAogICAgICAgIGpvaW5uZXh0CiAgICAgICAgZGVmYXVsdCB7ICJvbiIgfQogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAicGF0aHByZWZpeCIKICAgICAgICBsYWJlbCAgICJJbXBvcnQgUGF0aCBQcmVmaXgiCiAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICBkZWZhdWx0IHsgIi8kT1MiIH0KICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfcGF0aHByZWZpeCA9PSAwIH0iCiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJlbmFibGVfc2F2ZXBhdGgiCiAgICAgICAgbGFiZWwgICAiRW5hYmxlIExheWVyIFNhdmUgUGF0aCIKICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgIG5vbGFiZWwKICAgICAgICBqb2lubmV4dAogICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJzYXZlcGF0aCIKICAgICAgICBsYWJlbCAgICJMYXllciBTYXZlIFBhdGgiCiAgICAgICAgdHlwZSAgICBmaWxlCiAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfc2F2ZXBhdGggPT0gMCB9IgogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIHBhcm10YWcgeyAiZmlsZWNob29zZXJfbW9kZSIgIndyaXRlIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJzZXBwYXJtMiIKICAgICAgICBsYWJlbCAgICJTZXBhcmF0b3IiCiAgICAgICAgdHlwZSAgICBzZXBhcmF0b3IKICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgfQogICAgZ3JvdXAgewogICAgICAgIG5hbWUgICAgImZvbGRlcjEiCiAgICAgICAgbGFiZWwgICAiVHJhbnNmb3JtIgoKICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAieE9yZCIKICAgICAgICAgICAgbGFiZWwgICAiVHJhbnNmb3JtIE9yZGVyIgogICAgICAgICAgICB0eXBlICAgIG9yZGluYWwKICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgZGVmYXVsdCB7ICJzcnQiIH0KICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAic3J0IiAgICJTY2FsZSBSb3QgVHJhbnMiCiAgICAgICAgICAgICAgICAic3RyIiAgICJTY2FsZSBUcmFucyBSb3QiCiAgICAgICAgICAgICAgICAicnN0IiAgICJSb3QgU2NhbGUgVHJhbnMiCiAgICAgICAgICAgICAgICAicnRzIiAgICJSb3QgVHJhbnMgU2NhbGUiCiAgICAgICAgICAgICAgICAidHNyIiAgICJUcmFucyBTY2FsZSBSb3QiCiAgICAgICAgICAgICAgICAidHJzIiAgICJUcmFucyBSb3QgU2NhbGUiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgfQogICAgICAgIHBhcm0gewogICAgICAgICAgICBuYW1lICAgICJyT3JkIgogICAgICAgICAgICBsYWJlbCAgICJSb3RhdGUgT3JkZXIiCiAgICAgICAgICAgIHR5cGUgICAgb3JkaW5hbAogICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgIGRlZmF1bHQgeyAieHl6IiB9CiAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgInh5eiIgICAiUnggUnkgUnoiCiAgICAgICAgICAgICAgICAieHp5IiAgICJSeCBSeiBSeSIKICAgICAgICAgICAgICAgICJ5eHoiICAgIlJ5IFJ4IFJ6IgogICAgICAgICAgICAgICAgInl6eCIgICAiUnkgUnogUngiCiAgICAgICAgICAgICAgICAienh5IiAgICJSeiBSeCBSeSIKICAgICAgICAgICAgICAgICJ6eXgiICAgIlJ6IFJ5IFJ4IgogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAidCIKICAgICAgICAgICAgbGFiZWwgICAiVHJhbnNsYXRlIgogICAgICAgICAgICB0eXBlICAgIHZlY3RvcgogICAgICAgICAgICBzaXplICAgIDMKICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDEgfQogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICB9CiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgInIiCiAgICAgICAgICAgIGxhYmVsICAgIlJvdGF0ZSIKICAgICAgICAgICAgdHlwZSAgICB2ZWN0b3IKICAgICAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDM2MCB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAicyIKICAgICAgICAgICAgbGFiZWwgICAiU2NhbGUiCiAgICAgICAgICAgIHR5cGUgICAgdmVjdG9yCiAgICAgICAgICAgIHNpemUgICAgMwogICAgICAgICAgICBkZWZhdWx0IHsgIjEiICIxIiAiMSIgfQogICAgICAgICAgICByYW5nZSAgIHsgLTEgMSB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAic2hlYXIiCiAgICAgICAgICAgIGxhYmVsICAgIlNoZWFyIgogICAgICAgICAgICB0eXBlICAgIGZsb2F0CiAgICAgICAgICAgIHNpemUgICAgMwogICAgICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgIH0KICAgICAgICBwYXJtIHsKICAgICAgICAgICAgbmFtZSAgICAic2NhbGUiCiAgICAgICAgICAgIGxhYmVsICAgIlVuaWZvcm0gU2NhbGUiCiAgICAgICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICAgICAgZGVmYXVsdCB7ICIxIiB9CiAgICAgICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgfQogICAgICAgIGdyb3VwY29sbGFwc2libGUgewogICAgICAgICAgICBuYW1lICAgICJwYXJtZ3JvdXBfcGl2b3R4Zm9ybSIKICAgICAgICAgICAgbGFiZWwgICAiUGl2b3QgVHJhbnNmb3JtIgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJwIgogICAgICAgICAgICAgICAgbGFiZWwgICAiUGl2b3QgVHJhbnNsYXRlIgogICAgICAgICAgICAgICAgdHlwZSAgICB2ZWN0b3IKICAgICAgICAgICAgICAgIHNpemUgICAgMwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICAgICAgICAgIHJhbmdlICAgeyAtMSAxIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicHIiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJQaXZvdCBSb3RhdGUiCiAgICAgICAgICAgICAgICB0eXBlICAgIHZlY3RvcgogICAgICAgICAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgICAgICAgICAgcmFuZ2UgICB7IC0xIDEgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQoKICAgIGdyb3VwIHsKICAgICAgICBuYW1lICAgICJmb2xkZXIxXzEiCiAgICAgICAgbGFiZWwgICAiSW1wb3J0IGZyb20gU09QcyIKCiAgICAgICAgZ3JvdXBjb2xsYXBzaWJsZSB7CiAgICAgICAgICAgIG5hbWUgICAgInByaW1pdGl2ZWRlZmluaXRpb25ncm91cCIKICAgICAgICAgICAgbGFiZWwgICAiUHJpbWl0aXZlIERlZmluaXRpb24iCgogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9wYWNrZWR1c2RoYW5kbGluZyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBQYWNrZWQgVVNEIFByaW1pdGl2ZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgbm9sYWJlbAogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInBhY2tlZHVzZGhhbmRsaW5nIgogICAgICAgICAgICAgICAgbGFiZWwgICAiUGFja2VkIFVTRCBQcmltaXRpdmVzIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAieGZvcm1hbmRhdHRyaWJzIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfcGFja2VkdXNkaGFuZGxpbmcgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgImlnbm9yZSIgICAgICAgICAgICAiSWdub3JlIgogICAgICAgICAgICAgICAgICAgICJ4Zm9ybSIgICAgICAgICAgICAgIk92ZXJsYXkgVHJhbnNmb3JtcyIKICAgICAgICAgICAgICAgICAgICAieGZvcm1hbmRhdHRyaWJzIiAgICJPdmVybGF5IFRyYW5zZm9ybXMgYW5kIEF0dHJpYnV0ZXMiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9vdGhlcnByaW1oYW5kbGluZyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBPdGhlciBQcmltaXRpdmVzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJvdGhlcnByaW1oYW5kbGluZyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIk90aGVyIFByaW1pdGl2ZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJkZWZpbmUiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZV9vdGhlcnByaW1oYW5kbGluZyA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiZGVmaW5lIiAgICAiRGVmaW5lIgogICAgICAgICAgICAgICAgICAgICJvdmVybGF5IiAgICJPdmVybGF5IgogICAgICAgICAgICAgICAgICAgICJ4Zm9ybSIgICAgICJPdmVybGF5IFRyYW5zZm9ybXMiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9kZWZpbmVvbmx5bGVhZnByaW1zIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIERlZmluZSBPbmx5IExlYWYgUHJpbWl0aXZlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImRlZmluZW9ubHlsZWFmcHJpbXMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJEZWZpbmUgT25seSBMZWFmIFByaW1pdGl2ZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZV9kZWZpbmVvbmx5bGVhZnByaW1zID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9wYWNrZWRoYW5kbGluZyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBQYWNrZWQgUHJpbWl0aXZlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicGFja2VkaGFuZGxpbmciCiAgICAgICAgICAgICAgICBsYWJlbCAgICJQYWNrZWQgUHJpbWl0aXZlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm5hdGl2ZWluc3RhbmNlcyIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX3BhY2tlZGhhbmRsaW5nID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnUgewogICAgICAgICAgICAgICAgICAgICJ4Zm9ybXMiICAgICAgICAgICAgIkNyZWF0ZSBYZm9ybXMiCiAgICAgICAgICAgICAgICAgICAgInBvaW50aW5zdGFuY2VyIiAgICAiQ3JlYXRlIFBvaW50IEluc3RhbmNlciIKICAgICAgICAgICAgICAgICAgICAibmF0aXZlaW5zdGFuY2VzIiAgICJDcmVhdGUgTmF0aXZlIEluc3RhbmNlcyIKICAgICAgICAgICAgICAgICAgICAidW5wYWNrIiAgICAgICAgICAgICJVbnBhY2siCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9udXJic2N1cnZlaGFuZGxpbmciCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgTlVSQlMgQ3VydmVzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibnVyYnNjdXJ2ZWhhbmRsaW5nIgogICAgICAgICAgICAgICAgbGFiZWwgICAiTlVSQlMgQ3VydmVzIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiYmFzaXNjdXJ2ZXMiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZV9udXJic2N1cnZlaGFuZGxpbmcgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgImJhc2lzY3VydmVzIiAgICJDb252ZXJ0IHRvIEJhc2lzIEN1cnZlcyIKICAgICAgICAgICAgICAgICAgICAibnVyYnNjdXJ2ZXMiICAgIkNyZWF0ZSBOVVJCUyBDdXJ2ZXMiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJlbmFibGVfbnVyYnNzdXJmaGFuZGxpbmciCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgTlVSQlMgU3VyZmFjZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgbm9sYWJlbAogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJudXJic3N1cmZoYW5kbGluZyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIk5VUkJTIFN1cmZhY2VzIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAibWVzaGVzIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfbnVyYnNzdXJmaGFuZGxpbmcgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIm1lc2hlcyIgICAgICAgICJDb252ZXJ0IHRvIE1lc2hlcyIKICAgICAgICAgICAgICAgICAgICAibnVyYnNwYXRjaGVzIiAgIkNyZWF0ZSBOVVJCUyBQYXRjaGVzIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX2tpbmRzY2hlbWEiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgS2luZCBBdXRob3JpbmciCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgbm9sYWJlbAogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImtpbmRzY2hlbWEiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJLaW5kIEF1dGhvcmluZyIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImNvbXBvbmVudCIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX2tpbmRzY2hlbWEgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudSB7CiAgICAgICAgICAgICAgICAgICAgIm5vbmUiICAgICAgICAgICAgICAiTm9uZSIKICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50IiAgICAgICAgICJBbGwgZ2VvbWV0cnkgaXMgb25lIGNvbXBvbmVudCIKICAgICAgICAgICAgICAgICAgICAibmVzdGVkZ3JvdXAiICAgICAgICJOZXN0ZWQgZ3JvdXBzIGFuZCBjb21wb25lbnRzIgogICAgICAgICAgICAgICAgICAgICJuZXN0ZWRhc3NlbWJseSIgICAgIk5lc3RlZCBhc3NlbWJseSwgZ3JvdXBzLCBhbmQgY29tcG9uZW50cyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX3BhdGhhdHRyIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIFBhdGggQXR0cmlidXRlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicGF0aGF0dHIiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJQYXRoIEF0dHJpYnV0ZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJwYXRoLG5hbWUiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZV9wYXRoYXR0ciA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51dG9nZ2xlIHsKICAgICAgICAgICAgICAgICAgICBbICJvcG1lbnUgLWwgLWEgc29waW1wb3J0IHBhdGhhdHRyIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9wcmVmaXhhYnNvbHV0ZXBhdGhzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiUHJlZml4IEFic29sdXRlIFBhdGhzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAicHJlZml4YWJzb2x1dGVwYXRocyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlByZWZpeCBBYnNvbHV0ZSBQYXRocyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX3ByZWZpeGFic29sdXRlcGF0aHMgPT0gMCB9IgogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX2hlaWdodGZpZWxkY29udmVydCIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBJbXBvcnQgSGVpZ2h0IEZpZWxkcyBhcyBNZXNoIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiaGVpZ2h0ZmllbGRjb252ZXJ0IgogICAgICAgICAgICAgICAgbGFiZWwgICAiSW1wb3J0IEhlaWdodCBGaWVsZHMgYXMgTWVzaCIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX2hlaWdodGZpZWxkY29udmVydCA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGdyb3VwY29sbGFwc2libGUgewogICAgICAgICAgICBuYW1lICAgICJnZW9tZXRyeWhhbmRsaW5nZ3JvdXAiCiAgICAgICAgICAgIGxhYmVsICAgIkdlb21ldHJ5IEhhbmRsaW5nIgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJlbmFibGVfcG9seWdvbnNhc3N1YmQiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgVHJlYXQgUG9seWdvbnMgYXMgU3ViZGl2aXNpb24gU3VyZmFjZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgbm9sYWJlbAogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInBvbHlnb25zYXNzdWJkIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVHJlYXQgUG9seWdvbnMgYXMgU3ViZGl2aXNpb24gU3VyZmFjZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZV9wb2x5Z29uc2Fzc3ViZCA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9zdWJkZ3JvdXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgU3ViZGl2aXNpb24gR3JvdXAiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgbm9sYWJlbAogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzdWJkZ3JvdXAiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJTdWJkaXZpc2lvbiBHcm91cCIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX3N1YmRncm91cCA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51dG9nZ2xlIHsKICAgICAgICAgICAgICAgICAgICBbICJvcG1lbnUgLWwgLWEgc29waW1wb3J0IHN1YmRncm91cCIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX3JldmVyc2Vwb2x5Z29ucyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBSZXZlcnNlIFBvbHlnb24gVmVydGV4IE9yZGVyaW5nIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJyZXZlcnNlcG9seWdvbnMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJSZXZlcnNlIFBvbHlnb24gVmVydGV4IE9yZGVyaW5nIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfcmV2ZXJzZXBvbHlnb25zID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX3NldG1pc3Npbmd3aWR0aHMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgU2V0IE1pc3NpbmcgV2lkdGhzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9uIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJzZXRtaXNzaW5nd2lkdGhzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU2V0IE1pc3NpbmcgV2lkdGhzIgogICAgICAgICAgICAgICAgdHlwZSAgICBsb2cKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiMC4wMSIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX3NldG1pc3Npbmd3aWR0aHMgPT0gMCB9IgogICAgICAgICAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGdyb3VwY29sbGFwc2libGUgewogICAgICAgICAgICBuYW1lICAgICJpbXBvcnRkYXRhZ3JvdXAiCiAgICAgICAgICAgIGxhYmVsICAgIkltcG9ydCBEYXRhIgoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJhdXRob3J0aW1lc2FtcGxlcyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkF1dGhvciBUaW1lIFNhbXBsZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJhdXRvIiB9CiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAibmV2ZXIiICAgICAiTmV2ZXIiCiAgICAgICAgICAgICAgICAgICAgImF1dG8iICAgICAgIklmIFNPUCBpcyBUaW1lIERlcGVuZGVudCIKICAgICAgICAgICAgICAgICAgICAiYWx3YXlzIiAgICAiSWYgTm90IFNwZWNpZmljYWxseSBFeGNsdWRlZCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX3NldGRlZmF1bHRwcmltIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIFNldCBEZWZhdWx0IFByaW1pdGl2ZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInNldGRlZmF1bHRwcmltIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU2V0IERlZmF1bHQgUHJpbWl0aXZlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib24iIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZV9zZXRkZWZhdWx0cHJpbSA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJlbmFibGVfdG9wb2xvZ3loYW5kbGluZyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBUb3BvbG9neSBBdHRyaWJ1dGVzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJ0b3BvbG9neWhhbmRsaW5nIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVG9wb2xvZ3kgQXR0cmlidXRlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgImFuaW1hdGVkIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfdG9wb2xvZ3loYW5kbGluZyA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51IHsKICAgICAgICAgICAgICAgICAgICAiYW5pbWF0ZWQiICAiQW5pbWF0ZWQiCiAgICAgICAgICAgICAgICAgICAgInN0YXRpYyIgICAgIlN0YXRpYyIKICAgICAgICAgICAgICAgICAgICAibm9uZSIgICAgICAiTm9uZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX2F0dHJpYnMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgQXR0cmlidXRlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiYXR0cmlicyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkF0dHJpYnV0ZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIqIF5fXyogXnVzZCoiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZV9hdHRyaWJzID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnV0b2dnbGUgewogICAgICAgICAgICAgICAgICAgIFsgIm9wbWVudSAtbCAtYSBzb3BpbXBvcnQgYXR0cmlicyIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJlbmFibGVfaW5kZXhhdHRyaWJzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIEluZGV4ZWQgQXR0cmlidXRlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiaW5kZXhhdHRyaWJzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiSW5kZXhlZCBBdHRyaWJ1dGVzIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfaW5kZXhhdHRyaWJzID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnV0b2dnbGUgewogICAgICAgICAgICAgICAgICAgIFsgIm9wbWVudSAtbCAtYSBzb3BpbXBvcnQgaW5kZXhhdHRyaWJzIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9jb25zdGFudGF0dHJpYnMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgSW1wb3J0IGFzIFNpbmdsZSBFbGVtZW50IEFycmF5IgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjb25zdGFudGF0dHJpYnMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJJbXBvcnQgYXMgU2luZ2xlIEVsZW1lbnQgQXJyYXkiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZV9jb25zdGFudGF0dHJpYnMgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudXRvZ2dsZSB7CiAgICAgICAgICAgICAgICAgICAgWyAib3BtZW51IC1sIC1hIHNvcGltcG9ydCBjb25zdGFudGF0dHJpYnMiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX3NjYWxhcmNvbnN0YW50YXR0cmlicyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBJbXBvcnQgYXMgU2luZ2xlIFZhbHVlIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic2NhbGFyY29uc3RhbnRhdHRyaWJzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiSW1wb3J0IGFzIFNpbmdsZSBWYWx1ZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX3NjYWxhcmNvbnN0YW50YXR0cmlicyA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51dG9nZ2xlIHsKICAgICAgICAgICAgICAgICAgICBbICJvcG1lbnUgLWwgLWEgc29waW1wb3J0IHNjYWxhcmNvbnN0YW50YXR0cmlicyIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX2Jvb2xhdHRyaWJzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIEJvb2xlYW4gQXR0cmlidXRlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImJvb2xhdHRyaWJzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiQm9vbGVhbiBBdHRyaWJ1dGVzIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfYm9vbGF0dHJpYnMgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudXRvZ2dsZSB7CiAgICAgICAgICAgICAgICAgICAgWyAib3BtZW51IC1sIC1hIHNvcGltcG9ydCBib29sYXR0cmlicyIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX3VpbnRhdHRyaWJzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIFVuc2lnbmVkIDMyLWJpdCBBdHRyaWJ1dGVzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAidWludGF0dHJpYnMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJVbnNpZ25lZCAzMi1iaXQgQXR0cmlidXRlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX3VpbnRhdHRyaWJzID09IDAgfSIKICAgICAgICAgICAgICAgIG1lbnV0b2dnbGUgewogICAgICAgICAgICAgICAgICAgIFsgIm9wbWVudSAtbCAtYSBzb3BpbXBvcnQgdWludGF0dHJpYnMiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV91aW50NjRhdHRyaWJzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIFVuc2lnbmVkIDY0LWJpdCBBdHRyaWJ1dGVzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9mZiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFja19sYW5ndWFnZSIgInB5dGhvbiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAidWludDY0YXR0cmlicyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlVuc2lnbmVkIDY0LWJpdCBBdHRyaWJ1dGVzIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfdWludDY0YXR0cmlicyA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51dG9nZ2xlIHsKICAgICAgICAgICAgICAgICAgICBbICJvcG1lbnUgLWwgLWEgc29waW1wb3J0IHVpbnQ2NGF0dHJpYnMiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9zdGF0aWNhdHRyaWJzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIFNldCBEZWZhdWx0IFZhbHVlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3RhdGljYXR0cmlicyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIlNldCBEZWZhdWx0IFZhbHVlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX3N0YXRpY2F0dHJpYnMgPT0gMCB9IgogICAgICAgICAgICAgICAgbWVudXRvZ2dsZSB7CiAgICAgICAgICAgICAgICAgICAgWyAib3BtZW51IC1sIC1hIHNvcGltcG9ydCBzdGF0aWNhdHRyaWJzIiBdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9wYXJ0aXRpb25hdHRyaWJzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiRW5hYmxlIFBhcnRpdGlvbiBBdHRyaWJ1dGVzIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIG5vbGFiZWwKICAgICAgICAgICAgICAgIGpvaW5uZXh0CiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9uIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInBhcnRpdGlvbmF0dHJpYnMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJQYXJ0aXRpb24gQXR0cmlidXRlcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgInNob3BfbWF0ZXJpYWxwYXRoIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfcGFydGl0aW9uYXR0cmlicyA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51dG9nZ2xlIHsKICAgICAgICAgICAgICAgICAgICBbICJvcG1lbnUgLWwgLWEgc29waW1wb3J0IHBhcnRpdGlvbmF0dHJpYnMiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAiZW5hYmxlX3ByZWZpeHBhcnRpdGlvbnN1YnNldHMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgUHJlZml4IFN1YnNldHMgd2l0aCBBdHRyaWJ1dGUgTmFtZSIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgInByZWZpeHBhcnRpdGlvbnN1YnNldHMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJQcmVmaXggU3Vic2V0cyB3aXRoIEF0dHJpYnV0ZSBOYW1lIgogICAgICAgICAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib24iIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZV9wcmVmaXhwYXJ0aXRpb25zdWJzZXRzID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV9zdWJzZXRncm91cHMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgU3Vic2V0IEdyb3VwcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAic3Vic2V0Z3JvdXBzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiU3Vic2V0IEdyb3VwcyIKICAgICAgICAgICAgICAgIHR5cGUgICAgc3RyaW5nCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlX3N1YnNldGdyb3VwcyA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51dG9nZ2xlIHsKICAgICAgICAgICAgICAgICAgICBbICJvcG1lbnUgLWwgLWEgc29waW1wb3J0IHN1YnNldGdyb3VwcyIgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJlbmFibGVfY3VzdG9tYXR0cmlicyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkVuYWJsZSBVU0QgQ3VzdG9tIEF0dHJpYnV0ZXMiCiAgICAgICAgICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgICAgICAgICAgbm9sYWJlbAogICAgICAgICAgICAgICAgam9pbm5leHQKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAib2ZmIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJjdXN0b21hdHRyaWJzIgogICAgICAgICAgICAgICAgbGFiZWwgICAiVVNEIEN1c3RvbSBBdHRyaWJ1dGVzIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfY3VzdG9tYXR0cmlicyA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51dG9nZ2xlIHsKICAgICAgICAgICAgICAgICAgICBbICJvcG1lbnUgLWwgLWEgc29waW1wb3J0IGN1c3RvbWF0dHJpYnMiIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfY2FsbGJhY2tfbGFuZ3VhZ2UiICJweXRob24iIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJtIHsKICAgICAgICAgICAgICAgIG5hbWUgICAgImVuYWJsZV90cmFuc2xhdGV1dnRvc3QiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJFbmFibGUgVHJhbnNsYXRlIFVWIEF0dHJpYnV0ZSB0byBTVCIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBub2xhYmVsCiAgICAgICAgICAgICAgICBqb2lubmV4dAogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICJvZmYiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAidHJhbnNsYXRldXZ0b3N0IgogICAgICAgICAgICAgICAgbGFiZWwgICAiVHJhbnNsYXRlIFVWIEF0dHJpYnV0ZSB0byBTVCIKICAgICAgICAgICAgICAgIHR5cGUgICAgdG9nZ2xlCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIm9uIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGVfdHJhbnNsYXRldXZ0b3N0ID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBncm91cGNvbGxhcHNpYmxlIHsKICAgICAgICAgICAgbmFtZSAgICAibWF0ZXJpYWxzZ3JvdXAiCiAgICAgICAgICAgIGxhYmVsICAgIk1hdGVyaWFscyIKCiAgICAgICAgfQoKICAgIH0KCiAgICBncm91cCB7CiAgICAgICAgbmFtZSAgICAiZm9sZGVyMV8yIgogICAgICAgIGxhYmVsICAgIk1hdGVyaWFscyIKCiAgICAgICAgcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgImZpbGxtYXRlcmlhbHMiCiAgICAgICAgICAgIGxhYmVsICAgIkF1dG8tZmlsbCBNYXRlcmlhbHMiCiAgICAgICAgICAgIHR5cGUgICAgYnV0dG9uCiAgICAgICAgICAgIGRlZmF1bHQgeyAiMCIgfQogICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9jYWxsYmFjayIgImt3YXJnc1snbm9kZSddLmhtKCkuZmlsbG1hdGVyaWFscyhrd2FyZ3MpIiB9CiAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2NhbGxiYWNrX2xhbmd1YWdlIiAicHl0aG9uIiB9CiAgICAgICAgfQogICAgICAgIG11bHRpcGFybSB7CiAgICAgICAgICAgIG5hbWUgICAgIm1hdGVyaWFscyIKICAgICAgICAgICAgbGFiZWwgICAgIk51bWJlciBvZiBNYXRlcmlhbHMiCiAgICAgICAgICAgIGRlZmF1bHQgMAogICAgICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICAgICAgcGFybXRhZyB7ICJtdWx0aXN0YXJ0b2Zmc2V0IiAiMSIgfQoKICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJtYXRub2RlIyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIk1hdGVyaWFsIFZPUCIKICAgICAgICAgICAgICAgIHR5cGUgICAgb3BwYXRoCiAgICAgICAgICAgICAgICBkZWZhdWx0IHsgIiIgfQogICAgICAgICAgICAgICAgZGlzYWJsZXdoZW4gInsgZW5hYmxlIyA9PSAwIH0iCiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgIm9wZmlsdGVyIiAiISFDVVNUT00vTUFURVJJQUwhISIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJvcHJlbGF0aXZlIiAiLiIgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcm0gewogICAgICAgICAgICAgICAgbmFtZSAgICAibWF0cGF0aCMiCiAgICAgICAgICAgICAgICBsYWJlbCAgICJNYXRlcmlhbCBQYXRoIgogICAgICAgICAgICAgICAgdHlwZSAgICBzdHJpbmcKICAgICAgICAgICAgICAgIGRlZmF1bHQgeyAiIiB9CiAgICAgICAgICAgICAgICBkaXNhYmxld2hlbiAieyBlbmFibGUjID09IDAgfSIKICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2FjdGlvbiIgImltcG9ydCBsb3B1dGlsc1xubG9wdXRpbHMuc2VsZWN0UHJpbXNJblBhcm0oa3dhcmdzLCBGYWxzZSkiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2NyaXB0X2FjdGlvbl9oZWxwIiAiU2VsZWN0IGEgcHJpbWl0aXZlIGluIHRoZSBTY2VuZSBWaWV3ZXIgb3IgU2NlbmUgR3JhcGggVHJlZSBwYW5lLlxuQ3RybC1jbGljayB0byBzZWxlY3QgdXNpbmcgdGhlIHByaW1pdGl2ZSBwaWNrZXIgZGlhbG9nLlxuQWx0LWNsaWNrIHRvIHRvZ2dsZSBtb3ZlbWVudCBvZiB0aGUgZGlzcGxheSBmbGFnLiIgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfYWN0aW9uX2ljb24iICJCVVRUT05TX3Jlc2VsZWN0IiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNpZGVmeDo6dXNkcGF0aHR5cGUiICJwcmltIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGFybSB7CiAgICAgICAgICAgICAgICBuYW1lICAgICJnZW9wYXRoIyIKICAgICAgICAgICAgICAgIGxhYmVsICAgIkdlb21ldHJ5IFBhdGgiCiAgICAgICAgICAgICAgICB0eXBlICAgIHN0cmluZwogICAgICAgICAgICAgICAgZGVmYXVsdCB7ICIiIH0KICAgICAgICAgICAgICAgIGRpc2FibGV3aGVuICJ7IGVuYWJsZSMgPT0gMCB9IHsgYXNzaWduIyA9PSAwIH0iCiAgICAgICAgICAgICAgICBtZW51dG9nZ2xlIHsKICAgICAgICAgICAgICAgICAgICBbICJpbXBvcnQgbG9wdXRpbHMiIF0KICAgICAgICAgICAgICAgICAgICBbICJyZXR1cm4gbG9wdXRpbHMuY3JlYXRlUHJpbVBhdHRlcm5NZW51KGt3YXJnc1snbm9kZSddLCAwKSIgXQogICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlIHB5dGhvbgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFybXRhZyB7ICJzY3JpcHRfYWN0aW9uIiAiaW1wb3J0IGxvcHV0aWxzXG5sb3B1dGlscy5zZWxlY3RQcmltc0luUGFybShrd2FyZ3MsIFRydWUpIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9hY3Rpb25faGVscCIgIlNlbGVjdCBwcmltaXRpdmVzIGluIHRoZSBTY2VuZSBWaWV3ZXIgb3IgU2NlbmUgR3JhcGggVHJlZSBwYW5lLlxuQ3RybC1jbGljayB0byBzZWxlY3QgdXNpbmcgdGhlIHByaW1pdGl2ZSBwaWNrZXIgZGlhbG9nLlxuU2hpZnQtY2xpY2sgdG8gc2VsZWN0IHVzaW5nIHRoZSBwcmltaXRpdmUgcGF0dGVybiBlZGl0b3IuXG5BbHQtY2xpY2sgdG8gdG9nZ2xlIG1vdmVtZW50IG9mIHRoZSBkaXNwbGF5IGZsYWcuIiB9CiAgICAgICAgICAgICAgICBwYXJtdGFnIHsgInNjcmlwdF9hY3Rpb25faWNvbiIgIkJVVFRPTlNfcmVzZWxlY3QiIH0KICAgICAgICAgICAgICAgIHBhcm10YWcgeyAic2lkZWZ4Ojp1c2RwYXRodHlwZSIgInByaW1saXN0IiB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQoKfQpJTkRYAAAAAAAAAAAAAAACAAAACENvbnRlbnRzAAAAAAAAAFdoZ0fIAAAADERpYWxvZ1NjcmlwdAAAAFcAAAbeZ5B/0jA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQzNzEwMDAwMDEzMDAwMDAwMDAwMDBUUkFJTEVSISEhACMgRGlhbG9nIHNjcmlwdCBmb3IgdGVzdGdlb21ldHJ5X3BpZ2hlYWQgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQKCnsKICAgIG5hbWUJdGVzdGdlb21ldHJ5X3BpZ2hlYWQKICAgIHNjcmlwdAlwaWdoZWFkCiAgICBsYWJlbAkiVGVzdCBHZW9tZXRyeTogUGlnIEhlYWQiCgogICAgaGVscCB7CgkiIgogICAgfQogICAgYmluZGhhbmRsZSB0eCBzcGhlcmUgIlRyYW5zZm9ybWVyIiB0eCAiIgogICAgYmluZGhhbmRsZSB0eSBzcGhlcmUgIlRyYW5zZm9ybWVyIiB0eSAiIgogICAgYmluZGhhbmRsZSB0eiBzcGhlcmUgIlRyYW5zZm9ybWVyIiB0eiAiIgogICAgYmluZGhhbmRsZSByeCBzcGhlcmUgIlRyYW5zZm9ybWVyIiByeCAiIgogICAgYmluZGhhbmRsZSByeSBzcGhlcmUgIlRyYW5zZm9ybWVyIiByeSAiIgogICAgYmluZGhhbmRsZSByeiBzcGhlcmUgIlRyYW5zZm9ybWVyIiByeiAiIgoKCiAgICBpbnB1dGxhYmVsCTEJIlN1Yi1OZXR3b3JrIElucHV0ICMxIgogICAgaW5wdXRsYWJlbAkyCSJTdWItTmV0d29yayBJbnB1dCAjMiIKICAgIGlucHV0bGFiZWwJMwkiU3ViLU5ldHdvcmsgSW5wdXQgIzMiCiAgICBpbnB1dGxhYmVsCTQJIlN1Yi1OZXR3b3JrIElucHV0ICM0IgogICAgb3V0cHV0bGFiZWwJMQkiU3ViLU5ldHdvcmsgT3V0cHV0ICMxIgoKICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInQiCiAgICAgICAgbGFiZWwgICAiVHJhbnNsYXRlIgogICAgICAgIHR5cGUgICAgdmVjdG9yCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICByYW5nZSAgIHsgLTEgMSB9CiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJyIgogICAgICAgIGxhYmVsICAgIlJvdGF0ZSIKICAgICAgICB0eXBlICAgIHZlY3RvcgogICAgICAgIHNpemUgICAgMwogICAgICAgIGRlZmF1bHQgeyAiMCIgIjAiICIwIiB9CiAgICAgICAgcmFuZ2UgICB7IDAgMzYwIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInVuaWZvcm1zY2FsZSIKICAgICAgICBsYWJlbCAgICJVbmlmb3JtIFNjYWxlIgogICAgICAgIHR5cGUgICAgZmxvYXQKICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICByYW5nZSAgIHsgMCAxMCB9CiAgICAgICAgcGFybXRhZyB7ICJhdXRvc2NvcGUiICIwMDAwMDAwMDAwMDAwMDAwIiB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJkaWZmaWN1bHR5IgogICAgICAgIGxhYmVsICAgIkRpZmZpY3VsdHkiCiAgICAgICAgdHlwZSAgICBvcmRpbmFsCiAgICAgICAgZGVmYXVsdCB7ICJtZWRpdW0iIH0KICAgICAgICBtZW51IHsKICAgICAgICAgICAgImVhc3kiICAgICAgIkVhc3kiCiAgICAgICAgICAgICJtZWRpdW0iICAgICJNZWRpdW0iCiAgICAgICAgICAgICJoYXJkIiAgICAgICJIYXJkIgogICAgICAgIH0KICAgICAgICByYW5nZSAgIHsgMCAxIH0KICAgICAgICBleHBvcnQgIGFsbAogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAiYWRkc2hhZGVyIgogICAgICAgIGxhYmVsICAgIkFkZCBTaGFkZXIiCiAgICAgICAgdHlwZSAgICB0b2dnbGUKICAgICAgICBkZWZhdWx0IHsgIjEiIH0KICAgICAgICBkaXNhYmxld2hlbiAieyBkaWZmaWN1bHR5ID09IGVhc3kgfSIKICAgICAgICBleHBvcnQgIGFsbAogICAgfQp9CklORFgAAAAAAAAAAAAAAAIAAAAIQ29udGVudHMAAAAAAAAAV2hnR8gAAAAMRGlhbG9nU2NyaXB0AAAAVwAABopnkH/SMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDM3MTAwMDAwMTMwMDAwMDAwMDAwMFRSQUlMRVIhISEAIyBEaWFsb2cgc2NyaXB0IGZvciB0ZXN0Z2VvbWV0cnlfcnViYmVydG95IGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkCgp7CiAgICBuYW1lCXRlc3RnZW9tZXRyeV9ydWJiZXJ0b3kKICAgIHNjcmlwdAl0ZXN0Z2VvbWV0cnlfcnViYmVydG95CiAgICBsYWJlbAkiVGVzdCBHZW9tZXRyeTogUnViYmVyIFRveSIKCiAgICBoZWxwIHsKCSIiCiAgICB9CiAgICBiaW5kaGFuZGxlIHR4IHNwaGVyZSAiVHJhbnNmb3JtZXIiIHR4ICIiCiAgICBiaW5kaGFuZGxlIHR5IHNwaGVyZSAiVHJhbnNmb3JtZXIiIHR5ICIiCiAgICBiaW5kaGFuZGxlIHR6IHNwaGVyZSAiVHJhbnNmb3JtZXIiIHR6ICIiCiAgICBiaW5kaGFuZGxlIHJ4IHNwaGVyZSAiVHJhbnNmb3JtZXIiIHJ4ICIiCiAgICBiaW5kaGFuZGxlIHJ5IHNwaGVyZSAiVHJhbnNmb3JtZXIiIHJ5ICIiCiAgICBiaW5kaGFuZGxlIHJ6IHNwaGVyZSAiVHJhbnNmb3JtZXIiIHJ6ICIiCgoKICAgIGlucHV0bGFiZWwJMQkiU3ViLU5ldHdvcmsgSW5wdXQgIzEiCiAgICBpbnB1dGxhYmVsCTIJIlN1Yi1OZXR3b3JrIElucHV0ICMyIgogICAgaW5wdXRsYWJlbAkzCSJTdWItTmV0d29yayBJbnB1dCAjMyIKICAgIGlucHV0bGFiZWwJNAkiU3ViLU5ldHdvcmsgSW5wdXQgIzQiCiAgICBvdXRwdXRsYWJlbAkxCSJTdWItTmV0d29yayBPdXRwdXQgIzEiCgogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAidCIKICAgICAgICBsYWJlbCAgICJUcmFuc2xhdGUiCiAgICAgICAgdHlwZSAgICB2ZWN0b3IKICAgICAgICBzaXplICAgIDMKICAgICAgICBkZWZhdWx0IHsgIjAiICIwIiAiMCIgfQogICAgICAgIHJhbmdlICAgeyAtMSAxIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgInIiCiAgICAgICAgbGFiZWwgICAiUm90YXRlIgogICAgICAgIHR5cGUgICAgdmVjdG9yCiAgICAgICAgc2l6ZSAgICAzCiAgICAgICAgZGVmYXVsdCB7ICIwIiAiMCIgIjAiIH0KICAgICAgICByYW5nZSAgIHsgMCAzNjAgfQogICAgICAgIHBhcm10YWcgeyAiYXV0b3Njb3BlIiAiMDAwMDAwMDAwMDAwMDAwMCIgfQogICAgfQogICAgcGFybSB7CiAgICAgICAgbmFtZSAgICAidW5pZm9ybXNjYWxlIgogICAgICAgIGxhYmVsICAgIlVuaWZvcm0gU2NhbGUiCiAgICAgICAgdHlwZSAgICBmbG9hdAogICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgIHJhbmdlICAgeyAwIDEwIH0KICAgICAgICBwYXJtdGFnIHsgImF1dG9zY29wZSIgIjAwMDAwMDAwMDAwMDAwMDAiIH0KICAgICAgICBwYXJtdGFnIHsgInVuaXRzIiAibTEiIH0KICAgIH0KICAgIHBhcm0gewogICAgICAgIG5hbWUgICAgImRpZmZpY3VsdHkiCiAgICAgICAgbGFiZWwgICAiRGlmZmljdWx0eSIKICAgICAgICB0eXBlICAgIG9yZGluYWwKICAgICAgICBkZWZhdWx0IHsgIjAiIH0KICAgICAgICBtZW51IHsKICAgICAgICAgICAgImhhcmQiICAiSGFyZCIKICAgICAgICB9CiAgICAgICAgcmFuZ2UgICB7IDAgMSB9CiAgICB9CiAgICBwYXJtIHsKICAgICAgICBuYW1lICAgICJhZGRzaGFkZXIiCiAgICAgICAgbGFiZWwgICAiQWRkIFNoYWRlciIKICAgICAgICB0eXBlICAgIHRvZ2dsZQogICAgICAgIGRlZmF1bHQgeyAiMSIgfQogICAgICAgIGV4cG9ydCAgYWxsCiAgICB9Cn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMjAwMDAwMDAwMDAxMmV4cHJlc3Npb24uZnVuYwAjIDAgYnl0ZXMKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTAwMDAwMDAwMDYzN3ZleC5kZWYAY29tbWVudCAiIgpwb3NpdGlvbiAwIDYKY29ubmVjdG9ybmV4dGlkIDAKZmxhZ3MgPSAgbG9jayBvZmYgbW9kZWwgb2ZmIHRlbXBsYXRlIG9mZiBmb290cHJpbnQgb2ZmIHhyYXkgb2ZmIGJ5cGFzcyBvZmYgZGlzcGxheSBvZmYgcmVuZGVyIG9mZiBoaWdobGlnaHQgb2ZmIHVubG9hZCBvZmYgc2F2ZWRhdGEgb2ZmIGNvbXByZXNzIG9uIGNvbG9yZGVmYXVsdCBvbiBleHBvc2VkIG9mZgpvdXRwdXRzTmFtZWQzCnsKfQppbnB1dHNOYW1lZDMKewp9CmlucHV0cwp7Cn0Kc3RhdAp7CiAgY3JlYXRlIDE3NTAyMDU1MzEKICBtb2RpZnkgMTc1MDIxMDU1MgogIGF1dGhvciBqb3JnZUBSMQogIGFjY2VzcyAwNzc3Cn0KY29sb3IgVVRfQ29sb3IgUkdCIDAuOCAwLjggMC44IApkZWxzY3JpcHQgIiIKZXhwcmxhbmd1YWdlIGhzY3JpcHQKZW5kCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDExMDAwMDAwMDAwMjB2ZXgucGFybQB7CnZlcnNpb24gMC44Cn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTUwMDAwMDAwMDA0MXZleC51c2VyZGF0YQAAAAABAA1fX19WZXJzaW9uX19fAAAAAwAIMjAuNS41NTAwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxMDAwMDAwMDAwNjQxbWF0LmRlZgBjb21tZW50ICIiCnBvc2l0aW9uIDAgMy43NQpjb25uZWN0b3JuZXh0aWQgMApmbGFncyA9ICBsb2NrIG9mZiBtb2RlbCBvZmYgdGVtcGxhdGUgb2ZmIGZvb3RwcmludCBvZmYgeHJheSBvZmYgYnlwYXNzIG9mZiBkaXNwbGF5IG9mZiByZW5kZXIgb2ZmIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7Cn0KaW5wdXRzTmFtZWQzCnsKfQppbnB1dHMKewp9CnN0YXQKewogIGNyZWF0ZSAxNzUwMjA1NTMxCiAgbW9kaWZ5IDE3NTAyMTA1NTIKICBhdXRob3Igam9yZ2VAUjEKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjggMC44IDAuOCAKZGVsc2NyaXB0ICIiCmV4cHJsYW5ndWFnZSBoc2NyaXB0CmVuZAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxMTAwMDAwMDAwMDIwbWF0LnBhcm0Aewp2ZXJzaW9uIDAuOAp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDE1MDAwMDAwMDAwNDFtYXQudXNlcmRhdGEAAAAAAQANX19fVmVyc2lvbl9fXwAAAAMACDIwLjUuNTUwMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTIwMDAwMDAwMDY1MnN0YWdlLmRlZgBjb21tZW50ICIiCnBvc2l0aW9uIDAgNC41CmNvbm5lY3Rvcm5leHRpZCAwCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb2ZmIHJlbmRlciBvZmYgaGlnaGxpZ2h0IG9mZiB1bmxvYWQgb2ZmIHNhdmVkYXRhIG9mZiBjb21wcmVzcyBvbiBjb2xvcmRlZmF1bHQgb24gZXhwb3NlZCBvbiBkZWJ1ZyBvZmYKb3V0cHV0c05hbWVkMwp7Cn0KaW5wdXRzTmFtZWQzCnsKfQppbnB1dHMKewp9CnN0YXQKewogIGNyZWF0ZSAxNzUwMjA1NTMxCiAgbW9kaWZ5IDE3NTE1OTkyMDAKICBhdXRob3Igam9yZ2VAUjEKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjggMC44IDAuOCAKZGVsc2NyaXB0ICIiCmV4cHJsYW5ndWFnZSBoc2NyaXB0CmVuZAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxMzAwMDAwMDAwNDcxc3RhZ2UucGFybQB7CnZlcnNpb24gMC44CnBpbm5lZHByaW1zCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCnJlc29sdmVyY29udGV4dGFzc2V0cGF0aAlbIDAJbG9ja3M9MCBdCSgJIiIJKQpyZXNvbHZlcmNvbnRleHRzdHJpbmdjb3VudAlbIDAJbG9ja3M9MCBdCSgJMAkpCnZhcmlhbnRzZWxlY3Rpb25jb3VudAlbIDAJbG9ja3M9MCBdCSgJMAkpCmluc2VydGlvbnBvaW50ZGVzY3JpcHRvcglbIDAJbG9ja3M9MCBdCSgJIiIJKQpyZW5kZXJnYWxsZXJ5c291cmNlCVsgMAlsb2Nrcz0wIF0JKAkkSElQL2dhbGxlcmllcy8kSElQTkFNRS4kT1MvcmVuZGVyZ2FsbGVyeS5kYgkpCn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTcwMDAwMDAwMDA0MXN0YWdlLnVzZXJkYXRhAAAAAAEADV9fX1ZlcnNpb25fX18AAAADAAgyMC41LjU1MDA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDIxMDAwMDAwMDAzNTFzdGFnZS5kYXRhYmxvY2tzAAAAAAAAAAACABRfX29ubG9hZF9fLmV4cGFuc2lvbgAJZXhwYW5zaW9uAAAAAAAAABV7CgkiZXhwYW5kZWQiOnRydWUKfQoAFF9fb25sb2FkX18ubG9hZG1hc2tzAAlsb2FkbWFza3MAAAAAAAAAensKCSJwb3B1bGF0ZWFsbCI6dHJ1ZSwKCSJwb3B1bGF0ZXBhdGhzIjpbCgldLAoJIm11dGVsYXllcnMiOlsKCV0sCgkibG9hZGFsbCI6dHJ1ZSwKCSJsb2FkcGF0aHMiOlsKCV0sCgkiZmFsbGJhY2tzIjp7Cgl9Cn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMjMwMDAwMDAwMDA0MHN0YWdlL1RyYWNpbmcuaW5pdAB0eXBlID0gc29wY3JlYXRlCm1hdGNoZXNkZWYgPSAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDIyMDAwMDAwMDA2NjRzdGFnZS9UcmFjaW5nLmRlZgBjb21tZW50ICIiCnBvc2l0aW9uIC00LjYwODExIDAuNjQ3NjIxCmNvbm5lY3Rvcm5leHRpZCAwCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb24gcmVuZGVyIG9uIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24gZGVidWcgb2ZmCm91dHB1dHNOYW1lZDMKewp9CmlucHV0c05hbWVkMwp7Cn0KaW5wdXRzCnsKfQpzdGF0CnsKICBjcmVhdGUgMTc1MDIwNzI0NQogIG1vZGlmeSAxNzUxNTk4OTgzCiAgYXV0aG9yIGpvcmdlQFIxCiAgYWNjZXNzIDA3NzcKfQpjb2xvciBVVF9Db2xvciBSR0IgMC44IDAuOCAwLjggCmRlbHNjcmlwdCAiIgpleHBybGFuZ3VhZ2UgaHNjcmlwdAplbmQKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMjMwMDAwMDAwNzUyNXN0YWdlL1RyYWNpbmcucGFybQB7CnZlcnNpb24gMC44CmFzcmVmZXJlbmNlCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmNvcHljb250ZW50cwlbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCmFkanVzdHhmb3Jtc2ZvcmlucHV0CVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKYmluZG1hdGVyaWFscwlbIDAJbG9ja3M9MCBdCSgJbm9iaW5kCSkKcmVmdHlwZQlbIDAJbG9ja3M9MCBdCSgJcGF5bG9hZHdlYWsJKQpyZWZwcmltCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCnJlZnByaW1wYXRoCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCnByaW1wYXRoCVsgMAlsb2Nrcz0wIF0JKAkvJE9TCSkKaW5zdGFuY2VhYmxlCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnBhcmVudHByaW1raW5kCVsgMAlsb2Nrcz0wIF0JKAlncm91cAkpCnBhcmVudHByaW10eXBlCVsgMAlsb2Nrcz0wIF0JKAlVc2RHZW9tWGZvcm0JKQpzaG93bG9wc3RhZ2UJWyAwCWxvY2tzPTAgXQkoCSJgb3BpbnB1dHBhdGgoXCIuXCIsIDApYCIJKQpzZXBwYXJtCVsgMAlsb2Nrcz0wIF0JKAkpCmVuYWJsZV9ncm91cAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpncm91cAlbIDAJbG9ja3M9MCBdCSgJIiIJKQplbmFibGVfZ3JvdXB0eXBlCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmdyb3VwdHlwZQlbIDAJbG9ja3M9MCBdCSgJcHJpbWl0aXZlCSkKZW5hYmxlX3BhdGhwcmVmaXgJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQpwYXRocHJlZml4CVsgMAlsb2Nrcz0wIF0JKAkvJE9TCSkKZW5hYmxlX3NhdmVwYXRoCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnNhdmVwYXRoCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCnNlcHBhcm0yCVsgMAlsb2Nrcz0wIF0JKAkpCmZvbGRlcjEJWyAwCWxvY2tzPTAgXQkoCTAJMAkwCSkKeE9yZAlbIDAJbG9ja3M9MCBdCSgJInNydCIJKQpyT3JkCVsgMAlsb2Nrcz0wIF0JKAkieHl6IgkpCnQJWyAwCWxvY2tzPTAgXQkoCTAJMAkwCSkKcglbIDAJbG9ja3M9MCBdCSgJMAkwCTAJKQpzCVsgMAlsb2Nrcz0wIF0JKAkxCTEJMQkpCnNoZWFyCVsgMAlsb2Nrcz0wIF0JKAkwCTAJMAkpCnNjYWxlCVsgMAlsb2Nrcz0wIF0JKAkxCSkKcGFybWdyb3VwX3Bpdm90eGZvcm0JWyAwCWxvY2tzPTAgXQkoCTAJKQpwCVsgMAlsb2Nrcz0wIF0JKAkwCTAJMAkpCnByCVsgMAlsb2Nrcz0wIF0JKAkwCTAJMAkpCnByaW1pdGl2ZWRlZmluaXRpb25ncm91cAlbIDAJbG9ja3M9MCBdCSgJMAkpCmVuYWJsZV9wYWNrZWR1c2RoYW5kbGluZwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpwYWNrZWR1c2RoYW5kbGluZwlbIDAJbG9ja3M9MCBdCSgJeGZvcm1hbmRhdHRyaWJzCSkKZW5hYmxlX290aGVycHJpbWhhbmRsaW5nCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm90aGVycHJpbWhhbmRsaW5nCVsgMAlsb2Nrcz0wIF0JKAlkZWZpbmUJKQplbmFibGVfZGVmaW5lb25seWxlYWZwcmltcwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpkZWZpbmVvbmx5bGVhZnByaW1zCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmVuYWJsZV9wYWNrZWRoYW5kbGluZwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpwYWNrZWRoYW5kbGluZwlbIDAJbG9ja3M9MCBdCSgJbmF0aXZlaW5zdGFuY2VzCSkKZW5hYmxlX251cmJzY3VydmVoYW5kbGluZwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpudXJic2N1cnZlaGFuZGxpbmcJWyAwCWxvY2tzPTAgXQkoCWJhc2lzY3VydmVzCSkKZW5hYmxlX251cmJzc3VyZmhhbmRsaW5nCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm51cmJzc3VyZmhhbmRsaW5nCVsgMAlsb2Nrcz0wIF0JKAltZXNoZXMJKQplbmFibGVfa2luZHNjaGVtYQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpraW5kc2NoZW1hCVsgMAlsb2Nrcz0wIF0JKAljb21wb25lbnQJKQplbmFibGVfcGF0aGF0dHIJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKcGF0aGF0dHIJWyAwCWxvY2tzPTAgXQkoCXBhdGgsbmFtZQkpCmVuYWJsZV9wcmVmaXhhYnNvbHV0ZXBhdGhzCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnByZWZpeGFic29sdXRlcGF0aHMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKZW5hYmxlX2hlaWdodGZpZWxkY29udmVydAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpoZWlnaHRmaWVsZGNvbnZlcnQJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKZ2VvbWV0cnloYW5kbGluZ2dyb3VwCVsgMAlsb2Nrcz0wIF0JKAkwCSkKZW5hYmxlX3BvbHlnb25zYXNzdWJkCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnBvbHlnb25zYXNzdWJkCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmVuYWJsZV9zdWJkZ3JvdXAJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKc3ViZGdyb3VwCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmVuYWJsZV9yZXZlcnNlcG9seWdvbnMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKcmV2ZXJzZXBvbHlnb25zCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmVuYWJsZV9zZXRtaXNzaW5nd2lkdGhzCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKc2V0bWlzc2luZ3dpZHRocwlbIDAJbG9ja3M9MCBdCSgJMC4wMQkpCmltcG9ydGRhdGFncm91cAlbIDAJbG9ja3M9MCBdCSgJMAkpCmF1dGhvcnRpbWVzYW1wbGVzCVsgMAlsb2Nrcz0wIF0JKAlhdXRvCSkKZW5hYmxlX3NldGRlZmF1bHRwcmltCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnNldGRlZmF1bHRwcmltCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKZW5hYmxlX3RvcG9sb2d5aGFuZGxpbmcJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKdG9wb2xvZ3loYW5kbGluZwlbIDAJbG9ja3M9MCBdCSgJYW5pbWF0ZWQJKQplbmFibGVfYXR0cmlicwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQphdHRyaWJzCVsgMAlsb2Nrcz0wIF0JKAkiKiBeX18qIF51c2QqIgkpCmVuYWJsZV9pbmRleGF0dHJpYnMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKaW5kZXhhdHRyaWJzCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmVuYWJsZV9jb25zdGFudGF0dHJpYnMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKY29uc3RhbnRhdHRyaWJzCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmVuYWJsZV9zY2FsYXJjb25zdGFudGF0dHJpYnMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKc2NhbGFyY29uc3RhbnRhdHRyaWJzCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmVuYWJsZV9ib29sYXR0cmlicwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpib29sYXR0cmlicwlbIDAJbG9ja3M9MCBdCSgJIiIJKQplbmFibGVfdWludGF0dHJpYnMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKdWludGF0dHJpYnMJWyAwCWxvY2tzPTAgXQkoCSIiCSkKZW5hYmxlX3VpbnQ2NGF0dHJpYnMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKdWludDY0YXR0cmlicwlbIDAJbG9ja3M9MCBdCSgJIiIJKQplbmFibGVfc3RhdGljYXR0cmlicwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpzdGF0aWNhdHRyaWJzCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmVuYWJsZV9wYXJ0aXRpb25hdHRyaWJzCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKcGFydGl0aW9uYXR0cmlicwlbIDAJbG9ja3M9MCBdCSgJc2hvcF9tYXRlcmlhbHBhdGgJKQplbmFibGVfcHJlZml4cGFydGl0aW9uc3Vic2V0cwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpwcmVmaXhwYXJ0aXRpb25zdWJzZXRzCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKZW5hYmxlX3N1YnNldGdyb3VwcwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpzdWJzZXRncm91cHMJWyAwCWxvY2tzPTAgXQkoCSIiCSkKZW5hYmxlX2N1c3RvbWF0dHJpYnMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKY3VzdG9tYXR0cmlicwlbIDAJbG9ja3M9MCBdCSgJIiIJKQplbmFibGVfdHJhbnNsYXRldXZ0b3N0CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnRyYW5zbGF0ZXV2dG9zdAlbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCm1hdGVyaWFsc2dyb3VwCVsgMAlsb2Nrcz0wIF0JKAkwCSkKZmlsbG1hdGVyaWFscwlbIDAJbG9ja3M9MCBdCSgJMAkpCm1hdGVyaWFscwlbIDAJbG9ja3M9MCBdCSgJMAkpCn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMjcwMDAwMDAwMDAzMnN0YWdlL1RyYWNpbmcudXNlcmRhdGEAAAAAAQANX19fVmVyc2lvbl9fXwAAAAMAATIwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA0MDAwMDAwMDAwNzIxc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlLmRlZgBzb3BmbGFncyBzb3BmbGFncyA9IApjb21tZW50ICIiCnBvc2l0aW9uIDEuNzEzMDkgNC43MjExMwpjb25uZWN0b3JuZXh0aWQgMQpmbGFncyA9ICBsb2NrIG9mZiBtb2RlbCBvZmYgdGVtcGxhdGUgb2ZmIGZvb3RwcmludCBvZmYgeHJheSBvZmYgYnlwYXNzIG9mZiBkaXNwbGF5IG9mZiByZW5kZXIgb2ZmIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7CjAgIm91dHB1dDEiCn0KaW5wdXRzTmFtZWQzCnsKfQppbnB1dHMKewp9CnN0YXQKewogIGNyZWF0ZSAxNTY4NDI4NzYxCiAgbW9kaWZ5IDE3NTE1OTkxMjMKICBhdXRob3Igbm9ib2R5QG5vd2hlcmUKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjggMC44IDAuOCAKZGVsc2NyaXB0ICIiCmV4cHJsYW5ndWFnZSBoc2NyaXB0CmVuZAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA0MTAwMDAwMDAwMzIwc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlLnBhcm0Aewp2ZXJzaW9uIDAuOApsYWJlbDEJWyAwCWxvY2tzPTAgXQkoCSJTdWItTmV0d29yayBJbnB1dCAjMSIJKQpsYWJlbDIJWyAwCWxvY2tzPTAgXQkoCSJTdWItTmV0d29yayBJbnB1dCAjMiIJKQpsYWJlbDMJWyAwCWxvY2tzPTAgXQkoCSJTdWItTmV0d29yayBJbnB1dCAjMyIJKQpsYWJlbDQJWyAwCWxvY2tzPTAgXQkoCSJTdWItTmV0d29yayBJbnB1dCAjNCIJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDQ1MDAwMDAwMDAwNDFzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUudXNlcmRhdGEAAAAAAQANX19fVmVyc2lvbl9fXwAAAAMACDIwLjUuNTUwMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNDAwMDAwMDAwMDUxNXN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS5pbnAANAowIDcuOTUyMDE5MDkwNDc4OTc1NCAtNC45MDE4ODAxNzI1MzQ0MDU3IDIgMCBfX05PX09XTkVSX05FVFdPUktfQk9YX18gIkZST01PVVRQVVQiCjEgNy45NTIwMTkwOTA0Nzg5NzU0IC0zLjc3MjM4MDE3MjUzNDQwNTEgMiAwIF9fTk9fT1dORVJfTkVUV09SS19CT1hfXyAiRlJPTU9VVFBVVCIKMiAxMC4yMTEyMTkwOTA0Nzg5NzUgLTQuNDUwMDgwMTU0NTgxNDg3IDIgMCBfX05PX09XTkVSX05FVFdPUktfQk9YX18gIkZST01PVVRQVVQiCjMgMTAuMjExMjE5MDkwNDc4OTc1IC0zLjMyMDU4MDE1NDU4MTQ4NjQgMiAwIF9fTk9fT1dORVJfTkVUV09SS19CT1hfXyAiRlJPTU9VVFBVVCIKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNjcwMDAwMDAwMDA1M3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS90ZXN0Z2VvbWV0cnlfcGlnaGVhZDEuaW5pdAB0eXBlID0gdGVzdGdlb21ldHJ5X3BpZ2hlYWQKbWF0Y2hlc2RlZiA9IDEKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNjYwMDAwMDAwMDcxM3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS90ZXN0Z2VvbWV0cnlfcGlnaGVhZDEuZGVmAHNvcGZsYWdzIHNvcGZsYWdzID0gCmNvbW1lbnQgIiIKcG9zaXRpb24gNC4wMjQ1NyAxLjAxODUKY29ubmVjdG9ybmV4dGlkIDEKZmxhZ3MgPSAgbG9jayBvZmYgbW9kZWwgb2ZmIHRlbXBsYXRlIG9mZiBmb290cHJpbnQgb2ZmIHhyYXkgb2ZmIGJ5cGFzcyBvZmYgZGlzcGxheSBvZmYgcmVuZGVyIG9mZiBoaWdobGlnaHQgb2ZmIHVubG9hZCBvZmYgc2F2ZWRhdGEgb2ZmIGNvbXByZXNzIG9uIGNvbG9yZGVmYXVsdCBvbiBleHBvc2VkIG9uCm91dHB1dHNOYW1lZDMKewowICJvdXRwdXQxIgp9CmlucHV0c05hbWVkMwp7Cn0KaW5wdXRzCnsKfQpzdGF0CnsKICBjcmVhdGUgMTc1MDIxMTM5MwogIG1vZGlmeSAxNzUxNTk4NDE1CiAgYXV0aG9yIGpvcmdlQFIxCiAgYWNjZXNzIDA3NzcKfQpjb2xvciBVVF9Db2xvciBSR0IgMC41MiAwLjggMC45IApkZWxzY3JpcHQgIiIKZXhwcmxhbmd1YWdlIGhzY3JpcHQKZW5kCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDY3MDAwMDAwMDAyNTRzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvdGVzdGdlb21ldHJ5X3BpZ2hlYWQxLnBhcm0Aewp2ZXJzaW9uIDAuOAp0CVsgMAlsb2Nrcz0wIF0JKAkwCTAJMAkpCnIJWyAwCWxvY2tzPTAgXQkoCTAJMAkwCSkKdW5pZm9ybXNjYWxlCVsgMAlsb2Nrcz0wIF0JKAkxCSkKZGlmZmljdWx0eQlbIDAJbG9ja3M9MCBdCSgJIm1lZGl1bSIJKQphZGRzaGFkZXIJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDczMDAwMDAwMDAxMzVzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvdGVzdGdlb21ldHJ5X3BpZ2hlYWQxLnVzZXJkYXRhAAAAAAMADV9fX1ZlcnNpb25fX18AAAADAAAAD19fX3Rvb2xjb3VudF9fXwAAAAMAATEADF9fX3Rvb2xpZF9fXwAAAAMAGHNvcF90ZXN0Z2VvbWV0cnlfcGlnaGVhZDA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDEwMDAwMDAwMDA2MzRvYmouZGVmAGNvbW1lbnQgIiIKcG9zaXRpb24gMCAwCmNvbm5lY3Rvcm5leHRpZCAwCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb24gcmVuZGVyIG9uIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7Cn0KaW5wdXRzTmFtZWQzCnsKfQppbnB1dHMKewp9CnN0YXQKewogIGNyZWF0ZSAxNzUwMjA1NTMwCiAgbW9kaWZ5IDE3NTAyMTA1NTIKICBhdXRob3Igam9yZ2VAUjEKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjggMC44IDAuOCAKZGVsc2NyaXB0ICIiCmV4cHJsYW5ndWFnZSBoc2NyaXB0CmVuZAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxMTAwMDAwMDAwMDIwb2JqLnBhcm0Aewp2ZXJzaW9uIDAuOAp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDE1MDAwMDAwMDAwNDFvYmoudXNlcmRhdGEAAAAAAQANX19fVmVyc2lvbl9fXwAAAAMACDIwLjUuNTUwMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTAwMDAwMDAwMDAwMm9iai5uZXQAMQowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxMDAwMDAwMDAwNjQwb3V0LmRlZgBjb21tZW50ICIiCnBvc2l0aW9uIDAgMS41CmNvbm5lY3Rvcm5leHRpZCAwCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb2ZmIHJlbmRlciBvZmYgaGlnaGxpZ2h0IG9mZiB1bmxvYWQgb2ZmIHNhdmVkYXRhIG9mZiBjb21wcmVzcyBvbiBjb2xvcmRlZmF1bHQgb24gZXhwb3NlZCBvbgpvdXRwdXRzTmFtZWQzCnsKfQppbnB1dHNOYW1lZDMKewp9CmlucHV0cwp7Cn0Kc3RhdAp7CiAgY3JlYXRlIDE3NTAyMDU1MzAKICBtb2RpZnkgMTc1MDIxMDU1MgogIGF1dGhvciBqb3JnZUBSMQogIGFjY2VzcyAwNzc3Cn0KY29sb3IgVVRfQ29sb3IgUkdCIDAuOCAwLjggMC44IApkZWxzY3JpcHQgIiIKZXhwcmxhbmd1YWdlIGhzY3JpcHQKZW5kCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDExMDAwMDAwMDAwMjBvdXQucGFybQB7CnZlcnNpb24gMC44Cn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTUwMDAwMDAwMDA0MW91dC51c2VyZGF0YQAAAAABAA1fX19WZXJzaW9uX19fAAAAAwAIMjAuNS41NTAwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxMDAwMDAwMDAwMDAyb3V0Lm5ldAAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDA3MDAwMDAwMDA2NDFjaC5kZWYAY29tbWVudCAiIgpwb3NpdGlvbiAwIDAuNzUKY29ubmVjdG9ybmV4dGlkIDAKZmxhZ3MgPSAgbG9jayBvZmYgbW9kZWwgb2ZmIHRlbXBsYXRlIG9mZiBmb290cHJpbnQgb2ZmIHhyYXkgb2ZmIGJ5cGFzcyBvZmYgZGlzcGxheSBvZmYgcmVuZGVyIG9mZiBoaWdobGlnaHQgb2ZmIHVubG9hZCBvZmYgc2F2ZWRhdGEgb2ZmIGNvbXByZXNzIG9uIGNvbG9yZGVmYXVsdCBvbiBleHBvc2VkIG9uCm91dHB1dHNOYW1lZDMKewp9CmlucHV0c05hbWVkMwp7Cn0KaW5wdXRzCnsKfQpzdGF0CnsKICBjcmVhdGUgMTc1MDIwNTUzMAogIG1vZGlmeSAxNzUwMjEwNTUyCiAgYXV0aG9yIGpvcmdlQFIxCiAgYWNjZXNzIDA3NzcKfQpjb2xvciBVVF9Db2xvciBSR0IgMC44IDAuOCAwLjggCmRlbHNjcmlwdCAiIgpleHBybGFuZ3VhZ2UgaHNjcmlwdAplbmQKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTAwMDAwMDAwMDAyMGNoLnBhcm0Aewp2ZXJzaW9uIDAuOAp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDE0MDAwMDAwMDAwNDFjaC51c2VyZGF0YQAAAAABAA1fX19WZXJzaW9uX19fAAAAAwAIMjAuNS41NTAwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAwNzAwMDAwMDAwMDAyY2gubmV0ADEKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTEwMDAwMDAwMDY0MXNob3AuZGVmAGNvbW1lbnQgIiIKcG9zaXRpb24gMCAyLjI1CmNvbm5lY3Rvcm5leHRpZCAwCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb2ZmIHJlbmRlciBvZmYgaGlnaGxpZ2h0IG9mZiB1bmxvYWQgb2ZmIHNhdmVkYXRhIG9mZiBjb21wcmVzcyBvbiBjb2xvcmRlZmF1bHQgb24gZXhwb3NlZCBvbgpvdXRwdXRzTmFtZWQzCnsKfQppbnB1dHNOYW1lZDMKewp9CmlucHV0cwp7Cn0Kc3RhdAp7CiAgY3JlYXRlIDE3NTAyMDU1MzEKICBtb2RpZnkgMTc1MDIxMDU1MgogIGF1dGhvciBqb3JnZUBSMQogIGFjY2VzcyAwNzc3Cn0KY29sb3IgVVRfQ29sb3IgUkdCIDAuOCAwLjggMC44IApkZWxzY3JpcHQgIiIKZXhwcmxhbmd1YWdlIGhzY3JpcHQKZW5kCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDEyMDAwMDAwMDAwMjBzaG9wLnBhcm0Aewp2ZXJzaW9uIDAuOAp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDE2MDAwMDAwMDAwNDFzaG9wLnVzZXJkYXRhAAAAAAEADV9fX1ZlcnNpb25fX18AAAADAAgyMC41LjU1MDA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDExMDAwMDAwMDAwMDJzaG9wLm5ldAAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDEwMDAwMDAwMDA2MzZpbWcuZGVmAGNvbW1lbnQgIiIKcG9zaXRpb24gMCAzCmNvbm5lY3Rvcm5leHRpZCAwCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb2ZmIHJlbmRlciBvZmYgaGlnaGxpZ2h0IG9mZiB1bmxvYWQgb2ZmIHNhdmVkYXRhIG9mZiBjb21wcmVzcyBvbiBjb2xvcmRlZmF1bHQgb24gZXhwb3NlZCBvbgpvdXRwdXRzTmFtZWQzCnsKfQppbnB1dHNOYW1lZDMKewp9CmlucHV0cwp7Cn0Kc3RhdAp7CiAgY3JlYXRlIDE3NTAyMDU1MzEKICBtb2RpZnkgMTc1MDIxMDU1MgogIGF1dGhvciBqb3JnZUBSMQogIGFjY2VzcyAwNzc3Cn0KY29sb3IgVVRfQ29sb3IgUkdCIDAuOCAwLjggMC44IApkZWxzY3JpcHQgIiIKZXhwcmxhbmd1YWdlIGhzY3JpcHQKZW5kCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDExMDAwMDAwMDAwMjBpbWcucGFybQB7CnZlcnNpb24gMC44Cn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTUwMDAwMDAwMDA0MWltZy51c2VyZGF0YQAAAAABAA1fX19WZXJzaW9uX19fAAAAAwAIMjAuNS41NTAwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxNzAwMDAwMDAwMDMyaW1nL2NvbXAxLmluaXQAdHlwZSA9IGltZwptYXRjaGVzZGVmID0gMAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxNjAwMDAwMDAwNjM3aW1nL2NvbXAxLmRlZgBjb21tZW50ICIiCnBvc2l0aW9uIDEgMQpjb25uZWN0b3JuZXh0aWQgMApmbGFncyA9ICBsb2NrIG9mZiBtb2RlbCBvZmYgdGVtcGxhdGUgb2ZmIGZvb3RwcmludCBvZmYgeHJheSBvZmYgYnlwYXNzIG9mZiBkaXNwbGF5IG9mZiByZW5kZXIgb2ZmIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb2ZmCm91dHB1dHNOYW1lZDMKewp9CmlucHV0c05hbWVkMwp7Cn0KaW5wdXRzCnsKfQpzdGF0CnsKICBjcmVhdGUgMTc1MDIwNTU1OQogIG1vZGlmeSAxNzUwMjEwNTUyCiAgYXV0aG9yIGpvcmdlQFIxCiAgYWNjZXNzIDA3NzcKfQpjb2xvciBVVF9Db2xvciBSR0IgMC44IDAuOCAwLjggCmRlbHNjcmlwdCAiIgpleHBybGFuZ3VhZ2UgaHNjcmlwdAplbmQKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTcwMDAwMDAwMDAyMGltZy9jb21wMS5wYXJtAHsKdmVyc2lvbiAwLjgKfQowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAyMzAwMDAwMDAwMDQxaW1nL2NvbXAxLnVzZXJkYXRhAAAAAAEADV9fX1ZlcnNpb25fX18AAAADAAgyMC41LjU1MDA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDE2MDAwMDAwMDAwMDJpbWcvY29tcDEubmV0ADEKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMjEwMDAwMDAwMDAzNWltZy9jb3BuZXQxLmluaXQAdHlwZSA9IGNvcG5ldAptYXRjaGVzZGVmID0gMAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAyMDAwMDAwMDAwNjM2aW1nL2NvcG5ldDEuZGVmAGNvbW1lbnQgIiIKcG9zaXRpb24gMCAwCmNvbm5lY3Rvcm5leHRpZCAwCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb2ZmIHJlbmRlciBvZmYgaGlnaGxpZ2h0IG9mZiB1bmxvYWQgb2ZmIHNhdmVkYXRhIG9mZiBjb21wcmVzcyBvbiBjb2xvcmRlZmF1bHQgb24gZXhwb3NlZCBvbgpvdXRwdXRzTmFtZWQzCnsKfQppbnB1dHNOYW1lZDMKewp9CmlucHV0cwp7Cn0Kc3RhdAp7CiAgY3JlYXRlIDE3NTAyMDU1NTkKICBtb2RpZnkgMTc1MDIxMDU1MgogIGF1dGhvciBqb3JnZUBSMQogIGFjY2VzcyAwNzc3Cn0KY29sb3IgVVRfQ29sb3IgUkdCIDAuOCAwLjggMC44IApkZWxzY3JpcHQgIiIKZXhwcmxhbmd1YWdlIGhzY3JpcHQKZW5kCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDIxMDAwMDAwMDA1NzVpbWcvY29wbmV0MS5wYXJtAHsKdmVyc2lvbiAwLjgKc2V0cmVzCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnJlcwlbIDAJbG9ja3M9MCBdCSgJMTAyNAkxMDI0CSkKcmVzbWVudQlbIDAJbG9ja3M9MCBdCSgJIm5vbmUiCSkKc2V0cGl4ZWxzY2FsZQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpwaXhlbHNjYWxlCVsgMAlsb2Nrcz0wIF0JKAkyCSkKc2V0Ym9yZGVyCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmJvcmRlcglbIDAJbG9ja3M9MCBdCSgJIndyYXAiCSkKc2V0cHJlY2lzaW9uCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnByZWNpc2lvbglbIDAJbG9ja3M9MCBdCSgJImIzMiIJKQpzZXR2aXN0aWxlCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnZpc3RpbGUJWyAwCWxvY2tzPTAgXQkoCTMJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDI1MDAwMDAwMDAwNDFpbWcvY29wbmV0MS51c2VyZGF0YQAAAAABAA1fX19WZXJzaW9uX19fAAAAAwAIMjAuNS41NTAwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAyMDAwMDAwMDAwMDAyaW1nL2NvcG5ldDEubmV0ADEKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTIwMDAwMDAwMDAyMGltZy5vcmRlcgAyCmNvbXAxCmNvcG5ldDEKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTAwMDAwMDAwMDAwMmltZy5uZXQAMQowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAxMDAwMDAwMDAwMDAydmV4Lm5ldAAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDEwMDAwMDAwMDAwMDJtYXQubmV0ADEKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNTAwMDAwMDAwMDAzNHN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9jYXJ2ZTEuaW5pdAB0eXBlID0gY2FydmUKbWF0Y2hlc2RlZiA9IDEKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNDcwMDAwMDAwMDc2M3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9jYXJ2ZTEuZGVmAHNvcGZsYWdzIHNvcGZsYWdzID0gCmNvbW1lbnQgIiIKcG9zaXRpb24gMy45ODUzNSAtNy43MjcyOQpjb25uZWN0b3JuZXh0aWQgMgpmbGFncyA9ICBsb2NrIG9mZiBtb2RlbCBvZmYgdGVtcGxhdGUgb2ZmIGZvb3RwcmludCBvZmYgeHJheSBvZmYgYnlwYXNzIG9mZiBkaXNwbGF5IG9mZiByZW5kZXIgb2ZmIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7CjEgIm91dHB1dDEiCn0KaW5wdXRzTmFtZWQzCnsKMCAJc21vb3RoMSAxIDEgImlucHV0MSIKfQppbnB1dHMKewowIAlzbW9vdGgxIDAgMQp9CnN0YXQKewogIGNyZWF0ZSAxNzUwMjA4NTQwCiAgbW9kaWZ5IDE3NTE1OTkxMjQKICBhdXRob3Igam9yZ2VAUjEKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjggMC44IDAuOCAKZGVsc2NyaXB0ICIiCmV4cHJsYW5ndWFnZSBoc2NyaXB0CmVuZAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA0NzAwMDAwMDAwMjIxc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL2NhcnZlMS5jaG4AewogICAgY2hhbm5lbCBkb21haW51MiB7CiAgICAgIGxlZnR0eXBlID0gZXh0ZW5kCiAgICAgIHJpZ2h0dHlwZSA9IGV4dGVuZAogICAgICBmbGFncyA9IDAKICAgICAgc2VnbWVudCB7IGxlbmd0aCA9IDAgZXhwciA9ICRGRi80OCUxIH0KICAgIH0KICB9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDUwMDAwMDAwMDIwMDNzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvY2FydmUxLnBhcm0Aewp2ZXJzaW9uIDAuOApncm91cAlbIDAJbG9ja3M9MCBdCSgJIiIJKQphcmNsZW4JWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKZmlyc3R1CVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKZG9tYWludTEJWyAwCWxvY2tzPTAgXQkoCTAJKQp1c2Vkb21haW51MWF0dHJpYglbIDAJbG9ja3M9MCBdCSgJImNvbnN0YW50IgkpCmRvbWFpbnUxYXR0cmliCVsgMAlsb2Nrcz0wIF0JKAljYXJ2ZXUwCSkKc2Vjb25kdQlbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCmRvbWFpbnUyCVsgOAlsb2Nrcz0wIF0JKAlbIGRvbWFpbnUyCTAuNzUgXSAJKQp1c2Vkb21haW51MmF0dHJpYglbIDAJbG9ja3M9MCBdCSgJImNvbnN0YW50IgkpCmRvbWFpbnUyYXR0cmliCVsgMAlsb2Nrcz0wIF0JKAljYXJ2ZXUxCSkKZmlyc3R2CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmRvbWFpbnYxCVsgMAlsb2Nrcz0wIF0JKAkwCSkKdXNlZG9tYWludjFhdHRyaWIJWyAwCWxvY2tzPTAgXQkoCSJjb25zdGFudCIJKQpkb21haW52MWF0dHJpYglbIDAJbG9ja3M9MCBdCSgJIiIJKQpzZWNvbmR2CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmRvbWFpbnYyCVsgMAlsb2Nrcz0wIF0JKAkwLjI2MwkpCnVzZWRvbWFpbnYyYXR0cmliCVsgMAlsb2Nrcz0wIF0JKAkiY29uc3RhbnQiCSkKZG9tYWludjJhdHRyaWIJWyAwCWxvY2tzPTAgXQkoCSIiCSkKb25seWJyZWFrcG9pbnRzCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkib2ZmIgkpCmRpdnN1CVsgMAlsb2Nrcz0wIF0JKAkyCSkKZGl2c3YJWyAwCWxvY2tzPTAgXQkoCTIJKQphbGx1YnJlYWtwb2ludHMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKYWxsdmJyZWFrcG9pbnRzCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnN0ZHN3aXRjaGVyCVsgMAlsb2Nrcz0wIF0JKAkwCTAJKQprZWVwaW4JWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQprZWVwb3V0CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmV4dHJhY3RvcAlbIDAJbG9ja3M9MCBdCSgJInhpc29wYXJtIgkpCmtlZXBPcmlnaW5hbAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDU0MDAwMDAwMDAwNDFzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvY2FydmUxLnVzZXJkYXRhAAAAAAEADV9fX1ZlcnNpb25fX18AAAADAAgyMC41LjU1MDA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDcxMDAwMDAwMDAwNTVzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvdGVzdGdlb21ldHJ5X3J1YmJlcnRveTEuaW5pdAB0eXBlID0gdGVzdGdlb21ldHJ5X3J1YmJlcnRveQptYXRjaGVzZGVmID0gMQowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA3MDAwMDAwMDAwNzE0c3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Rlc3RnZW9tZXRyeV9ydWJiZXJ0b3kxLmRlZgBzb3BmbGFncyBzb3BmbGFncyA9IApjb21tZW50ICIiCnBvc2l0aW9uIDcuMjg1NjUgNC4xOTYxMQpjb25uZWN0b3JuZXh0aWQgMQpmbGFncyA9ICBsb2NrIG9mZiBtb2RlbCBvZmYgdGVtcGxhdGUgb2ZmIGZvb3RwcmludCBvZmYgeHJheSBvZmYgYnlwYXNzIG9mZiBkaXNwbGF5IG9mZiByZW5kZXIgb2ZmIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7CjAgIm91dHB1dDEiCn0KaW5wdXRzTmFtZWQzCnsKfQppbnB1dHMKewp9CnN0YXQKewogIGNyZWF0ZSAxNzUwMjEwNTg0CiAgbW9kaWZ5IDE3NTAyMTEzODEKICBhdXRob3Igam9yZ2VAUjEKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjUyIDAuOCAwLjkgCmRlbHNjcmlwdCAiIgpleHBybGFuZ3VhZ2UgaHNjcmlwdAplbmQKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNzEwMDAwMDAwMDI1MnN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS90ZXN0Z2VvbWV0cnlfcnViYmVydG95MS5wYXJtAHsKdmVyc2lvbiAwLjgKdAlbIDAJbG9ja3M9MCBdCSgJMAkwCTAJKQpyCVsgMAlsb2Nrcz0wIF0JKAkwCTAJMAkpCnVuaWZvcm1zY2FsZQlbIDAJbG9ja3M9MCBdCSgJMQkpCmRpZmZpY3VsdHkJWyAwCWxvY2tzPTAgXQkoCSJoYXJkIgkpCmFkZHNoYWRlcglbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNzUwMDAwMDAwMDEzN3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS90ZXN0Z2VvbWV0cnlfcnViYmVydG95MS51c2VyZGF0YQAAAAADAA1fX19WZXJzaW9uX19fAAAAAwAAAA9fX190b29sY291bnRfX18AAAADAAExAAxfX190b29saWRfX18AAAADABpzb3BfdGVzdGdlb21ldHJ5X3J1YmJlcnRveTA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDUwMDAwMDAwMDAwNDJzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvZ3JvdXAxLmluaXQAdHlwZSA9IGdyb3VwY3JlYXRlCm1hdGNoZXNkZWYgPSAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDQ3MDAwMDAwMDA3NzBzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvZ3JvdXAxLmRlZgBzb3BmbGFncyBzb3BmbGFncyA9IApjb21tZW50ICIiCnBvc2l0aW9uIDQuMDYzNzkgLTEuMjA5MjkKY29ubmVjdG9ybmV4dGlkIDIKZmxhZ3MgPSAgbG9jayBvZmYgbW9kZWwgb2ZmIHRlbXBsYXRlIG9mZiBmb290cHJpbnQgb2ZmIHhyYXkgb2ZmIGJ5cGFzcyBvZmYgZGlzcGxheSBvZmYgcmVuZGVyIG9mZiBoaWdobGlnaHQgb24gdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7CjEgIm91dHB1dDEiCn0KaW5wdXRzTmFtZWQzCnsKMCAJc3ViZGl2aWRlMSAxIDEgImlucHV0MSIKfQppbnB1dHMKewowIAlzdWJkaXZpZGUxIDAgMQp9CnN0YXQKewogIGNyZWF0ZSAxNzUwMjEwNzMzCiAgbW9kaWZ5IDE3NTE1OTg5MjEKICBhdXRob3Igam9yZ2VAUjEKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjggMC44IDAuOCAKZGVsc2NyaXB0ICIiCmV4cHJsYW5ndWFnZSBoc2NyaXB0CmVuZAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA1MDAwMDAwMDAzMTE2c3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL2dyb3VwMS5wYXJtAHsKdmVyc2lvbiAwLjgKZ3JvdXBuYW1lCVsgMAlsb2Nrcz0wIF0JKAlzdGFydAkpCmdyb3VwdHlwZQlbIDAJbG9ja3M9MCBdCSgJInBvaW50IgkpCm1lcmdlb3AJWyAwCWxvY2tzPTAgXQkoCSJyZXBsYWNlIgkpCmZvbGRlcjAJWyAwCWxvY2tzPTAgXQkoCTAJKQpncm91cGJhc2UJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQpiYXNlZ3JvdXAJWyAwCWxvY2tzPTAgXQkoCSIxMTA3OSAzMzQ2MiIJKQpvcmRlcmVkCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmdlb3R5cGUJWyAwCWxvY2tzPTAgXQkoCSJhbGwiCSkKc3dpdGNoZXIzCVsgMAlsb2Nrcz0wIF0JKAkwCSkKZ3JvdXBib3VuZGluZwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpib3VuZHR5cGUJWyAwCWxvY2tzPTAgXQkoCSJ1c2ViYm94IgkpCnNpemUJWyAwCWxvY2tzPTAgXQkoCTEJMQkxCSkKdAlbIDAJbG9ja3M9MCBdCSgJMAkwCTAJKQppbml0Ym91bmRzCVsgMAlsb2Nrcz0wIF0JKAkwCSkKaW5jbHVkZW5vdHdob2xseWNvbnRhaW5lZAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQppc28JWyAwCWxvY2tzPTAgXQkoCTAJKQppbnZlcnR2b2x1bWUJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKc3dpdGNoZXI0CVsgMAlsb2Nrcz0wIF0JKAkwCSkKZ3JvdXBub3JtYWwJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKY2FtZXJhcGF0aAlbIDAJbG9ja3M9MCBdCSgJIiIJKQpub25wbGFuYXIJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKbm9ucGxhbmFydG9sCVsgMAlsb2Nrcz0wIF0JKAkwLjAwMQkpCmRpcglbIDAJbG9ja3M9MCBdCSgJMAkwCTEJKQphbmdsZQlbIDAJbG9ja3M9MCBdCSgJMTgwCSkKb3Bwb3NpdGVub3JtYWxzCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnN3aXRjaGVyNQlbIDAJbG9ja3M9MCBdCSgJMAkpCmdyb3VwZWRnZXMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKZG9taW5lZGdlYW5nbGUJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKbWluZWRnZWFuZ2xlCVsgMAlsb2Nrcz0wIF0JKAkyMAkpCmRvbWF4ZWRnZWFuZ2xlCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm1heGVkZ2VhbmdsZQlbIDAJbG9ja3M9MCBdCSgJMjAJKQplZGdlYW5nbGViZXR3ZWVuZWRnZXMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKZG9taW5lZGdlbGVuCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm1pbmVkZ2VsZW4JWyAwCWxvY2tzPTAgXQkoCTAJKQpkb21heGVkZ2VsZW4JWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKbWF4ZWRnZWxlbglbIDAJbG9ja3M9MCBdCSgJMAkpCmRvZGVwdGgJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKZWRnZXN0ZXAJWyAwCWxvY2tzPTAgXQkoCTAJKQplZGdlcHRncnAJWyAwCWxvY2tzPTAgXQkoCTAJKQp1bnNoYXJlZAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpib3VuZGFyeWdyb3VwcwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpzd2l0Y2hlcjYJWyAwCWxvY2tzPTAgXQkoCTAJKQpncm91cHJhbmRvbQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpnbG9iYWxzZWVkCVsgMAlsb2Nrcz0wIF0JKAkwLjUJKQp1c2VzZWVkYXR0cmliCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnNlZWRhdHRyaWIJWyAwCWxvY2tzPTAgXQkoCWlkCSkKcGVyY2VudAlbIDAJbG9ja3M9MCBdCSgJMC4wMDEJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDU0MDAwMDAwMDAwNDFzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvZ3JvdXAxLnVzZXJkYXRhAAAAAAEADV9fX1ZlcnNpb25fX18AAAADAAgyMC41LjU1MDA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDUwMDAwMDAwMDAwNDJzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvZ3JvdXAyLmluaXQAdHlwZSA9IGdyb3VwY3JlYXRlCm1hdGNoZXNkZWYgPSAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDQ3MDAwMDAwMDA3NjBzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvZ3JvdXAyLmRlZgBzb3BmbGFncyBzb3BmbGFncyA9IApjb21tZW50ICIiCnBvc2l0aW9uIDQuMDYzNzkgLTIuMzM4NzkKY29ubmVjdG9ybmV4dGlkIDIKZmxhZ3MgPSAgbG9jayBvZmYgbW9kZWwgb2ZmIHRlbXBsYXRlIG9mZiBmb290cHJpbnQgb2ZmIHhyYXkgb2ZmIGJ5cGFzcyBvZmYgZGlzcGxheSBvZmYgcmVuZGVyIG9mZiBoaWdobGlnaHQgb24gdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7CjEgIm91dHB1dDEiCn0KaW5wdXRzTmFtZWQzCnsKMCAJZ3JvdXAxIDEgMSAiaW5wdXQxIgp9CmlucHV0cwp7CjAgCWdyb3VwMSAwIDEKfQpzdGF0CnsKICBjcmVhdGUgMTc1MDIxMDczMwogIG1vZGlmeSAxNzUxNjAwNTA0CiAgYXV0aG9yIGpvcmdlQFIxCiAgYWNjZXNzIDA3NzcKfQpjb2xvciBVVF9Db2xvciBSR0IgMC44IDAuOCAwLjggCmRlbHNjcmlwdCAiIgpleHBybGFuZ3VhZ2UgaHNjcmlwdAplbmQKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNTAwMDAwMDAwMzEwMXN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9ncm91cDIucGFybQB7CnZlcnNpb24gMC44Cmdyb3VwbmFtZQlbIDAJbG9ja3M9MCBdCSgJZW5kCSkKZ3JvdXB0eXBlCVsgMAlsb2Nrcz0wIF0JKAkicG9pbnQiCSkKbWVyZ2VvcAlbIDAJbG9ja3M9MCBdCSgJInJlcGxhY2UiCSkKZm9sZGVyMAlbIDAJbG9ja3M9MCBdCSgJMAkpCmdyb3VwYmFzZQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpiYXNlZ3JvdXAJWyAwCWxvY2tzPTAgXQkoCSIiCSkKb3JkZXJlZAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpnZW90eXBlCVsgMAlsb2Nrcz0wIF0JKAkiYWxsIgkpCnN3aXRjaGVyMwlbIDAJbG9ja3M9MCBdCSgJMAkpCmdyb3VwYm91bmRpbmcJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKYm91bmR0eXBlCVsgMAlsb2Nrcz0wIF0JKAkidXNlYmJveCIJKQpzaXplCVsgMAlsb2Nrcz0wIF0JKAkxCTEJMQkpCnQJWyAwCWxvY2tzPTAgXQkoCTAJMAkwCSkKaW5pdGJvdW5kcwlbIDAJbG9ja3M9MCBdCSgJMAkpCmluY2x1ZGVub3R3aG9sbHljb250YWluZWQJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKaXNvCVsgMAlsb2Nrcz0wIF0JKAkwCSkKaW52ZXJ0dm9sdW1lCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnN3aXRjaGVyNAlbIDAJbG9ja3M9MCBdCSgJMAkpCmdyb3Vwbm9ybWFsCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmNhbWVyYXBhdGgJWyAwCWxvY2tzPTAgXQkoCSIiCSkKbm9ucGxhbmFyCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm5vbnBsYW5hcnRvbAlbIDAJbG9ja3M9MCBdCSgJMC4wMDEJKQpkaXIJWyAwCWxvY2tzPTAgXQkoCTAJMAkxCSkKYW5nbGUJWyAwCWxvY2tzPTAgXQkoCTE4MAkpCm9wcG9zaXRlbm9ybWFscwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpzd2l0Y2hlcjUJWyAwCWxvY2tzPTAgXQkoCTAJKQpncm91cGVkZ2VzCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmRvbWluZWRnZWFuZ2xlCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm1pbmVkZ2VhbmdsZQlbIDAJbG9ja3M9MCBdCSgJMjAJKQpkb21heGVkZ2VhbmdsZQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQptYXhlZGdlYW5nbGUJWyAwCWxvY2tzPTAgXQkoCTIwCSkKZWRnZWFuZ2xlYmV0d2VlbmVkZ2VzCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmRvbWluZWRnZWxlbglbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQptaW5lZGdlbGVuCVsgMAlsb2Nrcz0wIF0JKAkwCSkKZG9tYXhlZGdlbGVuCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm1heGVkZ2VsZW4JWyAwCWxvY2tzPTAgXQkoCTAJKQpkb2RlcHRoCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmVkZ2VzdGVwCVsgMAlsb2Nrcz0wIF0JKAkwCSkKZWRnZXB0Z3JwCVsgMAlsb2Nrcz0wIF0JKAkwCSkKdW5zaGFyZWQJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKYm91bmRhcnlncm91cHMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKc3dpdGNoZXI2CVsgMAlsb2Nrcz0wIF0JKAkwCSkKZ3JvdXByYW5kb20JWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQpnbG9iYWxzZWVkCVsgMAlsb2Nrcz0wIF0JKAkwLjI0OAkpCnVzZXNlZWRhdHRyaWIJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKc2VlZGF0dHJpYglbIDAJbG9ja3M9MCBdCSgJaWQJKQpwZXJjZW50CVsgMAlsb2Nrcz0wIF0JKAk1LjMJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDU0MDAwMDAwMDAwNDFzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvZ3JvdXAyLnVzZXJkYXRhAAAAAAEADV9fX1ZlcnNpb25fX18AAAADAAgyMC41LjU1MDA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDU2MDAwMDAwMDAwNDJzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvY29udmVydGxpbmUxLmluaXQAdHlwZSA9IGNvbnZlcnRsaW5lCm1hdGNoZXNkZWYgPSAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDU1MDAwMDAwMDEwMDZzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvY29udmVydGxpbmUxLmRlZgBzb3BmbGFncyBzb3BmbGFncyA9IApjb21tZW50ICIiCnBvc2l0aW9uIDQuMDYzNzkgLTQuNTk3NzkKY29ubmVjdG9ybmV4dGlkIDIKZmxhZ3MgPSAgbG9jayBvZmYgbW9kZWwgb2ZmIHRlbXBsYXRlIG9mZiBmb290cHJpbnQgb2ZmIHhyYXkgb2ZmIGJ5cGFzcyBvbiBkaXNwbGF5IG9mZiByZW5kZXIgb2ZmIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7CjEgIm91dHB1dDEiCn0KaW5wdXRzTmFtZWQzCnsKMCAJZmluZHNob3J0ZXN0cGF0aDEgMSAxICJpbnB1dDEiCn0KaW5wdXRzCnsKMCAJZmluZHNob3J0ZXN0cGF0aDEgMCAxCn0Kc3RhdAp7CiAgY3JlYXRlIDE3NTAyMTEwOTkKICBtb2RpZnkgMTc1MTU5ODg4NQogIGF1dGhvciBqb3JnZUBSMQogIGFjY2VzcyAwNzc3Cn0KY29sb3IgVVRfQ29sb3IgUkdCIDAuOCAwLjggMC44IApkZWxzY3JpcHQgIiIKZXhwcmxhbmd1YWdlIGhzY3JpcHQKZW5kCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDU2MDAwMDAwMDA0NzZzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvY29udmVydGxpbmUxLnBhcm0Aewp2ZXJzaW9uIDAuOApncm91cAlbIDAJbG9ja3M9MCBdCSgJZ3JvdXBmaW5kcGF0aDEJKQpzZXBwYXJtMglbIDAJbG9ja3M9MCBdCSgJKQprZWVwb3JkZXIJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQpjb25uZWN0cGF0aAlbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCmNsb3NlbG9vcHMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKcmVtb3ZlCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKc2VwcGFybQlbIDAJbG9ja3M9MCBdCSgJKQpjb21wdXRlbGVuZ3RoCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKbGVuZ3RobmFtZQlbIDAJbG9ja3M9MCBdCSgJcmVzdGxlbmd0aAkpCn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNjIwMDAwMDAwMDAzMnN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9jb252ZXJ0bGluZTEudXNlcmRhdGEAAAAAAQANX19fVmVyc2lvbl9fXwAAAAMAATIwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA0NjAwMDAwMDAwMDMyc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL2FkZDEuaW5pdAB0eXBlID0gYWRkCm1hdGNoZXNkZWYgPSAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDQ1MDAwMDAwMDA3NjFzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvYWRkMS5kZWYAc29wZmxhZ3Mgc29wZmxhZ3MgPSAKY29tbWVudCAiIgpwb3NpdGlvbiA0LjAyNDU3IC0xMC42MjE5CmNvbm5lY3Rvcm5leHRpZCAyCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb2ZmIHJlbmRlciBvZmYgaGlnaGxpZ2h0IG9mZiB1bmxvYWQgb2ZmIHNhdmVkYXRhIG9mZiBjb21wcmVzcyBvbiBjb2xvcmRlZmF1bHQgb24gZXhwb3NlZCBvbgpvdXRwdXRzTmFtZWQzCnsKMSAib3V0cHV0MSIKfQppbnB1dHNOYW1lZDMKewowIAljYXJ2ZTIgMSAxICJpbnB1dDEiCn0KaW5wdXRzCnsKMCAJY2FydmUyIDAgMQp9CnN0YXQKewogIGNyZWF0ZSAxNzUwMjExMTg0CiAgbW9kaWZ5IDE3NTE1OTkwODYKICBhdXRob3Igam9yZ2VAUjEKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjggMC44IDAuOCAKZGVsc2NyaXB0ICIiCmV4cHJsYW5ndWFnZSBoc2NyaXB0CmVuZAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA0NjAwMDAwMDAxMDE3c3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL2FkZDEucGFybQB7CnZlcnNpb24gMC44CnN0ZHN3aXRjaGVyCVsgMAlsb2Nrcz0wIF0JKAkxCTEJMQkpCmtlZXAJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKcG9pbnRzCVsgMAlsb2Nrcz0wIF0JKAkwCSkKcmVtb3ZlCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKc3dpdGNoZXIJWyAwCWxvY2tzPTAgXQkoCTAJMAkpCnByaW1zCVsgMAlsb2Nrcz0wIF0JKAkxCSkKZ3JvdXAJWyAwCWxvY2tzPTAgXQkoCSIiCSkKYWRkCVsgMAlsb2Nrcz0wIF0JKAkiYWxsIgkpCmluYwlbIDAJbG9ja3M9MCBdCSgJMgkpCmF0dHJuYW1lCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmNsb3NlZGFsbAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQphZGRwYXJ0aWNsZXN5c3RlbQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpwYXJ0aWNsZWdyb3VwCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmFwcGVuZHVudXNlZHRvcGFydGljbGVzeXN0ZW0JWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKcHJpbTAJWyAwCWxvY2tzPTAgXQkoCSIiCSkKY2xvc2VkMAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDUyMDAwMDAwMDAwNDFzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvYWRkMS51c2VyZGF0YQAAAAABAA1fX19WZXJzaW9uX19fAAAAAwAIMjAuNS41NTAwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA1MzAwMDAwMDAwMDM3c3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Jlc2FtcGxlMS5pbml0AHR5cGUgPSByZXNhbXBsZQptYXRjaGVzZGVmID0gMQowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA1MjAwMDAwMDAwNzc1c3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Jlc2FtcGxlMS5kZWYAc29wZmxhZ3Mgc29wZmxhZ3MgPSAKY29tbWVudCAiIgpwb3NpdGlvbiA0LjA2Mzc5IC01LjcyNzI5CmNvbm5lY3Rvcm5leHRpZCAyCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb2ZmIHJlbmRlciBvZmYgaGlnaGxpZ2h0IG9mZiB1bmxvYWQgb2ZmIHNhdmVkYXRhIG9mZiBjb21wcmVzcyBvbiBjb2xvcmRlZmF1bHQgb24gZXhwb3NlZCBvbgpvdXRwdXRzTmFtZWQzCnsKMSAib3V0cHV0MSIKfQppbnB1dHNOYW1lZDMKewowIAljb252ZXJ0bGluZTEgMSAxICJpbnB1dDEiCn0KaW5wdXRzCnsKMCAJY29udmVydGxpbmUxIDAgMQp9CnN0YXQKewogIGNyZWF0ZSAxNzUwMjExMjkyCiAgbW9kaWZ5IDE3NTE1OTkxMzAKICBhdXRob3Igam9yZ2VAUjEKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjggMC44IDAuOCAKZGVsc2NyaXB0ICIiCmV4cHJsYW5ndWFnZSBoc2NyaXB0CmVuZAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA1MzAwMDAwMDAxNTQ3c3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Jlc2FtcGxlMS5wYXJtAHsKdmVyc2lvbiAwLjgKZ3JvdXAJWyAwCWxvY2tzPTAgXQkoCSIiCSkKbWFpbnRhaW5wcmltb3JkZXIJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKbG9kCVsgMAlsb2Nrcz0wIF0JKAkxCSkKZWRnZQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQptZXRob2QJWyAwCWxvY2tzPTAgXQkoCSJkaXN0IgkpCm1lYXN1cmUJWyAwCWxvY2tzPTAgXQkoCSJhcmMiCSkKZG9sZW5ndGgJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKbGVuZ3RoCVsgMAlsb2Nrcz0wIF0JKAkwLjAwNQkpCmRvc2VncwlbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCnNlZ3MJWyAwCWxvY2tzPTAgXQkoCTEwMAkpCnVzZWF0dHJpYnMJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQphbGxlcXVhbAlbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCmxhc3QJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKcmFuZG9tc2hpZnQJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKb25seXBvaW50cwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQp0cmVhdHBvbHlzYXMJWyAwCWxvY2tzPTAgXQkoCSJzdHJhaWdodCIJKQpvdXRwdXRzdWJkcG9seQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpkb3B0ZGlzdGF0dHIJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKcHRkaXN0YXR0cglbIDAJbG9ja3M9MCBdCSgJcHRkaXN0CSkKZG90YW5nZW50YXR0cglbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQp0YW5nZW50YXR0cglbIDAJbG9ja3M9MCBdCSgJdGFuZ2VudHUJKQpkb2N1cnZldWF0dHIJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQpjdXJ2ZXVhdHRyCVsgMAlsb2Nrcz0wIF0JKAljdXJ2ZXUJKQpkb2N1cnZlbnVtYXR0cglbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpjdXJ2ZW51bWF0dHIJWyAwCWxvY2tzPTAgXQkoCWN1cnZlbnVtCSkKfQowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA1NzAwMDAwMDAwMDQxc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Jlc2FtcGxlMS51c2VyZGF0YQAAAAABAA1fX19WZXJzaW9uX19fAAAAAwAIMjAuNS41NTAwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA2MjAwMDAwMDAwMDQ2c3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL2F0dHJpYnJhbmRvbWl6ZTEuaW5pdAB0eXBlID0gYXR0cmlicmFuZG9taXplCm1hdGNoZXNkZWYgPSAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDYxMDAwMDAwMDA3MzdzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvYXR0cmlicmFuZG9taXplMS5kZWYAc29wZmxhZ3Mgc29wZmxhZ3MgPSAKY29tbWVudCAiIgpwb3NpdGlvbiA0LjAyNDU3IC0xMS43NTE0CmNvbm5lY3Rvcm5leHRpZCAxCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb24gcmVuZGVyIG9uIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7Cn0KaW5wdXRzTmFtZWQzCnsKMCAJYWRkMSAxIDEgImlucHV0MSIKfQppbnB1dHMKewowIAlhZGQxIDAgMQp9CnN0YXQKewogIGNyZWF0ZSAxNzUwMjExMzYyCiAgbW9kaWZ5IDE3NTE1OTkwODYKICBhdXRob3Igam9yZ2VAUjEKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjggMC44IDAuOCAKZGVsc2NyaXB0ICIiCmV4cHJsYW5ndWFnZSBoc2NyaXB0CmVuZAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA2MjAwMDAwMDA0NjUyc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL2F0dHJpYnJhbmRvbWl6ZTEucGFybQB7CnZlcnNpb24gMC44Cmdyb3VwCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmdyb3VwdHlwZQlbIDAJbG9ja3M9MCBdCSgJImd1ZXNzIgkpCmNsYXNzCVsgMAlsb2Nrcz0wIF0JKAkicHJpbWl0aXZlIgkpCm5hbWUJWyAwCWxvY2tzPTAgXQkoCUNkCSkKb3BlcmF0aW9uCVsgMAlsb2Nrcz0wIF0JKAlzZXQJKQpzY2FsZQlbIDAJbG9ja3M9MCBdCSgJMQkpCmZvbGRlcjAJWyAwCWxvY2tzPTAgXQkoCTAJMAkpCmRpc3RyaWJ1dGlvbglbIDAJbG9ja3M9MCBdCSgJdW5pZm9ybQkpCmRpbWVuc2lvbnMJWyAwCWxvY2tzPTAgXQkoCTMJKQphbGxzYW1lCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmNvbnN0dmFsdWUJWyAwCWxvY2tzPTAgXQkoCTAJMAkwCTAJKQp2YWx1ZWEJWyAwCWxvY2tzPTAgXQkoCTAJMAkwCTAJKQp2YWx1ZWIJWyAwCWxvY2tzPTAgXQkoCTEJMQkxCTEJKQpwcm9idmFsdWViCVsgMAlsb2Nrcz0wIF0JKAkwLjUJKQptaW4JWyAwCWxvY2tzPTAgXQkoCTAJMAkwCTAJKQptYXgJWyAwCWxvY2tzPTAgXQkoCTEJMQkxCTEJKQptaW5kaXNjcmV0ZQlbIDAJbG9ja3M9MCBdCSgJMAkwCTAJMAkpCm1heGRpc2NyZXRlCVsgMAlsb2Nrcz0wIF0JKAk5CTkJOQk5CSkKc3RlcHNpemUJWyAwCWxvY2tzPTAgXQkoCTEJMQkxCTEJKQptZWRpYW4JWyAwCWxvY2tzPTAgXQkoCTAJMAkwCTAJKQpvbmVzaWRlZG1lZGlhbglbIDAJbG9ja3M9MCBdCSgJMQkxCTEJMQkpCm1lZGlhbmF0dHJpYglbIDAJbG9ja3M9MCBdCSgJIiIJKQpzdGRkZXYJWyAwCWxvY2tzPTAgXQkoCTEJMQkxCTEJKQpvbmVzaWRlZHN0ZGRldglbIDAJbG9ja3M9MCBdCSgJMC4yCTAuMgkwLjIJMC4yCSkKdXNlZml0MHRvCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmZpdDB0bwlbIDAJbG9ja3M9MCBdCSgJMAkpCnVzZWZpdDF0bwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpmaXQxdG8JWyAwCWxvY2tzPTAgXQkoCTEJKQpyYW1wCVsgMAlsb2Nrcz0wIF0JKAkzCSkKdXNlbWlubGltaXQJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKbWlubGltaXQJWyAwCWxvY2tzPTAgXQkoCS0xMDAJLTEwMAktMTAwCS0xMDAJKQp1c2VvbmVzaWRlZG1pbglbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpvbmVzaWRlZG1pbglbIDAJbG9ja3M9MCBdCSgJMC4xCTAuMQkwLjEJMC4xCSkKdXNlbWF4bGltaXQJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKbWF4bGltaXQJWyAwCWxvY2tzPTAgXQkoCTEwMAkxMDAJMTAwCTEwMAkpCnVzZWNvbmVhbmdsZQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpjb25lYW5nbGUJWyAwCWxvY2tzPTAgXQkoCTMwCSkKdXNlcG93ZXJiaWFzCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnBvd2VyYmlhcwlbIDAJbG9ja3M9MCBdCSgJMAkpCmRpcmVjdGlvbglbIDAJbG9ja3M9MCBdCSgJMQkwCTAJMAkpCmRpcmVjdGlvbmF0dHJpYglbIDAJbG9ja3M9MCBdCSgJIiIJKQpmb2xkZXIJWyAwCWxvY2tzPTAgXQkoCTAJKQp2YWx1ZXR5cGUJWyAwCWxvY2tzPTAgXQkoCSJmbG9hdCIJKQp2YWx1ZXMJWyAwCWxvY2tzPTAgXQkoCTQJKQpub3JtYWxpemUJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKdmlzdWFsaXplCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm52aXN1YWxpemVwdHMJWyAwCWxvY2tzPTAgXQkoCTEwMDAwCSkKdXNlZnJhY3Rpb25hdHRyaWIJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKZnJhY3Rpb25hdHRyaWIJWyAwCWxvY2tzPTAgXQkoCWZyYWN0aW9uCSkKc2VlZAlbIDAJbG9ja3M9MCBdCSgJNTA0MwkpCnVzZXNlZWRhdHRyaWIJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKc2VlZGF0dHJpYglbIDAJbG9ja3M9MCBdCSgJaWQJKQpyYW1wMXBvcwlbIDAJbG9ja3M9MCBdCSgJMAkpCnJhbXAxdmFsdWUJWyAwCWxvY2tzPTAgXQkoCTAJKQpyYW1wMWludGVycAlbIDAJbG9ja3M9MCBdCSgJIm1vbm90b25lY3ViaWMiCSkKcmFtcDJwb3MJWyAwCWxvY2tzPTAgXQkoCTAuNQkpCnJhbXAydmFsdWUJWyAwCWxvY2tzPTAgXQkoCTAuNQkpCnJhbXAyaW50ZXJwCVsgMAlsb2Nrcz0wIF0JKAkibW9ub3RvbmVjdWJpYyIJKQpyYW1wM3BvcwlbIDAJbG9ja3M9MCBdCSgJMQkpCnJhbXAzdmFsdWUJWyAwCWxvY2tzPTAgXQkoCTEJKQpyYW1wM2ludGVycAlbIDAJbG9ja3M9MCBdCSgJIm1vbm90b25lY3ViaWMiCSkKc3RydmFsdWUwCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCnZhbHVlMAlbIDAJbG9ja3M9MCBdCSgJMAkpCndlaWdodDAJWyAwCWxvY2tzPTAgXQkoCTEJKQpzdHJ2YWx1ZTEJWyAwCWxvY2tzPTAgXQkoCSIiCSkKdmFsdWUxCVsgMAlsb2Nrcz0wIF0JKAkwCSkKd2VpZ2h0MQlbIDAJbG9ja3M9MCBdCSgJMQkpCnN0cnZhbHVlMglbIDAJbG9ja3M9MCBdCSgJIiIJKQp2YWx1ZTIJWyAwCWxvY2tzPTAgXQkoCTAJKQp3ZWlnaHQyCVsgMAlsb2Nrcz0wIF0JKAkxCSkKc3RydmFsdWUzCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCnZhbHVlMwlbIDAJbG9ja3M9MCBdCSgJMAkpCndlaWdodDMJWyAwCWxvY2tzPTAgXQkoCTEJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDY2MDAwMDAwMDAwMzFzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvYXR0cmlicmFuZG9taXplMS51c2VyZGF0YQAAAAABAA1fX19WZXJzaW9uX19fAAAAAwAAMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNTAwMDAwMDAwMDAzNHN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9jYXJ2ZTIuaW5pdAB0eXBlID0gY2FydmUKbWF0Y2hlc2RlZiA9IDEKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNDcwMDAwMDAwMDc2MXN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9jYXJ2ZTIuZGVmAHNvcGZsYWdzIHNvcGZsYWdzID0gCmNvbW1lbnQgIiIKcG9zaXRpb24gNC4wMzc2NSAtOS4xNTI0Ngpjb25uZWN0b3JuZXh0aWQgMgpmbGFncyA9ICBsb2NrIG9mZiBtb2RlbCBvZmYgdGVtcGxhdGUgb2ZmIGZvb3RwcmludCBvZmYgeHJheSBvZmYgYnlwYXNzIG9mZiBkaXNwbGF5IG9mZiByZW5kZXIgb2ZmIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7CjEgIm91dHB1dDEiCn0KaW5wdXRzTmFtZWQzCnsKMCAJY2FydmUxIDEgMSAiaW5wdXQxIgp9CmlucHV0cwp7CjAgCWNhcnZlMSAwIDEKfQpzdGF0CnsKICBjcmVhdGUgMTc1MDIwODU0MAogIG1vZGlmeSAxNzUxNTk5MDg2CiAgYXV0aG9yIGpvcmdlQFIxCiAgYWNjZXNzIDA3NzcKfQpjb2xvciBVVF9Db2xvciBSR0IgMC44IDAuOCAwLjggCmRlbHNjcmlwdCAiIgpleHBybGFuZ3VhZ2UgaHNjcmlwdAplbmQKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNDcwMDAwMDAwMDIyMXN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9jYXJ2ZTIuY2huAHsKICAgIGNoYW5uZWwgZG9tYWludTEgewogICAgICBsZWZ0dHlwZSA9IGV4dGVuZAogICAgICByaWdodHR5cGUgPSBleHRlbmQKICAgICAgZmxhZ3MgPSAwCiAgICAgIHNlZ21lbnQgeyBsZW5ndGggPSAwIGV4cHIgPSAkRkYvNDglMSB9CiAgICB9CiAgfQowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA1MDAwMDAwMDAyMDA3c3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL2NhcnZlMi5wYXJtAHsKdmVyc2lvbiAwLjgKZ3JvdXAJWyAwCWxvY2tzPTAgXQkoCSIiCSkKYXJjbGVuCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmZpcnN0dQlbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCmRvbWFpbnUxCVsgOAlsb2Nrcz0wIF0JKAlbIGRvbWFpbnUxCTAuMjUgXSAJKQp1c2Vkb21haW51MWF0dHJpYglbIDAJbG9ja3M9MCBdCSgJImNvbnN0YW50IgkpCmRvbWFpbnUxYXR0cmliCVsgMAlsb2Nrcz0wIF0JKAljYXJ2ZXUwCSkKc2Vjb25kdQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpkb21haW51MglbIDgJbG9ja3M9MCBdCSgJMC43NQkpCnVzZWRvbWFpbnUyYXR0cmliCVsgMAlsb2Nrcz0wIF0JKAkiY29uc3RhbnQiCSkKZG9tYWludTJhdHRyaWIJWyAwCWxvY2tzPTAgXQkoCWNhcnZldTEJKQpmaXJzdHYJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKZG9tYWludjEJWyAwCWxvY2tzPTAgXQkoCTAJKQp1c2Vkb21haW52MWF0dHJpYglbIDAJbG9ja3M9MCBdCSgJImNvbnN0YW50IgkpCmRvbWFpbnYxYXR0cmliCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCnNlY29uZHYJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKZG9tYWludjIJWyAwCWxvY2tzPTAgXQkoCTAuMjYzCSkKdXNlZG9tYWludjJhdHRyaWIJWyAwCWxvY2tzPTAgXQkoCSJjb25zdGFudCIJKQpkb21haW52MmF0dHJpYglbIDAJbG9ja3M9MCBdCSgJIiIJKQpvbmx5YnJlYWtwb2ludHMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSJvZmYiCSkKZGl2c3UJWyAwCWxvY2tzPTAgXQkoCTIJKQpkaXZzdglbIDAJbG9ja3M9MCBdCSgJMgkpCmFsbHVicmVha3BvaW50cwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQphbGx2YnJlYWtwb2ludHMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKc3Rkc3dpdGNoZXIJWyAwCWxvY2tzPTAgXQkoCTAJMAkpCmtlZXBpbglbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCmtlZXBvdXQJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKZXh0cmFjdG9wCVsgMAlsb2Nrcz0wIF0JKAkieGlzb3Bhcm0iCSkKa2VlcE9yaWdpbmFsCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNTQwMDAwMDAwMDA0MXN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9jYXJ2ZTIudXNlcmRhdGEAAAAAAQANX19fVmVyc2lvbl9fXwAAAAMACDIwLjUuNTUwMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNjMwMDAwMDAwMDA0N3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9maW5kc2hvcnRlc3RwYXRoMS5pbml0AHR5cGUgPSBmaW5kc2hvcnRlc3RwYXRoCm1hdGNoZXNkZWYgPSAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDYyMDAwMDAwMDA3NjFzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvZmluZHNob3J0ZXN0cGF0aDEuZGVmAHNvcGZsYWdzIHNvcGZsYWdzID0gCmNvbW1lbnQgIiIKcG9zaXRpb24gNC4wNjg1NyAtMy40NjE4NApjb25uZWN0b3JuZXh0aWQgMgpmbGFncyA9ICBsb2NrIG9mZiBtb2RlbCBvZmYgdGVtcGxhdGUgb2ZmIGZvb3RwcmludCBvZmYgeHJheSBvZmYgYnlwYXNzIG9mZiBkaXNwbGF5IG9mZiByZW5kZXIgb2ZmIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7CjEgIm91dHB1dDEiCn0KaW5wdXRzTmFtZWQzCnsKMCAJZ3JvdXAyIDEgMSAiaW5wdXQxIgp9CmlucHV0cwp7CjAgCWdyb3VwMiAwIDEKfQpzdGF0CnsKICBjcmVhdGUgMTc1MTU5ODM4MwogIG1vZGlmeSAxNzUxNTk5MTA4CiAgYXV0aG9yIGpvcmdlQFIxCiAgYWNjZXNzIDA3NzcKfQpjb2xvciBVVF9Db2xvciBSR0IgMC44IDAuOCAwLjggCmRlbHNjcmlwdCAiIgpleHBybGFuZ3VhZ2UgaHNjcmlwdAplbmQKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNjMwMDAwMDAwMzEzNXN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9maW5kc2hvcnRlc3RwYXRoMS5wYXJtAHsKdmVyc2lvbiAwLjgKc3RhcnRwdHMJWyAwCWxvY2tzPTAgXQkoCWVuZAkpCmVuZHB0cwlbIDAJbG9ja3M9MCBdCSgJc3RhcnQJKQplbmFibGVhZGphdHRyaWIJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKYWRqYXR0cmliCVsgOAlsb2Nrcz0wIF0JKAluZWlnaGJvdXJzCSkKc3Rkc3dpdGNoZXIJWyAwCWxvY2tzPTAgXQkoCTAJMAkwCSkKb3V0cHV0cGF0aHMJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQptdWx0aXBsaWNpdHkJWyAwCWxvY2tzPTAgXQkoCSJlYWNodG9hbnkiCSkKa2VlcAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQplbmFibGVvdXRwdXRjb3N0CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm91dHB1dGNvc3QJWyAwCWxvY2tzPTAgXQkoCWNvc3QJKQplbmFibGVvdXRwdXRwcmV2cHRudW0JWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKb3V0cHV0cHJldnB0bnVtCVsgMAlsb2Nrcz0wIF0JKAlwcmV2cHQJKQplbmFibGVvdXRwdXRwdG51bQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpvdXRwdXRwdG51bQlbIDAJbG9ja3M9MCBdCSgJb3JpZ3B0CSkKZW5hYmxlcGF0aHNncm91cAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpwYXRoc2dyb3VwCVsgMAlsb2Nrcz0wIF0JKAlwYXRocwkpCmVuYWJsZW91dHB1dHN0YXJ0cHQJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKb3V0cHV0c3RhcnRwdAlbIDAJbG9ja3M9MCBdCSgJc3RhcnRwdAkpCmVuYWJsZW91dHB1dGVuZHB0CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm91dHB1dGVuZHB0CVsgMAlsb2Nrcz0wIF0JKAllbmRwdAkpCmVuYWJsZW91dHB1dHBhdGhjb3N0CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm91dHB1dHBhdGhjb3N0CVsgMAlsb2Nrcz0wIF0JKAlwYXRoY29zdAkpCmVuYWJsZW1heGNvc3QJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQptYXhjb3N0CVsgMAlsb2Nrcz0wIF0JKAkxMDkuOAkpCmVuYWJsZWNvc3QJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKY29zdAlbIDAJbG9ja3M9MCBdCSgJIiIJKQplbmFibGVwcmltY29zdAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpwcmltY29zdAlbIDAJbG9ja3M9MCBdCSgJIiIJKQpvbWl0ZGlzdGFuY2UJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKY29uc2lkZXJ0dXJuaW5nCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmVuYWJsZWFuZ3VsYXJjb3N0CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmFuZ3VsYXJjb3N0CVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmVuYWJsZWN1c3RvbWNvc3QJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKY3VzdG9tY29zdAlbIDAJbG9ja3M9MCBdCSgJMAkpCmVuYWJsZXByaW1jdXN0b21jb3N0CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCm92ZXJyaWRlaGV1cmlzdGljCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmhldXJpc3RpYwlbIDAJbG9ja3M9MCBdCSgJMAkpCmVuYWJsZXByaW1ncm91cAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpwcmltZ3JvdXAJWyAwCWxvY2tzPTAgXQkoCSIiCSkKZW5hYmxlZGlyZWN0ZWRwcmltcwlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpkaXJlY3RlZHByaW1zCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmVuYWJsZWF2b2lkZWRnZXMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKYXZvaWRlZGdlcwlbIDAJbG9ja3M9MCBdCSgJIiIJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDY3MDAwMDAwMDAwNDFzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvZmluZHNob3J0ZXN0cGF0aDEudXNlcmRhdGEAAAAAAQANX19fVmVyc2lvbl9fXwAAAAMACDIwLjUuNTUwMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNTQwMDAwMDAwMDA0MHN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9zdWJkaXZpZGUxLmluaXQAdHlwZSA9IHN1YmRpdmlkZQptYXRjaGVzZGVmID0gMQowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA1MzAwMDAwMDAxMDIwc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3N1YmRpdmlkZTEuZGVmAHNvcGZsYWdzIHNvcGZsYWdzID0gCmNvbW1lbnQgIiIKcG9zaXRpb24gMy45NzcwNSAwLjAxODUwMjIKY29ubmVjdG9ybmV4dGlkIDIKZmxhZ3MgPSAgbG9jayBvZmYgbW9kZWwgb2ZmIHRlbXBsYXRlIG9mZiBmb290cHJpbnQgb2ZmIHhyYXkgb2ZmIGJ5cGFzcyBvZmYgZGlzcGxheSBvZmYgcmVuZGVyIG9mZiBoaWdobGlnaHQgb2ZmIHVubG9hZCBvZmYgc2F2ZWRhdGEgb2ZmIGNvbXByZXNzIG9uIGNvbG9yZGVmYXVsdCBvbiBleHBvc2VkIG9uCm91dHB1dHNOYW1lZDMKewoxICJvdXRwdXQxIgp9CmlucHV0c05hbWVkMwp7CjAgCXRlc3RnZW9tZXRyeV9waWdoZWFkMSAwIDEgImlucHV0MSIKfQppbnB1dHMKewowIAl0ZXN0Z2VvbWV0cnlfcGlnaGVhZDEgMCAxCn0Kc3RhdAp7CiAgY3JlYXRlIDE3NTE1OTg1NjMKICBtb2RpZnkgMTc1MTU5OTAwNQogIGF1dGhvciBqb3JnZUBSMQogIGFjY2VzcyAwNzc3Cn0KY29sb3IgVVRfQ29sb3IgUkdCIDAuOCAwLjggMC44IApkZWxzY3JpcHQgIiIKZXhwcmxhbmd1YWdlIGhzY3JpcHQKZW5kCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDU0MDAwMDAwMDE0NTRzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvc3ViZGl2aWRlMS5wYXJtAHsKdmVyc2lvbiAwLjgKc3ViZGl2aWRlCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmNyZWFzZXMJWyAwCWxvY2tzPTAgXQkoCSIiCSkKYWxnb3JpdGhtCVsgMAlsb2Nrcz0wIF0JKAkib3NkY2MiCSkKaXRlcmF0aW9ucwlbIDAJbG9ja3M9MCBdCSgJMgkpCm92ZXJyaWRlY3JlYXNlCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmNyZWFzZXdlaWdodAlbIDAJbG9ja3M9MCBdCSgJMAkpCm91dHB1dGNyZWFzZQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpvdXRjcmVhc2Vncm91cAlbIDAJbG9ja3M9MCBdCSgJY3JlYXNlcwkpCmNsb3NlaG9sZXMJWyAwCWxvY2tzPTAgXQkoCSJwdWxsIgkpCnN1cnJvdW5kcG9seQlbIDAJbG9ja3M9MCBdCSgJImVkZ2VzIgkpCmJpYXMJWyAwCWxvY2tzPTAgXQkoCTEJKQp1cGRhdGVubWxzCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKc21vb3RodmVydGV4CVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKY29uc2lzdHRvcG9sb2d5CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmxpbmVhcmNyZWFzZXMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKYnVpbGRwb2x5c291cHMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKaW5kZXBjdXJ2ZXMJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKcmVtb3ZlaG9sZXMJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQp2dHhib3VuZGFyeQlbIDAJbG9ja3M9MCBdCSgJImNvcm5lciIJKQpmdmFybGluZWFyCVsgMAlsb2Nrcz0wIF0JKAkiY29ybmVyMSIJKQpjcmVhc2VtZXRob2QJWyAwCWxvY2tzPTAgXQkoCSJ1bmlmb3JtIgkpCnRyaWFuZ2xlc3ViZAlbIDAJbG9ja3M9MCBdCSgJImNhdGNsYXJrIgkpCn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNjAwMDAwMDAwMDA0MXN0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9zdWJkaXZpZGUxLnVzZXJkYXRhAAAAAAEADV9fX1ZlcnNpb25fX18AAAADAAgyMC41LjU1MDA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDUxMDAwMDAwMDAwNDJzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvc21vb3RoMS5pbml0AHR5cGUgPSBzbW9vdGg6OjIuMAptYXRjaGVzZGVmID0gMQowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA1MDAwMDAwMDAwNzY3c3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Ntb290aDEuZGVmAHNvcGZsYWdzIHNvcGZsYWdzID0gCmNvbW1lbnQgIiIKcG9zaXRpb24gNC4wNTg4NyAtNi43MjcyOQpjb25uZWN0b3JuZXh0aWQgMgpmbGFncyA9ICBsb2NrIG9mZiBtb2RlbCBvZmYgdGVtcGxhdGUgb2ZmIGZvb3RwcmludCBvZmYgeHJheSBvZmYgYnlwYXNzIG9mZiBkaXNwbGF5IG9mZiByZW5kZXIgb2ZmIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb24gY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7CjEgIm91dHB1dDEiCn0KaW5wdXRzTmFtZWQzCnsKMCAJcmVzYW1wbGUxIDEgMSAiaW5wdXQxIgp9CmlucHV0cwp7CjAgCXJlc2FtcGxlMSAwIDEKfQpzdGF0CnsKICBjcmVhdGUgMTc1MTU5OTEyMwogIG1vZGlmeSAxNzUxNTk5MTY2CiAgYXV0aG9yIGpvcmdlQFIxCiAgYWNjZXNzIDA3NzcKfQpjb2xvciBVVF9Db2xvciBSR0IgMC44IDAuOCAwLjggCmRlbHNjcmlwdCAiIgpleHBybGFuZ3VhZ2UgaHNjcmlwdAplbmQKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNTEwMDAwMDAwMDQ2M3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9zbW9vdGgxLnBhcm0Aewp2ZXJzaW9uIDAuOApncm91cAlbIDAJbG9ja3M9MCBdCSgJIiIJKQpjb250cmFpbmVkYm91bmRhcnkJWyAwCWxvY2tzPTAgXQkoCSJncm91cGJvdW5kYXJ5IgkpCmNvbnN0cmFpbmVkcG9pbnRzCVsgMAlsb2Nrcz0wIF0JKAkiIgkpCmF0dHJpYnV0ZXMJWyAwCWxvY2tzPTAgXQkoCVAJKQptZXRob2QJWyAwCWxvY2tzPTAgXQkoCSJ1bmlmb3JtIgkpCnN0cmVuZ3RoCVsgMAlsb2Nrcz0wIF0JKAkyMAkpCmZpbHRlcnF1YWxpdHkJWyAwCWxvY2tzPTAgXQkoCTEJKQp1cGRhdGVhZmZlY3RlZG5tbHMJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDU1MDAwMDAwMDAwNDFzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvc21vb3RoMS51c2VyZGF0YQAAAAABAA1fX19WZXJzaW9uX19fAAAAAwAIMjAuNS41NTAwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDA0MjAwMDAwMDAwMjM3c3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlLm9yZGVyADEzCmNhcnZlMQp0ZXN0Z2VvbWV0cnlfcnViYmVydG95MQpncm91cDEKZ3JvdXAyCmNvbnZlcnRsaW5lMQphZGQxCnJlc2FtcGxlMQphdHRyaWJyYW5kb21pemUxCnRlc3RnZW9tZXRyeV9waWdoZWFkMQpjYXJ2ZTIKZmluZHNob3J0ZXN0cGF0aDEKc3ViZGl2aWRlMQpzbW9vdGgxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDQwMDAwMDAwMDAwMDJzdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUubmV0ADEKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTIwMDAwMDAwMDAwMnN0YWdlLm5ldAAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDEyMDAwMDAwMDA2NDF0YXNrcy5kZWYAY29tbWVudCAiIgpwb3NpdGlvbiAwIDUuMjUKY29ubmVjdG9ybmV4dGlkIDAKZmxhZ3MgPSAgbG9jayBvZmYgbW9kZWwgb2ZmIHRlbXBsYXRlIG9mZiBmb290cHJpbnQgb2ZmIHhyYXkgb2ZmIGJ5cGFzcyBvZmYgZGlzcGxheSBvZmYgcmVuZGVyIG9mZiBoaWdobGlnaHQgb2ZmIHVubG9hZCBvZmYgc2F2ZWRhdGEgb2ZmIGNvbXByZXNzIG9uIGNvbG9yZGVmYXVsdCBvbiBleHBvc2VkIG9uCm91dHB1dHNOYW1lZDMKewp9CmlucHV0c05hbWVkMwp7Cn0KaW5wdXRzCnsKfQpzdGF0CnsKICBjcmVhdGUgMTc1MDIwNTUzNAogIG1vZGlmeSAxNzUwMjEwNTUyCiAgYXV0aG9yIGpvcmdlQFIxCiAgYWNjZXNzIDA3NzcKfQpjb2xvciBVVF9Db2xvciBSR0IgMC44IDAuOCAwLjggCmRlbHNjcmlwdCAiIgpleHBybGFuZ3VhZ2UgaHNjcmlwdAplbmQKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTMwMDAwMDAwMDAyMHRhc2tzLnBhcm0Aewp2ZXJzaW9uIDAuOAp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDE3MDAwMDAwMDAwNDF0YXNrcy51c2VyZGF0YQAAAAABAA1fX19WZXJzaW9uX19fAAAAAwAIMjAuNS41NTAwNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAyMzAwMDAwMDAwMDM1dGFza3MvdG9wbmV0MS5pbml0AHR5cGUgPSB0b3BuZXQKbWF0Y2hlc2RlZiA9IDAKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMjIwMDAwMDAwMDYzN3Rhc2tzL3RvcG5ldDEuZGVmAGNvbW1lbnQgIiIKcG9zaXRpb24gMCAwCmNvbm5lY3Rvcm5leHRpZCAwCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb2ZmIHJlbmRlciBvZmYgaGlnaGxpZ2h0IG9mZiB1bmxvYWQgb2ZmIHNhdmVkYXRhIG9mZiBjb21wcmVzcyBvZmYgY29sb3JkZWZhdWx0IG9uIGV4cG9zZWQgb24Kb3V0cHV0c05hbWVkMwp7Cn0KaW5wdXRzTmFtZWQzCnsKfQppbnB1dHMKewp9CnN0YXQKewogIGNyZWF0ZSAxNzUwMjA1NTU5CiAgbW9kaWZ5IDE3NTE1OTkyMDEKICBhdXRob3Igam9yZ2VAUjEKICBhY2Nlc3MgMDc3Nwp9CmNvbG9yIFVUX0NvbG9yIFJHQiAwLjggMC44IDAuOCAKZGVsc2NyaXB0ICIiCmV4cHJsYW5ndWFnZSBoc2NyaXB0CmVuZAowNzA3MDcwMDAwMDEwMDAwMDAwMDA2NjYwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAxNTAzMTY0NDEzNzAwMDAyMzAwMDAwMDAyMTAwdGFza3MvdG9wbmV0MS5wYXJtAHsKdmVyc2lvbiAwLjgKY29va2NvbnRyb2xzc2VjdGlvbglbIDAJbG9ja3M9MCBdCSgJMAkpCmdlbmVyYXRlc3RhdGljCVsgMAlsb2Nrcz0wIF0JKAkwCSkKY29va2J1dHRvbglbIDAJbG9ja3M9MCBdCSgJMAkpCmRpcnR5YnV0dG9uCVsgMAlsb2Nrcz0wIF0JKAkwCSkKY2FuY2VsYnV0dG9uCVsgMAlsb2Nrcz0wIF0JKAkwCSkKdGFza2dyYXBoc2VjdGlvbglbIDAJbG9ja3M9MCBdCSgJMAkpCmNoZWNrcG9pbnRmb3JtYXQJWyAwCWxvY2tzPTAgXQkoCSIxIgkpCnRhc2tncmFwaGZpbGUJWyAwCWxvY2tzPTAgXQkoCSRISVAvJEhJUE5BTUUudGFza2dyYXBoLiRGLnB5CSkKc2F2ZXRhc2tncmFwaAlbIDAJbG9ja3M9MCBdCSgJMAkpCmxvYWR0YXNrZ3JhcGgJWyAwCWxvY2tzPTAgXQkoCTAJKQp0YXNrZ3JhcGhhdXRvc2F2ZQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQp0YXNrZ3JhcGhzYXZlcmF0ZQlbIDAJbG9ja3M9MCBdCSgJMTAJKQpjaGVja3BvaW50ZmlsZQlbIDAJbG9ja3M9MCBdCSgJJEhJUC8kSElQTkFNRS5jaGVja3BvaW50Lmpzb24JKQpsb2FkY2hlY2twb2ludAlbIDAJbG9ja3M9MCBdCSgJMAkpCmNoZWNrcG9pbnRsb2FkCVsgMAlsb2Nrcz0wIF0JKAkiMCIJKQpjaGVja3BvaW50ZW5hYmxlZAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpjaGVja3BvaW50cmF0ZQlbIDAJbG9ja3M9MCBdCSgJMTAJKQpzZXAyCVsgMAlsb2Nrcz0wIF0JKAkpCnNhdmVncmFwaGF0dHJpYnMJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQpzY2hlZHVsZXJzZWN0aW9uCVsgMAlsb2Nrcz0wIF0JKAkwCSkKdG9wc2NoZWR1bGVyCVsgMAlsb2Nrcz0wIF0JKAlsb2NhbHNjaGVkdWxlcgkpCnVzZWRlZmF1bHRsYWJlbAlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpkZWZhdWx0bGFiZWwJWyAwCWxvY2tzPTAgXQkoCSRPUy5gQHBkZ19pbmRleGAJKQpzZXAxCVsgMAlsb2Nrcz0wIF0JKAkpCnJlZ2VuZXJhdGlvbnR5cGUJWyAwCWxvY2tzPTAgXQkoCSIwIgkpCmV2YWx1YXRpb250aW1lCVsgMAlsb2Nrcz0wIF0JKAkiMCIJKQpjdXN0b210aW1lCVsgMAlsb2Nrcz0wIF0JKAkwCSkKc2F2ZXNjZW5lZmlsZQlbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCn0KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMjcwMDAwMDAwMDA0MXRhc2tzL3RvcG5ldDEudXNlcmRhdGEAAAAAAQANX19fVmVyc2lvbl9fXwAAAAMACDIwLjUuNTUwMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNDIwMDAwMDAwMDA0NXRhc2tzL3RvcG5ldDEvbG9jYWxzY2hlZHVsZXIuaW5pdAB0eXBlID0gbG9jYWxzY2hlZHVsZXIKbWF0Y2hlc2RlZiA9IDAKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNDEwMDAwMDAwMDY0M3Rhc2tzL3RvcG5ldDEvbG9jYWxzY2hlZHVsZXIuZGVmAGNvbW1lbnQgIiIKcG9zaXRpb24gMCAwCmNvbm5lY3Rvcm5leHRpZCAwCmZsYWdzID0gIGxvY2sgb2ZmIG1vZGVsIG9mZiB0ZW1wbGF0ZSBvZmYgZm9vdHByaW50IG9mZiB4cmF5IG9mZiBieXBhc3Mgb2ZmIGRpc3BsYXkgb24gcmVuZGVyIG9uIGhpZ2hsaWdodCBvZmYgdW5sb2FkIG9mZiBzYXZlZGF0YSBvZmYgY29tcHJlc3Mgb2ZmIGNvbG9yZGVmYXVsdCBvbiBleHBvc2VkIG9uCm91dHB1dHNOYW1lZDMKewp9CmlucHV0c05hbWVkMwp7Cn0KaW5wdXRzCnsKfQpzdGF0CnsKICBjcmVhdGUgMTc1MDIwNTU1OQogIG1vZGlmeSAxNzUxNTk5MjAwCiAgYXV0aG9yIGpvcmdlQFIxCiAgYWNjZXNzIDA3NzcKfQpjb2xvciBVVF9Db2xvciBSR0IgMC40NzggMC40NzggMC40NzggCmRlbHNjcmlwdCAiIgpleHBybGFuZ3VhZ2UgaHNjcmlwdAplbmQKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwNDIwMDAwMDAwNTAyMHRhc2tzL3RvcG5ldDEvbG9jYWxzY2hlZHVsZXIucGFybQB7CnZlcnNpb24gMC44CmZvbGRlcjAJWyAwCWxvY2tzPTAgXQkoCTAJMAkwCSkKZm9sZGVyNQlbIDAJbG9ja3M9MCBdCSgJMAkpCm1heHByb2NzbWVudQlbIDAJbG9ja3M9MCBdCSgJIjAiCSkKbWF4cHJvY3MJWyAwCWxvY2tzPTAgXQkoCTEJKQpwZGdfdXNlbWF4dGFza3MJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKcGRnX21heHRhc2tzCVsgMAlsb2Nrcz0wIF0JKAkwCSkKdmVyYm9zZQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpwZGdfd2FpdGZvcmZhaWx1cmVzCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmZvbGRlcjQJWyAwCWxvY2tzPTAgXQkoCTAJKQpwZGdfd29ya2luZ2RpcglbIDAJbG9ja3M9MCBdCSgJJEhJUAkpCnVzZWxvZ2ZpbGVuYW1lCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmxvZ2ZpbGVuYW1lCVsgMAlsb2Nrcz0wIF0JKAlgQHBkZ19uYW1lYC5sb2cJKQpoeXRob25iaW4JWyAwCWxvY2tzPTAgXQkoCSIwIgkpCmh5dGhvbmJpbmN1c3RvbXVuaXZlcnNhbAlbIDAJbG9ja3M9MCBdCSgJIiIJKQpwZGdfd29ya2l0ZW1kYXRhc291cmNlCVsgMAlsb2Nrcz0wIF0JKAkiMCIJKQpwZGdfY29tcHJlc3N3b3JraXRlbWRhdGEJWyAwCWxvY2tzPTAgXQkoCSJvbiIJKQpwZGdfdmFsaWRhdGVvdXRwdXRzCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKcGRnX2NoZWNrZXhwZWN0ZWRvdXRwdXRzCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKc2VwcGFybTIJWyAwCWxvY2tzPTAgXQkoCSkKcGRnX21hcG1vZGUJWyAwCWxvY2tzPTAgXQkoCSIwIgkpCnBkZ191c2VtYXB6b25lCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCnBkZ19tYXB6b25lCVsgMAlsb2Nrcz0wIF0JKAkkUERHX1BBVEhNQVBfWk9ORQkpCmZvbGRlcjEJWyAwCWxvY2tzPTAgXQkoCTAJKQp0ZW1wZGlybWVudQlbIDAJbG9ja3M9MCBdCSgJIjEiCSkKdGVtcGRpcmFwcGVuZHBpZAlbIDAJbG9ja3M9MCBdCSgJIm9uIgkpCnRlbXBkaXJjdXN0b20JWyAwCWxvY2tzPTAgXQkoCSRIT1VESU5JX1RFTVBfRElSLyRISVBOQU1FL3BkZ3RlbXAJKQpwZGdfZGVsZXRldGVtcGRpcglbIDAJbG9ja3M9MCBdCSgJIjAiCSkKc29ja2V0Y2FsbGJhY2tzCVsgMAlsb2Nrcz0wIF0JKAkxCSkKcGRnX3JwY2lnbm9yZWVycm9ycwlbIDAJbG9ja3M9MCBdCSgJIjAiCSkKcGRnX3JwY21heGVycm9ycwlbIDAJbG9ja3M9MCBdCSgJNQkpCnBkZ19ycGN0aW1lb3V0CVsgMAlsb2Nrcz0wIF0JKAk0CSkKcGRnX3JwY3JldHJpZXMJWyAwCWxvY2tzPTAgXQkoCTIJKQpwZGdfcnBjYmFja29mZglbIDAJbG9ja3M9MCBdCSgJMgkpCnBkZ19ycGNiYXRjaAlbIDAJbG9ja3M9MCBdCSgJMQkpCnBkZ19ycGNyZWxlYXNlCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKZm9sZGVyMF8zCVsgMAlsb2Nrcz0wIF0JKAkwCSkKbG9jYWxfc2luZ2xlCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmxvY2FsX2lzX0NQVV9udW1iZXJfc2V0CVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmxvY2FsX0NQVXNfdG9fdXNlCVsgMAlsb2Nrcz0wIF0JKAkxCSkKZm9sZGVyNglbIDAJbG9ja3M9MCBdCSgJMAkpCmxvY2FsX3VzZW1pbmZyZWVtZW0JWyAwCWxvY2tzPTAgXQkoCSIwIgkpCmxvY2FsX21pbmZyZWVtZW0JWyAwCWxvY2tzPTAgXQkoCTAJKQpsb2NhbF9taW5mcmVlbWVtcGN0CVsgMAlsb2Nrcz0wIF0JKAkwCSkKZm9sZGVyMglbIDAJbG9ja3M9MCBdCSgJMAkpCmxvY2FsX2VuYWJsZXRpbWVvdXQJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKbG9jYWxfbWF4dGltZQlbIDAJbG9ja3M9MCBdCSgJMAkpCmxvY2FsX2hhbmRsZXRpbWVvdXQJWyAwCWxvY2tzPTAgXQkoCSIwIgkpCnNlcHBhcm00CVsgMAlsb2Nrcz0wIF0JKAkpCmxvY2FsX2VuYWJsZW1heG1lbW9yeQlbIDAJbG9ja3M9MCBdCSgJIm9mZiIJKQpsb2NhbF9tYXhtZW1vcnkJWyAwCWxvY2tzPTAgXQkoCTAJKQpsb2NhbF9oYW5kbGVtZW1vcnkJWyAwCWxvY2tzPTAgXQkoCSIwIgkpCnNlcHBhcm01CVsgMAlsb2Nrcz0wIF0JKAkpCmxvY2FsX2VjaGFuZGxlYnkJWyAwCWxvY2tzPTAgXQkoCSIwIgkpCmxvY2FsX2VjaGFuZGxlYWxsCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKbG9jYWxfZWNjdXN0b21jb2RlCVsgMAlsb2Nrcz0wIF0JKAkxCSkKc2VwcGFybQlbIDAJbG9ja3M9MCBdCSgJKQpsb2NhbF9tYXhpbXVtcmV0cmllcwlbIDAJbG9ja3M9MCBdCSgJMwkpCmxvY2FsX2FkZGZhaWxjb3VudGF0dHIJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKbG9jYWxfZmFpbGNvdW50YXR0cglbIDAJbG9ja3M9MCBdCSgJZmFpbHVyZWNvdW50CSkKZm9sZGVyMwlbIDAJbG9ja3M9MCBdCSgJMAkpCmxvY2FsX3VzZWhvdWRpbmltYXh0aHJlYWRzCVsgMAlsb2Nrcz0wIF0JKAkib2ZmIgkpCmxvY2FsX2hvdWRpbmltYXh0aHJlYWRzCVsgMAlsb2Nrcz0wIF0JKAkwCSkKbG9jYWxfcmVxdWlyZXN3aW5kb3cJWyAwCWxvY2tzPTAgXQkoCSJvZmYiCSkKbG9jYWxfc2tpcHBhY2thZ2VzCVsgMAlsb2Nrcz0wIF0JKAkib24iCSkKbG9jYWxfZW52dW5zZXQJWyAwCWxvY2tzPTAgXQkoCSIiCSkKbG9jYWxfZW52X2ZpbGUJWyAwCWxvY2tzPTAgXQkoCSIiCSkKbG9jYWxfZW52bXVsdGkJWyAwCWxvY2tzPTAgXQkoCTAJKQp9CjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDQ2MDAwMDAwMDAwMzJ0YXNrcy90b3BuZXQxL2xvY2Fsc2NoZWR1bGVyLnVzZXJkYXRhAAAAAAEADV9fX1ZlcnNpb25fX18AAAADAAExMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMjIwMDAwMDAwMDAwMnRhc2tzL3RvcG5ldDEubmV0ADEKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTIwMDAwMDAwMDAwMnRhc2tzLm5ldAAxCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDI2MDAwMDAwMDAwMDAuc2NlbmVmaWxldmlzdWFsaXplcnMAMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTUwMDAwMDA3NjQ1NS5hcHBsaWNhdGlvbgB2aWV3ZXJzdG93IC1iIHN0b3cgLXggb3BlbiAtbCBzdG93IC1tIGhpZGUgLWMgaGlkZSAtZCBvcGVuIEJ1aWxkLnBhbmV0YWIyLndvcmxkCnZpZXdlcm9wdGlvbiAtYSAyIC1oIDAgLW0gMSAtciAnVmlldzogTWFudHJhJyBCdWlsZC5wYW5ldGFiMi53b3JsZAp2aWV3ZXJncm91cGxpc3QgLWcgb2ZmIC1zIDAgMCAtYyAgb24gLXQgbWF0Y2hzZWxlY3QgLW0gJyonIC1lIG9uIC1wIG9mZiAtaCBvbiBCdWlsZC5wYW5ldGFiMi53b3JsZAp2aWV3ZXJvcHRpb24gLXAgMCAtUCAnK2dlbyAtY2FtIC1saWdodCAtbXVzY2xlIC1ib25lIC1udWxsIC1ibGVuZCAtb3RoZXInIEJ1aWxkLnBhbmV0YWIyLndvcmxkCnZpZXdsYXlvdXQgLXMgMiBCdWlsZC5wYW5ldGFiMi53b3JsZAp2aWV3ZXJpbnNwZWN0IEJ1aWxkLnBhbmV0YWIyLndvcmxkIG1vZGUgKCBvYmplY3RzICkgb2JqZWN0X3Byb3BlcnRpZXMgKCApIHByaW1fcHJvcGVydGllcyAoICkgZW5hYmxlICggMCApIG1hZ25pZnkgKCAxICkKdmlld3R5cGUgLXQgcGVyc3BlY3RpdmUgQnVpbGQucGFuZXRhYjIud29ybGQuYHZwbmFtZSgiQnVpbGQucGFuZXRhYjIud29ybGQiLDIpYAp2aWV3dHlwZSAtdCBvcnRob190b3AgQnVpbGQucGFuZXRhYjIud29ybGQuYHZwbmFtZSgiQnVpbGQucGFuZXRhYjIud29ybGQiLDEpYAp2aWV3dHlwZSAtdCBvcnRob19mcm9udCBCdWlsZC5wYW5ldGFiMi53b3JsZC5gdnBuYW1lKCJCdWlsZC5wYW5ldGFiMi53b3JsZCIsMylgCnZpZXd0eXBlIC10IG9ydGhvX3JpZ2h0IEJ1aWxkLnBhbmV0YWIyLndvcmxkLmB2cG5hbWUoIkJ1aWxkLnBhbmV0YWIyLndvcmxkIiw0KWAKdmlld25hbWUgLWwgb24gLW4gYWFhYTMgQnVpbGQucGFuZXRhYjIud29ybGQuYHZwbmFtZSgiQnVpbGQucGFuZXRhYjIud29ybGQiLDIpYAp2aWV3bmFtZSAtbCBvbiAtbiBhYWFhMiBCdWlsZC5wYW5ldGFiMi53b3JsZC5gdnBuYW1lKCJCdWlsZC5wYW5ldGFiMi53b3JsZCIsMSlgCnZpZXduYW1lIC1sIG9uIC1uIGFhYWExIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmB2cG5hbWUoIkJ1aWxkLnBhbmV0YWIyLndvcmxkIiwzKWAKdmlld25hbWUgLWwgb24gLW4gYWFhYTAgQnVpbGQucGFuZXRhYjIud29ybGQuYHZwbmFtZSgiQnVpbGQucGFuZXRhYjIud29ybGQiLDQpYAp2aWV3bmFtZSAtbCBvZmYgLW4gcGVyc3AxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmB2cG5hbWUoIkJ1aWxkLnBhbmV0YWIyLndvcmxkIiwyKWAKdmlld25hbWUgLWwgb2ZmIC1uIHRvcDEgQnVpbGQucGFuZXRhYjIud29ybGQuYHZwbmFtZSgiQnVpbGQucGFuZXRhYjIud29ybGQiLDEpYAp2aWV3bmFtZSAtbCBvZmYgLW4gZnJvbnQxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmB2cG5hbWUoIkJ1aWxkLnBhbmV0YWIyLndvcmxkIiwzKWAKdmlld25hbWUgLWwgb2ZmIC1uIHJpZ2h0MSBCdWlsZC5wYW5ldGFiMi53b3JsZC5gdnBuYW1lKCJCdWlsZC5wYW5ldGFiMi53b3JsZCIsNClgCnZpZXdkaXNwc2V0IC1tIG9mZiBhbHdheXMgLW4gb2ZmIGFsd2F5cyAtYyBvZmYgYWx3YXlzIC11IG9mZiBhbHdheXMgLXggb2ZmIGFsd2F5cyAtTiBvZmYgYWx3YXlzIC1DIG9mZiBhbHdheXMgLWIgb2ZmIGFsd2F5cyAtTSBvZmYgYWx3YXlzIC12IG9mZiBhbHdheXMgLVYgb2ZmIGFsd2F5cyAtVSBvZmYgYWx3YXlzIC1oIG9mZiAtUCBvZmYgLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb2ZmIC1zIHNoYWRlIC1GIG9mZiAtbCBvbiAtTCBvbiAtRyBvZmYgLUIgbm9uZSAtZCB1diAtciB1bmlxdWUgc2NlbmUgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdkaXNwc2V0IC10IG9mZiAgc2NlbmUgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdkaXNwc2V0IC1tIG9mZiBhbHdheXMgLW4gb2ZmIGFsd2F5cyAtYyBvZmYgYWx3YXlzIC11IG9mZiBhbHdheXMgLXggb2ZmIGFsd2F5cyAtTiBvZmYgYWx3YXlzIC1DIG9mZiBhbHdheXMgLWIgb2ZmIGFsd2F5cyAtTSBvZmYgYWx3YXlzIC12IG9mZiBhbHdheXMgLVYgb2ZmIGFsd2F5cyAtVSBvZmYgYWx3YXlzIC1oIG9mZiAtUCBvZmYgLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb2ZmIC1zIHNoYWRlIC1GIG9mZiAtbCBvbiAtTCBvbiAtRyBvZmYgLUIgbm9uZSAtZCB1diAtciBzY2VuZSBzZWxlY3RzY2VuZSBCdWlsZC5wYW5ldGFiMi53b3JsZC5wZXJzcDEKdmlld2Rpc3BzZXQgLXQgb2ZmICBzZWxlY3RzY2VuZSBCdWlsZC5wYW5ldGFiMi53b3JsZC5wZXJzcDEKdmlld2Rpc3BzZXQgLW0gb2ZmIGFsd2F5cyAtbiBvZmYgYWx3YXlzIC1jIG9mZiBhbHdheXMgLXUgb2ZmIGFsd2F5cyAteCBvZmYgYWx3YXlzIC1OIG9mZiBhbHdheXMgLUMgb2ZmIGFsd2F5cyAtYiBvZmYgYWx3YXlzIC1NIG9mZiBhbHdheXMgLXYgb2ZmIGFsd2F5cyAtViBvZmYgYWx3YXlzIC1VIG9mZiBhbHdheXMgLWggb2ZmIC1QIG9mZiAtcCBvZmYgLWYgb2ZmIC1vIG9mZiAtdyBvZmYgLXMgc2hhZGUgLUYgb2ZmIC1sIG9uIC1MIG9mZiAtRyBvbiAtQiBub25lIC1kIHV2IC1yIHVuaXF1ZSBnaG9zdHNjZW5lIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3ZGlzcHNldCAtdCBvZmYgIGdob3N0c2NlbmUgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdkaXNwc2V0IC1tIG9mZiBhbHdheXMgLW4gb2ZmIGFsd2F5cyAtYyBvZmYgYWx3YXlzIC11IG9mZiBhbHdheXMgLXggb2ZmIGFsd2F5cyAtTiBvZmYgYWx3YXlzIC1DIG9mZiBhbHdheXMgLWIgb2ZmIGFsd2F5cyAtTSBvZmYgYWx3YXlzIC12IG9mZiBhbHdheXMgLVYgb2ZmIGFsd2F5cyAtVSBvZmYgYWx3YXlzIC1oIG9mZiAtUCBvbiAtcCBvZmYgLWYgb2ZmIC1vIG9mZiAtdyBvbiAtcyBzaGFkZV93aXJlIC1GIG9mZiAtbCBvbiAtTCBvbiAtRyBvZmYgLUIgbm9uZSAtZCB1diAtciB1bmlxdWUgZGlzcGxheSBCdWlsZC5wYW5ldGFiMi53b3JsZC5wZXJzcDEKdmlld2Rpc3BzZXQgLXQgb24gIGRpc3BsYXkgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdkaXNwc2V0IC1tIG9mZiBhbHdheXMgLW4gb2ZmIGFsd2F5cyAtYyBvZmYgYWx3YXlzIC11IG9mZiBhbHdheXMgLXggb2ZmIGFsd2F5cyAtTiBvZmYgYWx3YXlzIC1DIG9mZiBhbHdheXMgLWIgb2ZmIGFsd2F5cyAtTSBvZmYgYWx3YXlzIC12IG9mZiBhbHdheXMgLVYgb2ZmIGFsd2F5cyAtVSBvZmYgYWx3YXlzIC1oIG9mZiAtUCBvbiAtcCBvZmYgLWYgb2ZmIC1vIG9mZiAtdyBvZmYgLXMgd2lyZSAtRiBvZmYgLWwgb24gLUwgb2ZmIC1HIG9mZiAtQiBub25lIC1kIHV2IC1yIHVuaXF1ZSBjdXJyZW50IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3ZGlzcHNldCAtdCBvZmYgIGN1cnJlbnQgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdkaXNwc2V0IC1tIG9mZiBhbHdheXMgLW4gb2ZmIGFsd2F5cyAtYyBvZmYgYWx3YXlzIC11IG9mZiBhbHdheXMgLXggb2ZmIGFsd2F5cyAtTiBvZmYgYWx3YXlzIC1DIG9mZiBhbHdheXMgLWIgb2ZmIGFsd2F5cyAtTSBvZmYgYWx3YXlzIC12IG9mZiBhbHdheXMgLVYgb2ZmIGFsd2F5cyAtVSBvZmYgYWx3YXlzIC1oIG9mZiAtUCBvZmYgLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb2ZmIC1zIHdpcmUgLUYgb24gLWwgb24gLUwgb2ZmIC1HIG9uIC1CIG5vbmUgLWQgdXYgLXIgdW5pcXVlIHRlbXBsYXRlIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3ZGlzcHNldCAtdCBvZmYgIHRlbXBsYXRlIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3ZGlzcGxheSAtQiBkYXJrIC1iIG9mZiAtZCBvZmYgLUMgMiAtZSAxIC1GIG9uIC1mIG9mZiAtZyBvbiAtRyAnKicgLWggb2ZmIC1IIG9uIC1qIG9mZiAtSiBvZmYgLUwgb24gLW4gMC4yIC1vIG9mZiAtTyBvbiAtcSBvbiAtciBvbiAtcyBvZmYgLXQgb24gLVYgMiAteiBvZmYgLXkgb2ZmIC14IG9mZiAtWCBvZmYgLVUgNCAtWSA0IC1UIG9uIC1SIG9uIC1pIG9uIC1EIG9uIC1rIG9mZiBCdWlsZC5wYW5ldGFiMi53b3JsZC5wZXJzcDEKdmlld2Rpc3BsYXkgLVEgb24gLW0gb24gLXYgb24gQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdkaXNwbGF5IC1XICBvZmYgMCAwIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3ZGlzcGxheSAtYyBvbiAtbDEgLUsgb24gLVAgcG9pbnRzIC1wIDMgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdkaXNwb3B0cyAtYSBvbiAtQSAwLjUgLWIgY3VycmVudCAtQiAwIC1jIDEgLUMgNjAgIC1kICBvbiAtRCAxIC1nIG9uIC1pIG9uIC1uIG9uIC1OIDEwMDAwMDAgLW8gb2ZmIC1wIDEwIC1QIG9mZiAtciBvZmYgLVIgb24gLVMgNzY4IC1sIDEyOCAtbSAwLjA1IC1NIDEwMjQgLXMgb24gLXQgMC41IC11IHV2IC13IDAuMSAtVyAwLjkgLXggb24gLVggb2ZmIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3ZGlzcG9wdHMgLWYgb2ZmIC1rIDAgLUkgMSAtTyBvbiAtVCBNYXRDYXAvT2lsQ2xheS5waWMgLVUgbG9va2Rldi91dmdyaWRfZ3JleS5leHIgLXYgMSBCdWlsZC5wYW5ldGFiMi53b3JsZC5wZXJzcDEKdmlld2Rpc3BvcHRzIC1HIDIgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdkaXNwb3B0cyAtaiAxIC1KIDEgLUsgMSBCdWlsZC5wYW5ldGFiMi53b3JsZC5wZXJzcDEKdmlld2VmZmVjdCAtYSAyIC1BIDQgLWIgb24gLUIgMSAtZCBvbiAtRCBvbiBvZmYgLWUgMC44IC1FIC0zMCAtMzAgLTEwMCAtZiAxIC1GIDAgLWcgMi4yIC1HIDAgLWggMSAtSCBvbiAtaSBvbiAtSSAxIC1qIG9uIC1KIDUwIC1LIDIgLWsgMSAtbCAnJyAtbSBvbiAtTSAyMDQ4IC1vIG9mZiAtTyAzIC1wIG9mZiAtUCAzIC1xIDEgLVEgMiAtciAyMDQ4IDIwNDggLXMgMiAtdCAxMDAgLVQgMTAwIC11IG9mZiAtVSBvZmYgLXYgMjU2IDI1NiAyNTYgLXcgMC4wNSAtVyBvbiAteCAwLjQgMC40IDAuNCAtWCAwLjQgMC40IDAuNCAteSAwLjQgMC40IDAuNCAtWSAwLjAwMjUgMC4wMDI1IDAuMDAyNSAteiAwLjAxIC1aIDEgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdpbmZvdGV4dCAtbSBvZmYgLXMgb2ZmIC10IG9uIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3bGlnaHQgIC1hIG9uIC1kIG9uIC1lIG9uIC1oIG9uIC1sIG9uIC1uIDIwIC1zIG9uIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3YmFja2dyb3VuZCAtYiBvbiAtZSBvbiAtcSAxIC1pIG9mZiAtbSAwIDAgLU0gMSAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvbiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBwZXJzcCBCdWlsZC5wYW5ldGFiMi53b3JsZC5wZXJzcDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb24gLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgY2FtIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvZmYgLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgdG9wIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvZmYgLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgZnJvbnQgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdyb3RvICAtUyBmaWxlIC1GICcnIC1DICcnIC1hIG9mZiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiByaWdodCBCdWlsZC5wYW5ldGFiMi53b3JsZC5wZXJzcDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb2ZmIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIGJvdHRvbSBCdWlsZC5wYW5ldGFiMi53b3JsZC5wZXJzcDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb2ZmIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIGJhY2sgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdyb3RvICAtUyBmaWxlIC1GICcnIC1DICcnIC1hIG9mZiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBsZWZ0IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3cm90byAgLVMgZmlsZSAtRiAnbG9va2Rldi91dmdyaWRfZ3JleS5leHInIC1DICcnIC1hIG9uIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDAuMiAtZSBvZmYgdXYgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdyb3RvICAtUyBmaWxlIC1GICcnIC1DICcnIC1hIG9uIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIGltYWdlIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3Zm9yZWdyb3VuZCAtZCBvbiAtZiBvbiAtRCBQeiAtcyAwIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3Zm9yZWdyb3VuZCAtbyAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3dHJhbnNmb3JtIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMSB2ZXJzaW9uICggMyApICBmbGFnICggRnggKSAgb3J0aG93aWR0aCAoIDUuMTE2MjQgKSAgZm9jYWwgKCA1MCApICBhcGVydHVyZSAoIDQxLjQyMTQgKSAgd2luZG93ICggMCAxIDAgMSApICB3aW5yb2xsICggMCApICBjbGVhciAoIDEgKSAgbmVhcmZhciAoIDAuMDMxNTM3MSA4OTIyLjgzICkgIGFzcGVjdCAoIDEuMzMzMzMgKSAgcGl4ZWxhc3BlY3QgKCAxICkgIHR4eXogKCAtMC4zMTQwMTIgLTAuMjIxODAxIDYuMzk2MjIgKSAgcHh5eiAoIDAuMTgxMDExIC0wLjM0MjY1MyAwLjk5NDIwNSApICByb3RhdGlvbiAoIDAuOTQwNjczIDAuMDY4MzI5NSAtMC4zMzIzNjEgLTMuODk2NWUtMDcgMC45Nzk1MTQgMC4yMDEzNzYgMC4zMzkzMTIgLTAuMTg5NDI5IDAuOTIxNDAzICApICBob21lZGlzdGFuY2UgKCA2LjcxMTA4ICkgIGhvbWVhZGpib3h3aWR0aCAoIDUuMTE2MjQgKSAgaG9tZW9ydGhvd2lkdGggKCA1LjExNjI0ICkgIGhvbWVyYWRpdXMgKCA1LjE2MTk0ICkgIGhvbWVheGlzICggMCApICBob21lY3VzdG9tICggMC43MDcxMDcgLTAuMzUzNTUzIDAuNjEyMzcyIDAgMC44NjYwMjUgMC41IC0wLjcwNzEwNyAtMC4zNTM1NTMgMC42MTIzNzIgICkgIGFkanVzdGxpbWl0cyAoIDMgKSAgZm92ICggNDViKSAgaW5mZnJlZWNhbSAoIDAgKSAgCnZpZXdjYW1lcmEgLWMgJycgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdvcnRob2dyaWQgLWQgb2ZmIC1vIDAgMCAwIC1zIDAuMiAwLjIgLXIgNSA1IC1SIDEgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXd1dmdyaWQgLXIgb24gLXMgMC4xIDAuMSAtUCBvZmYgLVMgNjQgNjQgLU8gMCAwIC1DIG9uIC10IG9uIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3YWdlbnRvcHRzICAtTCBvbiAtYiAwIC1kIDEgLWwgMCAtbSA0IC1wIDEwMDAgLXcgMSAtQiAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3Y2hhcmFjdGVyb3B0cyAgLUQgb2ZmIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3b25pb25za2luICAtZSBvbiAtYSA0IC1iIDQgLWkgNiAtbyAwLjUgLUEgMSAxIDEgLUIgMSAxIDEgQnVpbGQucGFuZXRhYjIud29ybGQucGVyc3AxCnZpZXdwb3N0ZWZmZWN0cyAgLUQgb2ZmIC1CIG9mZiAtdCAiIiAtZiBvZmYgLVYgb2ZmIC1TIG9uIC1hIDEgLWIgNSAtRiAxIC1nIDEgLWMgMSAxIDEgLUMgMSAxIDEgLWQgMWUrMDYgLWggMCAtSCAxMDAgMTAgLWkgMSAtSSAxIC1sIDEgLW4gIiIgLW8gMSAtTyAxIC1yIDAgMTAwMCAtUiAxIDIwMCAtcyAxIDEgLXUgMCAtVSAxMDAgMTAgLXYgMCBCdWlsZC5wYW5ldGFiMi53b3JsZC5wZXJzcDEKdmlld3Bvc3RlZmZlY3RzICAtZSBvZmYgLUUgMTAgLVQgMC45NSAtTCAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3bWFza292ZXJsYXkgLW8gMC40IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnBlcnNwMQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb2ZmIC1wIG9mZiAtZiBvZmYgLW8gb2ZmIC13IG9mZiAtcyBzaGFkZSAtRiBvZmYgLWwgb24gLUwgb24gLUcgb2ZmIC1CIG5vbmUgLWQgdXYgLXIgdW5pcXVlIHNjZW5lIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld2Rpc3BzZXQgLXQgb2ZmICBzY2VuZSBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdkaXNwc2V0IC1tIG9mZiBhbHdheXMgLW4gb2ZmIGFsd2F5cyAtYyBvZmYgYWx3YXlzIC11IG9mZiBhbHdheXMgLXggb2ZmIGFsd2F5cyAtTiBvZmYgYWx3YXlzIC1DIG9mZiBhbHdheXMgLWIgb2ZmIGFsd2F5cyAtTSBvZmYgYWx3YXlzIC12IG9mZiBhbHdheXMgLVYgb2ZmIGFsd2F5cyAtVSBvZmYgYWx3YXlzIC1oIG9mZiAtUCBvZmYgLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb2ZmIC1zIHNoYWRlIC1GIG9mZiAtbCBvbiAtTCBvbiAtRyBvZmYgLUIgbm9uZSAtZCB1diAtciBzY2VuZSBzZWxlY3RzY2VuZSBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdkaXNwc2V0IC10IG9mZiAgc2VsZWN0c2NlbmUgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb2ZmIC1wIG9mZiAtZiBvZmYgLW8gb2ZmIC13IG9mZiAtcyBzaGFkZSAtRiBvZmYgLWwgb24gLUwgb2ZmIC1HIG9uIC1CIG5vbmUgLWQgdXYgLXIgdW5pcXVlIGdob3N0c2NlbmUgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3ZGlzcHNldCAtdCBvZmYgIGdob3N0c2NlbmUgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb24gLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb24gLXMgc2hhZGVfd2lyZSAtRiBvZmYgLWwgb24gLUwgb24gLUcgb2ZmIC1CIG5vbmUgLWQgdXYgLXIgdW5pcXVlIGRpc3BsYXkgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3ZGlzcHNldCAtdCBvbiAgZGlzcGxheSBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdkaXNwc2V0IC1tIG9mZiBhbHdheXMgLW4gb2ZmIGFsd2F5cyAtYyBvZmYgYWx3YXlzIC11IG9mZiBhbHdheXMgLXggb2ZmIGFsd2F5cyAtTiBvZmYgYWx3YXlzIC1DIG9mZiBhbHdheXMgLWIgb2ZmIGFsd2F5cyAtTSBvZmYgYWx3YXlzIC12IG9mZiBhbHdheXMgLVYgb2ZmIGFsd2F5cyAtVSBvZmYgYWx3YXlzIC1oIG9mZiAtUCBvbiAtcCBvZmYgLWYgb2ZmIC1vIG9mZiAtdyBvZmYgLXMgd2lyZSAtRiBvZmYgLWwgb24gLUwgb2ZmIC1HIG9mZiAtQiBub25lIC1kIHV2IC1yIHVuaXF1ZSBjdXJyZW50IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld2Rpc3BzZXQgLXQgb2ZmICBjdXJyZW50IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld2Rpc3BzZXQgLW0gb2ZmIGFsd2F5cyAtbiBvZmYgYWx3YXlzIC1jIG9mZiBhbHdheXMgLXUgb2ZmIGFsd2F5cyAteCBvZmYgYWx3YXlzIC1OIG9mZiBhbHdheXMgLUMgb2ZmIGFsd2F5cyAtYiBvZmYgYWx3YXlzIC1NIG9mZiBhbHdheXMgLXYgb2ZmIGFsd2F5cyAtViBvZmYgYWx3YXlzIC1VIG9mZiBhbHdheXMgLWggb2ZmIC1QIG9mZiAtcCBvZmYgLWYgb2ZmIC1vIG9mZiAtdyBvZmYgLXMgd2lyZSAtRiBvbiAtbCBvbiAtTCBvZmYgLUcgb24gLUIgbm9uZSAtZCB1diAtciB1bmlxdWUgdGVtcGxhdGUgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3ZGlzcHNldCAtdCBvZmYgIHRlbXBsYXRlIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld2Rpc3BsYXkgLUIgZGFyayAtYiBvZmYgLWQgb2ZmIC1DIDIgLWUgMSAtRiBvbiAtZiBvZmYgLWcgb24gLUcgJyonIC1oIG9mZiAtSCBvbiAtaiBvZmYgLUogb2ZmIC1MIG9uIC1uIDAuMiAtbyBvZmYgLU8gb24gLXEgb24gLXIgb24gLXMgb2ZmIC10IG9uIC1WIDIgLXogb2ZmIC15IG9mZiAteCBvZmYgLVggb2ZmIC1VIDQgLVkgNCAtVCBvbiAtUiBvbiAtaSBvbiAtRCBvbiAtayBvZmYgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3ZGlzcGxheSAtUSBvbiAtbSBvbiAtdiBvbiBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdkaXNwbGF5IC1XICBvZmYgMCAwIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld2Rpc3BsYXkgLWMgb24gLWwxIC1LIG9uIC1QIHBvaW50cyAtcCAzIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld2Rpc3BvcHRzIC1hIG9uIC1BIDAuNSAtYiBjdXJyZW50IC1CIDAgLWMgMSAtQyA2MCAgLWQgIG9uIC1EIDEgLWcgb24gLWkgb24gLW4gb24gLU4gMTAwMDAwMCAtbyBvZmYgLXAgMTAgLVAgb2ZmIC1yIG9mZiAtUiBvbiAtUyA3NjggLWwgMTI4IC1tIDAuMDUgLU0gMTAyNCAtcyBvbiAtdCAwLjUgLXUgdXYgLXcgMC4xIC1XIDAuOSAteCBvbiAtWCBvZmYgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3ZGlzcG9wdHMgLWYgb2ZmIC1rIDAgLUkgMSAtTyBvbiAtVCBNYXRDYXAvT2lsQ2xheS5waWMgLVUgbG9va2Rldi91dmdyaWRfZ3JleS5leHIgLXYgMSBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdkaXNwb3B0cyAtRyAyIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld2Rpc3BvcHRzIC1qIDEgLUogMSAtSyAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld2VmZmVjdCAtYSAyIC1BIDQgLWIgb24gLUIgMSAtZCBvbiAtRCBvbiBvZmYgLWUgMC44IC1FIC0zMCAtMzAgLTEwMCAtZiAxIC1GIDAgLWcgMi4yIC1HIDAgLWggMSAtSCBvbiAtaSBvbiAtSSAxIC1qIG9uIC1KIDUwIC1LIDIgLWsgMSAtbCAnJyAtbSBvbiAtTSAyMDQ4IC1vIG9mZiAtTyAzIC1wIG9mZiAtUCAzIC1xIDEgLVEgMiAtciAyMDQ4IDIwNDggLXMgMiAtdCAxMDAgLVQgMTAwIC11IG9mZiAtVSBvZmYgLXYgMjU2IDI1NiAyNTYgLXcgMC4wNSAtVyBvbiAteCAwLjQgMC40IDAuNCAtWCAwLjQgMC40IDAuNCAteSAwLjQgMC40IDAuNCAtWSAwLjAwMjUgMC4wMDI1IDAuMDAyNSAteiAwLjAxIC1aIDEgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3aW5mb3RleHQgLW0gb2ZmIC1zIG9mZiAtdCBvbiBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdsaWdodCAgLWEgb24gLWQgb24gLWUgb24gLWggb24gLWwgb24gLW4gMjAgLXMgb24gQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3YmFja2dyb3VuZCAtYiBvbiAtZSBvbiAtcSAxIC1pIG9mZiAtbSAwIDAgLU0gMSAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb24gLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgcGVyc3AgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvbiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBjYW0gQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvZmYgLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgdG9wIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb2ZmIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIGZyb250IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb2ZmIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIHJpZ2h0IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb2ZmIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIGJvdHRvbSBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdyb3RvICAtUyBmaWxlIC1GICcnIC1DICcnIC1hIG9mZiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBiYWNrIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb2ZmIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIGxlZnQgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3cm90byAgLVMgZmlsZSAtRiAnbG9va2Rldi91dmdyaWRfZ3JleS5leHInIC1DICcnIC1hIG9uIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDAuMiAtZSBvZmYgdXYgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvbiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBpbWFnZSBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdmb3JlZ3JvdW5kIC1kIG9uIC1mIG9uIC1EIFB6IC1zIDAgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3Zm9yZWdyb3VuZCAtbyAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld3RyYW5zZm9ybSBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxIHZlcnNpb24gKCAzICkgIGZsYWcgKCBGb3ggKSAgb3J0aG93aWR0aCAoIDIuMjIyMjIgKSAgZm9jYWwgKCA1MCApICBhcGVydHVyZSAoIDQxLjQyMTQgKSAgd2luZG93ICggMCAxIDAgMSApICB3aW5yb2xsICggMCApICBjbGVhciAoIDEgKSAgbmVhcmZhciAoIDAuMDAzNDY0NDcgMzQ2NDQuNyApICBhc3BlY3QgKCAxLjMzMzMzICkgIHBpeGVsYXNwZWN0ICggMSApICB0eHl6ICggMCAwIDMuNjgyNDYgKSAgcHh5eiAoIDAgMCAwICkgIHJvdGF0aW9uICggMSAwIDAgMCAxLjE5MjA5ZS0wNyAxIDAgLTEgMS4xOTIwOWUtMDcgICkgIGhvbWVkaXN0YW5jZSAoIDMuNjgyNDYgKSAgaG9tZWFkamJveHdpZHRoICggMi4yMjIyMiApICBob21lb3J0aG93aWR0aCAoIDIuMjIyMjIgKSAgaG9tZXJhZGl1cyAoIDMuNDY0MSApICBob21lYXhpcyAoIDAgKSAgaG9tZWN1c3RvbSAoIDAuNzA3MTA3IC0wLjM1MzU1MyAwLjYxMjM3MiAwIDAuODY2MDI1IDAuNSAtMC43MDcxMDcgLTAuMzUzNTUzIDAuNjEyMzcyICApICBhZGp1c3RsaW1pdHMgKCAzICkgIGZvdiAoIDQ1YikgIGluZmZyZWVjYW0gKCAwICkgIAp2aWV3b3J0aG9ncmlkIC1kIG9mZiAtbyAwIDAgMCAtcyAwLjIgMC4yIC1yIDUgNSAtUiAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld3V2Z3JpZCAtciBvbiAtcyAwLjEgMC4xIC1QIG9mZiAtUyA2NCA2NCAtTyAwIDAgLUMgb24gLXQgb24gQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3YWdlbnRvcHRzICAtTCBvbiAtYiAwIC1kIDEgLWwgMCAtbSA0IC1wIDEwMDAgLXcgMSAtQiAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnRvcDEKdmlld2NoYXJhY3Rlcm9wdHMgIC1EIG9mZiBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdvbmlvbnNraW4gIC1lIG9uIC1hIDQgLWIgNCAtaSA2IC1vIDAuNSAtQSAxIDEgMSAtQiAxIDEgMSBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdwb3N0ZWZmZWN0cyAgLUQgb2ZmIC1CIG9mZiAtdCAiIiAtZiBvZmYgLVYgb2ZmIC1TIG9uIC1hIDEgLWIgNSAtRiAxIC1nIDEgLWMgMSAxIDEgLUMgMSAxIDEgLWQgMWUrMDYgLWggMCAtSCAxMDAgMTAgLWkgMSAtSSAxIC1sIDEgLW4gIiIgLW8gMSAtTyAxIC1yIDAgMTAwMCAtUiAxIDIwMCAtcyAxIDEgLXUgMCAtVSAxMDAgMTAgLXYgMCBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdwb3N0ZWZmZWN0cyAgLWUgb2ZmIC1FIDEwIC1UIDAuOTUgLUwgMSBCdWlsZC5wYW5ldGFiMi53b3JsZC50b3AxCnZpZXdtYXNrb3ZlcmxheSAtbyAwLjQgQnVpbGQucGFuZXRhYjIud29ybGQudG9wMQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb2ZmIC1wIG9mZiAtZiBvZmYgLW8gb2ZmIC13IG9mZiAtcyBzaGFkZSAtRiBvZmYgLWwgb24gLUwgb24gLUcgb2ZmIC1CIG5vbmUgLWQgdXYgLXIgdW5pcXVlIHNjZW5lIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3ZGlzcHNldCAtdCBvZmYgIHNjZW5lIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb2ZmIC1wIG9mZiAtZiBvZmYgLW8gb2ZmIC13IG9mZiAtcyBzaGFkZSAtRiBvZmYgLWwgb24gLUwgb24gLUcgb2ZmIC1CIG5vbmUgLWQgdXYgLXIgc2NlbmUgc2VsZWN0c2NlbmUgQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXdkaXNwc2V0IC10IG9mZiAgc2VsZWN0c2NlbmUgQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXdkaXNwc2V0IC1tIG9mZiBhbHdheXMgLW4gb2ZmIGFsd2F5cyAtYyBvZmYgYWx3YXlzIC11IG9mZiBhbHdheXMgLXggb2ZmIGFsd2F5cyAtTiBvZmYgYWx3YXlzIC1DIG9mZiBhbHdheXMgLWIgb2ZmIGFsd2F5cyAtTSBvZmYgYWx3YXlzIC12IG9mZiBhbHdheXMgLVYgb2ZmIGFsd2F5cyAtVSBvZmYgYWx3YXlzIC1oIG9mZiAtUCBvZmYgLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb2ZmIC1zIHNoYWRlIC1GIG9mZiAtbCBvbiAtTCBvZmYgLUcgb24gLUIgbm9uZSAtZCB1diAtciB1bmlxdWUgZ2hvc3RzY2VuZSBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld2Rpc3BzZXQgLXQgb2ZmICBnaG9zdHNjZW5lIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb24gLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb24gLXMgc2hhZGVfd2lyZSAtRiBvZmYgLWwgb24gLUwgb24gLUcgb2ZmIC1CIG5vbmUgLWQgdXYgLXIgdW5pcXVlIGRpc3BsYXkgQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXdkaXNwc2V0IC10IG9uICBkaXNwbGF5IEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb24gLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb2ZmIC1zIHdpcmUgLUYgb2ZmIC1sIG9uIC1MIG9mZiAtRyBvZmYgLUIgbm9uZSAtZCB1diAtciB1bmlxdWUgY3VycmVudCBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld2Rpc3BzZXQgLXQgb2ZmICBjdXJyZW50IEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb2ZmIC1wIG9mZiAtZiBvZmYgLW8gb2ZmIC13IG9mZiAtcyB3aXJlIC1GIG9uIC1sIG9uIC1MIG9mZiAtRyBvbiAtQiBub25lIC1kIHV2IC1yIHVuaXF1ZSB0ZW1wbGF0ZSBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld2Rpc3BzZXQgLXQgb2ZmICB0ZW1wbGF0ZSBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld2Rpc3BsYXkgLUIgZGFyayAtYiBvZmYgLWQgb2ZmIC1DIDIgLWUgMSAtRiBvbiAtZiBvZmYgLWcgb24gLUcgJyonIC1oIG9mZiAtSCBvbiAtaiBvZmYgLUogb2ZmIC1MIG9uIC1uIDAuMiAtbyBvZmYgLU8gb24gLXEgb24gLXIgb24gLXMgb2ZmIC10IG9uIC1WIDIgLXogb2ZmIC15IG9mZiAteCBvZmYgLVggb2ZmIC1VIDQgLVkgNCAtVCBvbiAtUiBvbiAtaSBvbiAtRCBvbiAtayBvZmYgQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXdkaXNwbGF5IC1RIG9uIC1tIG9uIC12IG9uIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3ZGlzcGxheSAtVyAgb2ZmIDAgMCBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld2Rpc3BsYXkgLWMgb24gLWwxIC1LIG9uIC1QIHBvaW50cyAtcCAzIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3ZGlzcG9wdHMgLWEgb24gLUEgMC41IC1iIGN1cnJlbnQgLUIgMCAtYyAxIC1DIDYwICAtZCAgb24gLUQgMSAtZyBvbiAtaSBvbiAtbiBvbiAtTiAxMDAwMDAwIC1vIG9mZiAtcCAxMCAtUCBvZmYgLXIgb2ZmIC1SIG9uIC1TIDc2OCAtbCAxMjggLW0gMC4wNSAtTSAxMDI0IC1zIG9uIC10IDAuNSAtdSB1diAtdyAwLjEgLVcgMC45IC14IG9uIC1YIG9mZiBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld2Rpc3BvcHRzIC1mIG9mZiAtayAwIC1JIDEgLU8gb24gLVQgTWF0Q2FwL09pbENsYXkucGljIC1VIGxvb2tkZXYvdXZncmlkX2dyZXkuZXhyIC12IDEgQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXdkaXNwb3B0cyAtRyAyIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3ZGlzcG9wdHMgLWogMSAtSiAxIC1LIDEgQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXdlZmZlY3QgLWEgMiAtQSA0IC1iIG9uIC1CIDEgLWQgb24gLUQgb24gb2ZmIC1lIDAuOCAtRSAtMzAgLTMwIC0xMDAgLWYgMSAtRiAwIC1nIDIuMiAtRyAwIC1oIDEgLUggb24gLWkgb24gLUkgMSAtaiBvbiAtSiA1MCAtSyAyIC1rIDEgLWwgJycgLW0gb24gLU0gMjA0OCAtbyBvZmYgLU8gMyAtcCBvZmYgLVAgMyAtcSAxIC1RIDIgLXIgMjA0OCAyMDQ4IC1zIDIgLXQgMTAwIC1UIDEwMCAtdSBvZmYgLVUgb2ZmIC12IDI1NiAyNTYgMjU2IC13IDAuMDUgLVcgb24gLXggMC40IDAuNCAwLjQgLVggMC40IDAuNCAwLjQgLXkgMC40IDAuNCAwLjQgLVkgMC4wMDI1IDAuMDAyNSAwLjAwMjUgLXogMC4wMSAtWiAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3aW5mb3RleHQgLW0gb2ZmIC1zIG9mZiAtdCBvbiBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld2xpZ2h0ICAtYSBvbiAtZCBvbiAtZSBvbiAtaCBvbiAtbCBvbiAtbiAyMCAtcyBvbiBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld2JhY2tncm91bmQgLWIgb24gLWUgb24gLXEgMSAtaSBvZmYgLW0gMCAwIC1NIDEgMSBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb24gLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgcGVyc3AgQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXdyb3RvICAtUyBmaWxlIC1GICcnIC1DICcnIC1hIG9uIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIGNhbSBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb2ZmIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIHRvcCBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb2ZmIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIGZyb250IEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvZmYgLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgcmlnaHQgQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXdyb3RvICAtUyBmaWxlIC1GICcnIC1DICcnIC1hIG9mZiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBib3R0b20gQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXdyb3RvICAtUyBmaWxlIC1GICcnIC1DICcnIC1hIG9mZiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBiYWNrIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvZmYgLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgbGVmdCBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJ2xvb2tkZXYvdXZncmlkX2dyZXkuZXhyJyAtQyAnJyAtYSBvbiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAwLjIgLWUgb2ZmIHV2IEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvbiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBpbWFnZSBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld2ZvcmVncm91bmQgLWQgb24gLWYgb24gLUQgUHogLXMgMCBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld2ZvcmVncm91bmQgLW8gMSBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld3RyYW5zZm9ybSBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEgdmVyc2lvbiAoIDMgKSAgZmxhZyAoIEZveCApICBvcnRob3dpZHRoICggMi4yMjIyMiApICBmb2NhbCAoIDUwICkgIGFwZXJ0dXJlICggNDEuNDIxNCApICB3aW5kb3cgKCAwIDEgMCAxICkgIHdpbnJvbGwgKCAwICkgIGNsZWFyICggMSApICBuZWFyZmFyICggMC4wMDM0NjQ0NyAzNDY0NC43ICkgIGFzcGVjdCAoIDEuMzMzMzMgKSAgcGl4ZWxhc3BlY3QgKCAxICkgIHR4eXogKCAwIDAgMy42ODI0NiApICBweHl6ICggMCAwIDAgKSAgcm90YXRpb24gKCAxIDAgMCAwIDEgMCAwIDAgMSAgKSAgaG9tZWRpc3RhbmNlICggMy42ODI0NiApICBob21lYWRqYm94d2lkdGggKCAyLjIyMjIyICkgIGhvbWVvcnRob3dpZHRoICggMi4yMjIyMiApICBob21lcmFkaXVzICggMy40NjQxICkgIGhvbWVheGlzICggMCApICBob21lY3VzdG9tICggMC43MDcxMDcgLTAuMzUzNTUzIDAuNjEyMzcyIDAgMC44NjYwMjUgMC41IC0wLjcwNzEwNyAtMC4zNTM1NTMgMC42MTIzNzIgICkgIGFkanVzdGxpbWl0cyAoIDMgKSAgZm92ICggNDViKSAgaW5mZnJlZWNhbSAoIDAgKSAgCnZpZXdvcnRob2dyaWQgLWQgb2ZmIC1vIDAgMCAwIC1zIDAuMiAwLjIgLXIgNSA1IC1SIDEgQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXd1dmdyaWQgLXIgb24gLXMgMC4xIDAuMSAtUCBvZmYgLVMgNjQgNjQgLU8gMCAwIC1DIG9uIC10IG9uIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3YWdlbnRvcHRzICAtTCBvbiAtYiAwIC1kIDEgLWwgMCAtbSA0IC1wIDEwMDAgLXcgMSAtQiAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3Y2hhcmFjdGVyb3B0cyAgLUQgb2ZmIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3b25pb25za2luICAtZSBvbiAtYSA0IC1iIDQgLWkgNiAtbyAwLjUgLUEgMSAxIDEgLUIgMSAxIDEgQnVpbGQucGFuZXRhYjIud29ybGQuZnJvbnQxCnZpZXdwb3N0ZWZmZWN0cyAgLUQgb2ZmIC1CIG9mZiAtdCAiIiAtZiBvZmYgLVYgb2ZmIC1TIG9uIC1hIDEgLWIgNSAtRiAxIC1nIDEgLWMgMSAxIDEgLUMgMSAxIDEgLWQgMWUrMDYgLWggMCAtSCAxMDAgMTAgLWkgMSAtSSAxIC1sIDEgLW4gIiIgLW8gMSAtTyAxIC1yIDAgMTAwMCAtUiAxIDIwMCAtcyAxIDEgLXUgMCAtVSAxMDAgMTAgLXYgMCBCdWlsZC5wYW5ldGFiMi53b3JsZC5mcm9udDEKdmlld3Bvc3RlZmZlY3RzICAtZSBvZmYgLUUgMTAgLVQgMC45NSAtTCAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3bWFza292ZXJsYXkgLW8gMC40IEJ1aWxkLnBhbmV0YWIyLndvcmxkLmZyb250MQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb2ZmIC1wIG9mZiAtZiBvZmYgLW8gb2ZmIC13IG9mZiAtcyBzaGFkZSAtRiBvZmYgLWwgb24gLUwgb24gLUcgb2ZmIC1CIG5vbmUgLWQgdXYgLXIgdW5pcXVlIHNjZW5lIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3ZGlzcHNldCAtdCBvZmYgIHNjZW5lIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb2ZmIC1wIG9mZiAtZiBvZmYgLW8gb2ZmIC13IG9mZiAtcyBzaGFkZSAtRiBvZmYgLWwgb24gLUwgb24gLUcgb2ZmIC1CIG5vbmUgLWQgdXYgLXIgc2NlbmUgc2VsZWN0c2NlbmUgQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXdkaXNwc2V0IC10IG9mZiAgc2VsZWN0c2NlbmUgQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXdkaXNwc2V0IC1tIG9mZiBhbHdheXMgLW4gb2ZmIGFsd2F5cyAtYyBvZmYgYWx3YXlzIC11IG9mZiBhbHdheXMgLXggb2ZmIGFsd2F5cyAtTiBvZmYgYWx3YXlzIC1DIG9mZiBhbHdheXMgLWIgb2ZmIGFsd2F5cyAtTSBvZmYgYWx3YXlzIC12IG9mZiBhbHdheXMgLVYgb2ZmIGFsd2F5cyAtVSBvZmYgYWx3YXlzIC1oIG9mZiAtUCBvZmYgLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb2ZmIC1zIHNoYWRlIC1GIG9mZiAtbCBvbiAtTCBvZmYgLUcgb24gLUIgbm9uZSAtZCB1diAtciB1bmlxdWUgZ2hvc3RzY2VuZSBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld2Rpc3BzZXQgLXQgb2ZmICBnaG9zdHNjZW5lIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb24gLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb24gLXMgc2hhZGVfd2lyZSAtRiBvZmYgLWwgb24gLUwgb24gLUcgb2ZmIC1CIG5vbmUgLWQgdXYgLXIgdW5pcXVlIGRpc3BsYXkgQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXdkaXNwc2V0IC10IG9uICBkaXNwbGF5IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb24gLXAgb2ZmIC1mIG9mZiAtbyBvZmYgLXcgb2ZmIC1zIHdpcmUgLUYgb2ZmIC1sIG9uIC1MIG9mZiAtRyBvZmYgLUIgbm9uZSAtZCB1diAtciB1bmlxdWUgY3VycmVudCBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld2Rpc3BzZXQgLXQgb2ZmICBjdXJyZW50IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3ZGlzcHNldCAtbSBvZmYgYWx3YXlzIC1uIG9mZiBhbHdheXMgLWMgb2ZmIGFsd2F5cyAtdSBvZmYgYWx3YXlzIC14IG9mZiBhbHdheXMgLU4gb2ZmIGFsd2F5cyAtQyBvZmYgYWx3YXlzIC1iIG9mZiBhbHdheXMgLU0gb2ZmIGFsd2F5cyAtdiBvZmYgYWx3YXlzIC1WIG9mZiBhbHdheXMgLVUgb2ZmIGFsd2F5cyAtaCBvZmYgLVAgb2ZmIC1wIG9mZiAtZiBvZmYgLW8gb2ZmIC13IG9mZiAtcyB3aXJlIC1GIG9uIC1sIG9uIC1MIG9mZiAtRyBvbiAtQiBub25lIC1kIHV2IC1yIHVuaXF1ZSB0ZW1wbGF0ZSBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld2Rpc3BzZXQgLXQgb2ZmICB0ZW1wbGF0ZSBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld2Rpc3BsYXkgLUIgZGFyayAtYiBvZmYgLWQgb2ZmIC1DIDIgLWUgMSAtRiBvbiAtZiBvZmYgLWcgb24gLUcgJyonIC1oIG9mZiAtSCBvbiAtaiBvZmYgLUogb2ZmIC1MIG9uIC1uIDAuMiAtbyBvZmYgLU8gb24gLXEgb24gLXIgb24gLXMgb2ZmIC10IG9uIC1WIDIgLXogb2ZmIC15IG9mZiAteCBvZmYgLVggb2ZmIC1VIDQgLVkgNCAtVCBvbiAtUiBvbiAtaSBvbiAtRCBvbiAtayBvZmYgQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXdkaXNwbGF5IC1RIG9uIC1tIG9uIC12IG9uIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3ZGlzcGxheSAtVyAgb2ZmIDAgMCBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld2Rpc3BsYXkgLWMgb24gLWwxIC1LIG9uIC1QIHBvaW50cyAtcCAzIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3ZGlzcG9wdHMgLWEgb24gLUEgMC41IC1iIGN1cnJlbnQgLUIgMCAtYyAxIC1DIDYwICAtZCAgb24gLUQgMSAtZyBvbiAtaSBvbiAtbiBvbiAtTiAxMDAwMDAwIC1vIG9mZiAtcCAxMCAtUCBvZmYgLXIgb2ZmIC1SIG9uIC1TIDc2OCAtbCAxMjggLW0gMC4wNSAtTSAxMDI0IC1zIG9uIC10IDAuNSAtdSB1diAtdyAwLjEgLVcgMC45IC14IG9uIC1YIG9mZiBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld2Rpc3BvcHRzIC1mIG9mZiAtayAwIC1JIDEgLU8gb24gLVQgTWF0Q2FwL09pbENsYXkucGljIC1VIGxvb2tkZXYvdXZncmlkX2dyZXkuZXhyIC12IDEgQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXdkaXNwb3B0cyAtRyAyIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3ZGlzcG9wdHMgLWogMSAtSiAxIC1LIDEgQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXdlZmZlY3QgLWEgMiAtQSA0IC1iIG9uIC1CIDEgLWQgb24gLUQgb24gb2ZmIC1lIDAuOCAtRSAtMzAgLTMwIC0xMDAgLWYgMSAtRiAwIC1nIDIuMiAtRyAwIC1oIDEgLUggb24gLWkgb24gLUkgMSAtaiBvbiAtSiA1MCAtSyAyIC1rIDEgLWwgJycgLW0gb24gLU0gMjA0OCAtbyBvZmYgLU8gMyAtcCBvZmYgLVAgMyAtcSAxIC1RIDIgLXIgMjA0OCAyMDQ4IC1zIDIgLXQgMTAwIC1UIDEwMCAtdSBvZmYgLVUgb2ZmIC12IDI1NiAyNTYgMjU2IC13IDAuMDUgLVcgb24gLXggMC40IDAuNCAwLjQgLVggMC40IDAuNCAwLjQgLXkgMC40IDAuNCAwLjQgLVkgMC4wMDI1IDAuMDAyNSAwLjAwMjUgLXogMC4wMSAtWiAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3aW5mb3RleHQgLW0gb2ZmIC1zIG9mZiAtdCBvbiBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld2xpZ2h0ICAtYSBvbiAtZCBvbiAtZSBvbiAtaCBvbiAtbCBvbiAtbiAyMCAtcyBvbiBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld2JhY2tncm91bmQgLWIgb24gLWUgb24gLXEgMSAtaSBvZmYgLW0gMCAwIC1NIDEgMSBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb24gLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgcGVyc3AgQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXdyb3RvICAtUyBmaWxlIC1GICcnIC1DICcnIC1hIG9uIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIGNhbSBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb2ZmIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIHRvcCBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJycgLUMgJycgLWEgb2ZmIC1mICdzY2FsZScgLW8gMCAwIC1zIDEgMSAtTyAxIC1CIDEgLWUgb2ZmIGZyb250IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvZmYgLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgcmlnaHQgQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXdyb3RvICAtUyBmaWxlIC1GICcnIC1DICcnIC1hIG9mZiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBib3R0b20gQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXdyb3RvICAtUyBmaWxlIC1GICcnIC1DICcnIC1hIG9mZiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBiYWNrIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvZmYgLWYgJ3NjYWxlJyAtbyAwIDAgLXMgMSAxIC1PIDEgLUIgMSAtZSBvZmYgbGVmdCBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld3JvdG8gIC1TIGZpbGUgLUYgJ2xvb2tkZXYvdXZncmlkX2dyZXkuZXhyJyAtQyAnJyAtYSBvbiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAwLjIgLWUgb2ZmIHV2IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3cm90byAgLVMgZmlsZSAtRiAnJyAtQyAnJyAtYSBvbiAtZiAnc2NhbGUnIC1vIDAgMCAtcyAxIDEgLU8gMSAtQiAxIC1lIG9mZiBpbWFnZSBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld2ZvcmVncm91bmQgLWQgb24gLWYgb24gLUQgUHogLXMgMCBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld2ZvcmVncm91bmQgLW8gMSBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld3RyYW5zZm9ybSBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEgdmVyc2lvbiAoIDMgKSAgZmxhZyAoIEZveCApICBvcnRob3dpZHRoICggMi4yMjIyMiApICBmb2NhbCAoIDUwICkgIGFwZXJ0dXJlICggNDEuNDIxNCApICB3aW5kb3cgKCAwIDEgMCAxICkgIHdpbnJvbGwgKCAwICkgIGNsZWFyICggMSApICBuZWFyZmFyICggMC4wMDM0NjQ0NyAzNDY0NC43ICkgIGFzcGVjdCAoIDEuMzMzMzMgKSAgcGl4ZWxhc3BlY3QgKCAxICkgIHR4eXogKCAwIDAgMy42ODI0NiApICBweHl6ICggMCAwIDAgKSAgcm90YXRpb24gKCA2LjEyMzIzZS0xNyAwIDEgMCAxIDAgLTEgMCA2LjEyMzIzZS0xNyAgKSAgaG9tZWRpc3RhbmNlICggMy42ODI0NiApICBob21lYWRqYm94d2lkdGggKCAyLjIyMjIyICkgIGhvbWVvcnRob3dpZHRoICggMi4yMjIyMiApICBob21lcmFkaXVzICggMy40NjQxICkgIGhvbWVheGlzICggMCApICBob21lY3VzdG9tICggMC43MDcxMDcgLTAuMzUzNTUzIDAuNjEyMzcyIDAgMC44NjYwMjUgMC41IC0wLjcwNzEwNyAtMC4zNTM1NTMgMC42MTIzNzIgICkgIGFkanVzdGxpbWl0cyAoIDMgKSAgZm92ICggNDViKSAgaW5mZnJlZWNhbSAoIDAgKSAgCnZpZXdvcnRob2dyaWQgLWQgb2ZmIC1vIDAgMCAwIC1zIDAuMiAwLjIgLXIgNSA1IC1SIDEgQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXd1dmdyaWQgLXIgb24gLXMgMC4xIDAuMSAtUCBvZmYgLVMgNjQgNjQgLU8gMCAwIC1DIG9uIC10IG9uIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3YWdlbnRvcHRzICAtTCBvbiAtYiAwIC1kIDEgLWwgMCAtbSA0IC1wIDEwMDAgLXcgMSAtQiAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3Y2hhcmFjdGVyb3B0cyAgLUQgb2ZmIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3b25pb25za2luICAtZSBvbiAtYSA0IC1iIDQgLWkgNiAtbyAwLjUgLUEgMSAxIDEgLUIgMSAxIDEgQnVpbGQucGFuZXRhYjIud29ybGQucmlnaHQxCnZpZXdwb3N0ZWZmZWN0cyAgLUQgb2ZmIC1CIG9mZiAtdCAiIiAtZiBvZmYgLVYgb2ZmIC1TIG9uIC1hIDEgLWIgNSAtRiAxIC1nIDEgLWMgMSAxIDEgLUMgMSAxIDEgLWQgMWUrMDYgLWggMCAtSCAxMDAgMTAgLWkgMSAtSSAxIC1sIDEgLW4gIiIgLW8gMSAtTyAxIC1yIDAgMTAwMCAtUiAxIDIwMCAtcyAxIDEgLXUgMCAtVSAxMDAgMTAgLXYgMCBCdWlsZC5wYW5ldGFiMi53b3JsZC5yaWdodDEKdmlld3Bvc3RlZmZlY3RzICAtZSBvZmYgLUUgMTAgLVQgMC45NSAtTCAxIEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3bWFza292ZXJsYXkgLW8gMC40IEJ1aWxkLnBhbmV0YWIyLndvcmxkLnJpZ2h0MQp2aWV3c25hcHNob3RvcHRpb24gLXMgb2ZmIC1oIG9mZiAtYSAxIC12ICcqJyAtbSAwIEJ1aWxkLnBhbmV0YWIyLndvcmxkCmNwbGFuZSAtbyAwIDAgMCAtbiA0LjM3MTE0ZS0wOCAxIC00LjM3MTE0ZS0wOCAteCAxLjkxMDY5ZS0xNSA0LjM3MTE0ZS0wOCAxIC1sIG4gLXMgMC4xIDAuMSAtYyA0MCA0MCAtciAxMCAxMCAtZCBvZmYgQnVpbGQucGFuZXRhYjIud29ybGQKZ2xjYWNoZSAtdCA0OTEyIC12IDE5NjUxCm5ldHdvcmtlZGl0b3IgLXAgJ3tcbn1cbidpbWd2aWV3IC1wICcoJyBub25lIC16IDEgJyknIDAgLWMgMCAtbCBvbiAtcyBvZmYgLWkgaW1ndmlldzIKaW1nZGlzcG9wdCAtbSAyNTYgLVAgb24gLU0gb24gLUEgb24gLWogb24gLXggb2ZmIC1MIG9uIC1nIDIuMiAtQiAxIC12IHNwbGl0IC1WIDIgMiAtZCBoIC1hIG9mZiAtaSAyIC1iIDAgMCAwIC1vICIiIC1oIG9uIC1IIG9uIC1jIDAuOCAwLjggMC44IC1DIDEgMSAxIC1TIDEgMSAwIC1SIDYgLUYgZGMgLUQgIiIgLUkgIiIgLWYgIiIgLXMgb2ZmIC1yIDI1NiAyNTYgLXAgb24gLWwgb24gLXQgb24KaW1ndmlldyAteiAxIC1wIChub25lKSAwIC1jIDAgLWwgb24gLXMgb2ZmIC1pIGltZ3ZpZXcyCmltZ3ZpZXcyZCAgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1tIDAgLXAgMCAxIC1iIDEgMSAwIC1nIDIuMiAtZCAiIiAtYyAtMSAtdCBvZmYgLWkgb24gLVggb24gaW1ndmlldzIgMQppbWd2aWV3MmQgIC1WIG9uIC1MIG9uIC1HIG9uIC1IIG9uIC1QIG9mZiAtbSAwIC1wIDAgMSAtYiAxIDEgMCAtZyAyLjIgLWQgIiIgLWMgLTEgLXQgb2ZmIC1pIG9uIC1YIG9uIGltZ3ZpZXcyIDIKaW1ndmlldzJkICAtViBvbiAtTCBvbiAtRyBvbiAtSCBvbiAtUCBvZmYgLW0gMCAtcCAwIDEgLWIgMSAxIDAgLWcgMi4yIC1kICIiIC1jIC0xIC10IG9mZiAtaSBvbiAtWCBvbiBpbWd2aWV3MiAzCmltZ3ZpZXcyZCAgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1tIDAgLXAgMCAxIC1iIDEgMSAwIC1nIDIuMiAtZCAiIiAtYyAtMSAtdCBvZmYgLWkgb24gLVggb24gaW1ndmlldzIgNAppbWd2aWV3MmQgIC1WIG9uIC1MIG9uIC1HIG9uIC1IIG9uIC1QIG9mZiAtbSAwIC1wIDAgMSAtYiAxIDEgMCAtZyAyLjIgLWQgIiIgLWMgLTEgLXQgb2ZmIC1pIG9uIC1YIG9uIGltZ3ZpZXcyIDUKaW1ndmlldzJkICAtViBvbiAtTCBvbiAtRyBvbiAtSCBvbiAtUCBvZmYgLW0gMCAtcCAwIDEgLWIgMSAxIDAgLWcgMi4yIC1kICIiIC1jIC0xIC10IG9mZiAtaSBvbiAtWCBvbiBpbWd2aWV3MiA2CmltZ3ZpZXcyZCAgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1tIDAgLXAgMCAxIC1iIDEgMSAwIC1nIDIuMiAtZCAiIiAtYyAtMSAtdCBvZmYgLWkgb24gLVggb24gaW1ndmlldzIgNwppbWd2aWV3MmQgIC1WIG9uIC1MIG9uIC1HIG9uIC1IIG9uIC1QIG9mZiAtbSAwIC1wIDAgMSAtYiAxIDEgMCAtZyAyLjIgLWQgIiIgLWMgLTEgLXQgb2ZmIC1pIG9uIC1YIG9uIGltZ3ZpZXcyIDgKaW1ndmlldzJkICAtViBvbiAtTCBvbiAtRyBvbiAtSCBvbiAtUCBvZmYgLW0gMCAtcCAwIDEgLWIgMSAxIDAgLWcgMi4yIC1kICIiIC1jIC0xIC10IG9mZiAtaSBvbiAtWCBvbiBpbWd2aWV3MiA5CmltZ3ZpZXcyZCAgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1tIDAgLXAgMCAxIC1iIDEgMSAwIC1nIDIuMiAtZCAiIiAtYyAtMSAtdCBvZmYgLWkgb24gLVggb24gaW1ndmlldzIgMTAKaW1ndmlldzJkICAtViBvbiAtTCBvbiAtRyBvbiAtSCBvbiAtUCBvZmYgLW0gMCAtcCAwIDEgLWIgMSAxIDAgLWcgMi4yIC1kICIiIC1jIC0xIC10IG9mZiAtaSBvbiAtWCBvbiBpbWd2aWV3MiAxMQppbWd2aWV3MmQgIC1WIG9uIC1MIG9uIC1HIG9uIC1IIG9uIC1QIG9mZiAtbSAwIC1wIDAgMSAtYiAxIDEgMCAtZyAyLjIgLWQgIiIgLWMgLTEgLXQgb2ZmIC1pIG9uIC1YIG9uIGltZ3ZpZXcyIDEyCmltZ3ZpZXcyZCAgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1tIDAgLXAgMCAxIC1iIDEgMSAwIC1nIDIuMiAtZCAiIiAtYyAtMSAtdCBvZmYgLWkgb24gLVggb24gaW1ndmlldzIgMTMKaW1ndmlldzJkICAtViBvbiAtTCBvbiAtRyBvbiAtSCBvbiAtUCBvZmYgLW0gMCAtcCAwIDEgLWIgMSAxIDAgLWcgMi4yIC1kICIiIC1jIC0xIC10IG9mZiAtaSBvbiAtWCBvbiBpbWd2aWV3MiAxNAppbWd2aWV3MmQgIC1WIG9uIC1MIG9uIC1HIG9uIC1IIG9uIC1QIG9mZiAtbSAwIC1wIDAgMSAtYiAxIDEgMCAtZyAyLjIgLWQgIiIgLWMgLTEgLXQgb2ZmIC1pIG9uIC1YIG9uIGltZ3ZpZXcyIDE1CmltZ3ZpZXcyZCAgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1tIDAgLXAgMCAxIC1iIDEgMSAwIC1nIDIuMiAtZCAiIiAtYyAtMSAtdCBvZmYgLWkgb24gLVggb24gaW1ndmlldzIgMTYKaW1ndmlld3RpbWUgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1yIDI0IC11IGZyIC1nIDAgLWYgb24gLWUgb24gLWIgb24gLWQgaW1ndmlldzIKaW1ndmlld2hpc3QgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1jIC0xIC1oIDAgLWkgb24gaW1ndmlldzIgMQppbWd2aWV3aGlzdCAtViBvbiAtTCBvbiAtRyBvbiAtSCBvbiAtUCBvZmYgLWMgLTEgLWggMCAtaSBvbiBpbWd2aWV3MiAyCmltZ3ZpZXdoaXN0IC1WIG9uIC1MIG9uIC1HIG9uIC1IIG9uIC1QIG9mZiAtYyAtMSAtaCAwIC1pIG9uIGltZ3ZpZXcyIDMKaW1ndmlld2hpc3QgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1jIC0xIC1oIDAgLWkgb24gaW1ndmlldzIgNAppbWd2aWV3aGlzdCAtViBvbiAtTCBvbiAtRyBvbiAtSCBvbiAtUCBvZmYgLWMgLTEgLWggMCAtaSBvbiBpbWd2aWV3MiA1CmltZ3ZpZXdoaXN0IC1WIG9uIC1MIG9uIC1HIG9uIC1IIG9uIC1QIG9mZiAtYyAtMSAtaCAwIC1pIG9uIGltZ3ZpZXcyIDYKaW1ndmlld2hpc3QgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1jIC0xIC1oIDAgLWkgb24gaW1ndmlldzIgNwppbWd2aWV3aGlzdCAtViBvbiAtTCBvbiAtRyBvbiAtSCBvbiAtUCBvZmYgLWMgLTEgLWggMCAtaSBvbiBpbWd2aWV3MiA4CmltZ3ZpZXdoaXN0IC1WIG9uIC1MIG9uIC1HIG9uIC1IIG9uIC1QIG9mZiAtYyAtMSAtaCAwIC1pIG9uIGltZ3ZpZXcyIDkKaW1ndmlld2hpc3QgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1jIC0xIC1oIDAgLWkgb24gaW1ndmlldzIgMTAKaW1ndmlld2hpc3QgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1jIC0xIC1oIDAgLWkgb24gaW1ndmlldzIgMTEKaW1ndmlld2hpc3QgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1jIC0xIC1oIDAgLWkgb24gaW1ndmlldzIgMTIKaW1ndmlld2hpc3QgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1jIC0xIC1oIDAgLWkgb24gaW1ndmlldzIgMTMKaW1ndmlld2hpc3QgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1jIC0xIC1oIDAgLWkgb24gaW1ndmlldzIgMTQKaW1ndmlld2hpc3QgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1jIC0xIC1oIDAgLWkgb24gaW1ndmlldzIgMTUKaW1ndmlld2hpc3QgLVYgb24gLUwgb24gLUcgb24gLUggb24gLVAgb2ZmIC1jIC0xIC1oIDAgLWkgb24gaW1ndmlldzIgMTYKcGFuZXBhdGggLWQgQnVpbGQgLWYgLXAgcGFuZXRhYjE0IC9zdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvc21vb3RoMQpwYW5lcGF0aCAtZCBCdWlsZCAtZiAtcCBwYW5ldGFiMiAvc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Ntb290aDEKcGFuZXBhdGggLWQgQnVpbGQgLWYgLXAgcGFuZXRhYjMgL3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9zbW9vdGgxCnBhbmVwYXRoIC1kIEJ1aWxkIC1mIC1wIHBhbmV0YWIxMSAvc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Ntb290aDEKcGFuZXBhdGggLWQgQnVpbGQgLWYgLXAgcGFuZXRhYjEgL3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9zbW9vdGgxCnBhbmVwYXRoIC1kIEJ1aWxkIC1mIC1wIHBhbmV0YWIyMSAvc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Ntb290aDEKcGFuZXBhdGggLWQgQnVpbGQgLWYgLXAgcGFuZXRhYjUgL3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9zbW9vdGgxCnBhbmVwYXRoIC1kIEJ1aWxkIC1mIC1wIHBhbmV0YWI2IC9zdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvc21vb3RoMQpwYW5lcGF0aCAtZCBCdWlsZCAtZiAtcCBwYW5ldGFiMTAgL3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9zbW9vdGgxCnBhbmVwYXRoIC1kIEJ1aWxkIC1mIC1wIHBhbmV0YWIxMiAvc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Ntb290aDEKcGFuZXBhdGggLWQgQnVpbGQgLWYgLXAgcGFuZXRhYjcgL3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9zbW9vdGgxCnBhbmVwYXRoIC1kIEJ1aWxkIC1mIC1wIHBhbmV0YWI4IC9vYmovCnBhbmVwYXRoIC1kIEJ1aWxkIC1mIC1wIHBhbmV0YWI5IC9zdGFnZS9UcmFjaW5nL3NvcG5ldC9jcmVhdGUvc21vb3RoMQpwYW5lcGF0aCAtZCBCdWlsZCAtZiAtcCBwYW5ldGFiMjIgL3N0YWdlL1RyYWNpbmcvc29wbmV0L2NyZWF0ZS9zbW9vdGgxCnBhbmVwYXRoIC1kIEJ1aWxkIC1mIC1wIHBhbmV0YWIyMyAvc3RhZ2UvVHJhY2luZy9zb3BuZXQvY3JlYXRlL3Ntb290aDEKZGVzayBzZXQgQnVpbGQKdmlld3VwZGF0ZSAtdSBhbHdheXMKYXVkaW9wYW5lbCAtcyBwICcnCmF1ZGlvcGFuZWwgLXMgciBvZmYKYXVkaW9wYW5lbCAtcyBzIDI0CmF1ZGlvcGFuZWwgLXMgZiAyNAphdWRpb3BhbmVsIC10IHAgc3RvcAphdWRpb3BhbmVsIC10IGwgb2ZmCmF1ZGlvcGFuZWwgLXQgciBvbgphdWRpb3BhbmVsIC1vIG0gb2ZmCmF1ZGlvcGFuZWwgLW8gdCBvbgphdWRpb3BhbmVsIC1vIHUgb24KYXVkaW9wYW5lbCAtbyBsIDEKYXVkaW9wYW5lbCAtbyByIDEKYXVkaW9wYW5lbCAtbyBkIDAKYXVkaW9wYW5lbCAtciBkIDAuMgphdWRpb3BhbmVsIC1tIDAKYXVkaW9wYW5lbCAtYSAnJwphdWRpb3BhbmVsIC1mIDEKYXVkaW9wYW5lbCAtTyAwCmNvbG9yc2V0dGluZ3MgLUQgLUEgCmNvbXBwcm9qZWN0IC1yIDE5MjAgMTA4MCAtYSAxIC1kIGZwMTYgLXAgMCAxIC1QIGZ1bGwgLWYgMCAtRiAwIC1sIG9uCnRleGNhY2hlICAtYSBvZmYgLXIgMjE0NzQ4MzY0NyAyMTQ3NDgzNjQ3IC1tIDEwMDAwIC1NIDgxMTcKc2hvcHZpc2libGUgK0kzRCArVk1hbnRyYSArUklCCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDA3MDAwMDAwMDAwNjAudGFrZXMASG91ZGluaVRha2VGaWxlIDEuMAp0YWtlIG5hbWUgTWFpbiBraWRzIDAKAAAAAmUKMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTAwMDAwMDAwMDAwNy5zdHlsZXMAf05TSmJ7fTA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDIwMDAwMDAwMDAwMDQuY29udGV4dG9wdGlvbnMAWwpdCjA3MDcwNzAwMDAwMTAwMDAwMDAwMDY2NjAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDE1MDMxNjQ0MTM3MDAwMDA1MDAwMDAwMDAwMjQuY3dkAG9wY2YgLwp0YWtlc2V0IE1haW4KMDcwNzA3MDAwMDAxMDAwMDAwMDAwNjY2MDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMTUwMzE2NDQxMzcwMDAwMTMwMDAwMDAwMDAwMFRSQUlMRVIhISEA